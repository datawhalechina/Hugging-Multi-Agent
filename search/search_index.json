{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Hugging Multi-Agent","text":""},{"location":"#_1","title":"\u9879\u76ee\u7b80\u4ecb","text":"<ul> <li>\u8bfe\u7a0b\u8bf4\u660e\uff1aHugging Multi-Agent \u662f\u4e00\u5957\u4e13\u4e3a\u671f\u671b\u6df1\u5165\u4e86\u89e3\u5e76\u5b9e\u8df5\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u7684\u5f00\u53d1\u8005\u8bbe\u8ba1\u7684\u5b9e\u7528\u6307\u5357\u3002\u57fa\u4e8e\u56fd\u5185\u9886\u5148\u7684\u591a\u667a\u80fd\u4f53\u6846\u67b6 MetaGPT\uff08iclr 2024 oral\uff09 \u65e8\u5728\u5e2e\u52a9\u8bfb\u8005\u638c\u63e1\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u7684\u6838\u5fc3\u6982\u5ff5\uff0c\u5e76\u63d0\u4f9b\u4e00\u5957\u5168\u9762\u7684\u5b66\u4e60\u8def\u5f84\uff0c\u4ece\u667a\u80fd\u4f53\u7684\u57fa\u7840\u7406\u89e3\u5230\u590d\u6742\u7cfb\u7edf\u7684\u5b9e\u9645\u5f00\u53d1\u3002</li> <li>\u9762\u5411\u4eba\u7fa4\uff1a</li> <li>\u804c\u4e1a\u53d1\u5c55\u5b9a\u4f4d\uff1a\u672c\u8bfe\u7a0b\u9002\u5408\u90a3\u4e9b\u5e0c\u671b\u5728**\u5927\u6a21\u578b\u548c\u667a\u80fd\u4f53\u5f00\u53d1**\u9886\u57df\u53d6\u5f97\u804c\u4e1a\u53d1\u5c55\u7684\u5de5\u7a0b\u5e08\u3002\u4e0e\u4ec5\u4ec5\u5173\u6ce8prompt\u5de5\u7a0b\u7684\u5b66\u4e60\u8005\u4e0d\u540c\uff0c\u6211\u4eec\u7684\u76ee\u6807\u53d7\u4f17\u662f\u90a3\u4e9b\u6e34\u671b**\u6df1\u5165\u4e86\u89e3\u5e76\u5b9e\u8df5****Agent****\u6846\u67b6\u4ee5\u53ca\u667a\u80fd\u4f53\u7cfb\u7edf\u7684\u5f00\u53d1\u8005**\u3002</li> <li>\u6280\u672f\u57fa\u7840\uff1a<ul> <li>\u6211\u4eec\u7684\u8bfe\u7a0b\u5c06**\u76f4\u63a5\u4ece\u4ee3\u7801\u5c42\u9762\u63a2\u7d22\u667a\u80fd\u4f53\u7684\u4e2a\u6027\u5316\u5f00\u53d1**</li> <li>\u9002\u5408\u62e5\u6709**Python\u7f16\u7a0b\u57fa\u7840**\uff08\u6700\u597d\u62e5\u6709\u4e00\u5b9a\u5f02\u6b65\u7f16\u7a0b\u57fa\u7840\uff09</li> <li>\u80fd**\u719f\u7ec3\u9605\u8bfb\u548c\u7406\u89e3\u9879\u76ee\u6e90\u4ee3\u7801**\u7684\u5b66\u4e60\u8005</li> </ul> </li> <li>\u5174\u8da3\u4e0e\u52a8\u673a\uff1a\u9002\u5408\u5bf9AI\u667a\u80fd\u4f53\u9886\u57df\u5145\u6ee1\u70ed\u60c5\u7684\u5b66\u4e60\u8005\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u5e0c\u671b\u4ece\u4ee3\u7801\u5c42\u9762\u5bf9\u667a\u80fd\u4f53\u8fdb\u884c\u4e2a\u6027\u5316\u80fd\u529b\u5f00\u53d1\u7684\u4eba\u3002\u6211\u4eec\u7684\u8bfe\u7a0b\u65e8\u5728\u5e2e\u52a9\u5b66\u4e60\u8005\u5c06\u7406\u8bba\u77e5\u8bc6\u8f6c\u5316\u4e3a\u5b9e\u9645\u5e94\u7528\u3002</li> </ul> <p>\u9879\u76ee\u5728\u7ebf\u6559\u7a0b\uff1ahttps://deepwisdom.feishu.cn/wiki/MLILw0EdRiyiYRkJLgOcskyAnUh MetaGPT:https://github.com/geekan/MetaGPT</p>"},{"location":"#_2","title":"\u76ee\u5f55","text":"<p>\u7b2c\u4e00\u7ae0\uff1a\u524d\u671f\u51c6\u5907</p> <p>1.1 \u83b7\u53d6MetaGPT</p> <p>1.2 \u914d\u7f6eMetaGPT</p> <p>1.2.1 \u7533\u8bf7 ChatGPT API \u63a5\u53e3</p> <ul> <li>1.2.1.1 \u83b7\u53d6 OpenAI API Key</li> <li>1.2.1.2 \u914d\u7f6e OpenAI API Key</li> <li>1.2.1.3 \u914d\u7f6eGemini \u667a\u8c31/\u661f\u706b\u7b49LLM</li> <li>1.3 \u9996\u6b21\u5c1d\u8bd5</li> </ul> <p>\u7b2c\u4e8c\u7ae0\uff1a\u667a\u80fd\u4f53\u7ed3\u6784\u53ca\u591a\u667a\u80fd\u4f53\u6846\u67b6\u4ecb\u7ecd</p> <p>2.1 AI Agent\u4f53\u7cfb\u4ecb\u7ecd</p> <ul> <li>\u5355\u4f53AI Agent</li> <li>\u667a\u80fd\u4f53\u7528\u4f8b <ul> <li>\u6982\u5ff5\u9a8c\u8bc1Agent-BabyAGI</li> <li>\u751f\u6210Agents\u6a21\u62df</li> <li>\u5e94\u7528\u5c42\u7684Moe-\u591a\u4eba\u6c42\u89e3</li> </ul> </li> <li>2.1.3 Sy1&amp;Sy2\u7ed9Agent\u7684\u542f\u53d1</li> <li>2.1.4 \u66f4\u591a\u4ed3\u5e93\u4ee5\u53ca\u4ea7\u54c1</li> </ul> <p>2.2 \u591a\u667a\u80fd\u4f53\u6846\u67b6\u4ecb\u7ecd</p> <ul> <li>2.2.1 \u4ec0\u4e48\u662fMetaGPT</li> <li>2.2.2 \u7ecf\u5178\u6848\u4f8b\uff1a\u8f6f\u4ef6\u516c\u53f8</li> <li>2.2.3 \u66f4\u591a\u5173\u4e8eMetaGPT</li> <li>2.2.4 \u5176\u4ed6\u591a\u667a\u80fd\u4f53\u6846\u67b6 <ul> <li>ChatDev</li> <li>AutoAgents</li> <li>agents</li> <li>Camel</li> <li>AutoGen</li> </ul> </li> </ul> <p>\u7b2c\u4e09\u7ae0\uff1a\u667a\u80fd\u4f53\u5f00\u53d1</p> <p>3.1 Agent\u6982\u5ff5\u6a21\u5757</p> <p>3.2 RoleContext</p> <p>3.3 \u5b9e\u73b0\u4e00\u4e2a\u7b80\u6d01\u7684Agent</p> <ul> <li>3.3.1 \u9700\u6c42\u5206\u6790</li> <li>3.3.2 \u7f16\u5199SimpleWriteCode\u52a9\u624b</li> <li>3.3.3 \u8bbe\u8ba1SimpleCoder\u89d2\u8272</li> </ul> <p>3.4 \u5b9e\u73b0\u4e00\u4e2a\u591a\u529f\u80fdAgent</p> <ul> <li>3.4.1 \u9700\u6c42\u5206\u6790</li> <li>3.4.2 \u7f16\u5199SimpleWriteCode\u52a9\u624b</li> <li>3.4.3 \u7f16\u5199 SimpleRunCode \u52a9\u624b</li> <li>3.4.4 \u5b9a\u4e49 RunnableCoder \u89d2\u8272</li> <li>3.4.5 \u8fd0\u884c RunnableCoder \u89d2\u8272</li> </ul> <p>3.5 \u5b9e\u73b0\u4e00\u4e2a\u7ba1\u7406\u7c7bAgent: \u6280\u672f\u6587\u6863\u52a9\u624b</p> <ul> <li>3.5.1 \u9700\u6c42\u5206\u6790</li> <li>3.5.2 \u7f16\u5199 WriteDirectory \u52a9\u624b</li> <li>3.5.3 \u7f16\u5199 WriteContent \u52a9\u624b</li> <li>3.5.4 \u7f16\u5199 TutorialAssistant \u89d2\u8272</li> <li>3.5.5 \u8fd0\u884c TutorialAssistant \u89d2\u8272</li> </ul> <p>3.6 \u667a\u80fd\u4f53\u6848\u4f8b\u5256\u6790</p> <p>3.7 \u667a\u80fd\u4f53\u5f00\u53d1\u4f5c\u4e1a</p> <p>\u7b2c\u56db\u7ae0\uff1a\u591a\u667a\u80fd\u4f53\u5f00\u53d1</p> <p>4.1 Multi Agent\u6982\u5ff5\u6a21\u5757</p> <p>4.2 \u591a\u667a\u80fd\u4f53\u7ec4\u4ef6\u4ecb\u7ecd</p> <ul> <li>4.2.1 Environment</li> <li>4.2.2 \u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf</li> <li>4.2.3 Team</li> <li>4.2.4 \u57fa\u4e8eTeam\u5f00\u53d1\u7684\u7b2c\u4e00\u4e2a\u667a\u80fd\u4f53\u56e2\u961f</li> </ul> <p>4.3 \u591a\u667a\u80fd\u4f53\u6848\u4f8b: \u8fa9\u8bba</p> <ul> <li>4.3.1 \u5b9a\u4e49\u52a8\u4f5c</li> <li>4.3.2 \u5b9a\u4e49\u89d2\u8272Role</li> <li>4.3.3 \u5b9e\u4f8b\u5316</li> </ul> <p>4.4 \u591a\u667a\u80fd\u4f53\u5f00\u53d1\u4f5c\u4e1a</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li> \u53d1\u5e03\u7b2c\u4e00\u7248\u5185\u5bb9\u5185\u6d4b</li> <li> \u53d1\u5e03\u7b2c\u4e00\u7248\u5185\u5bb9\u516c\u6d4b</li> <li> \u98de\u4e66\u5185\u5bb9\u8fc1\u79fb\u4ed3\u5e93</li> <li> \u66f4\u65b0\u591a\u667a\u80fd\u4f53\u5185\u5bb9</li> </ul>"},{"location":"#_3","title":"\u53c2\u4e0e\u8d21\u732e","text":"<ul> <li>\u5982\u679c\u4f60\u60f3\u53c2\u4e0e\u5230\u9879\u76ee\u4e2d\u6765\u6b22\u8fce\u67e5\u770b\u9879\u76ee\u7684 Issue \u67e5\u770b\u6ca1\u6709\u88ab\u5206\u914d\u7684\u4efb\u52a1\u3002</li> <li>\u5982\u679c\u4f60\u53d1\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u6b22\u8fce\u5728 Issue \u4e2d\u8fdb\u884c\u53cd\u9988\ud83d\udc1b\u3002</li> <li>\u5982\u679c\u4f60\u5bf9\u672c\u9879\u76ee\u611f\u5174\u8da3\u60f3\u8981\u53c2\u4e0e\u8fdb\u6765\u53ef\u4ee5\u901a\u8fc7 Discussion \u8fdb\u884c\u4ea4\u6d41\ud83d\udcac\u3002</li> </ul> <p>\u5982\u679c\u4f60\u5bf9 Datawhale \u5f88\u611f\u5174\u8da3\u5e76\u60f3\u8981\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\uff0c\u6b22\u8fce\u67e5\u770b Datawhale \u8d21\u732e\u6307\u5357\u3002</p>"},{"location":"#_4","title":"\u8d21\u732e\u8005\u540d\u5355","text":"\u59d3\u540d \u804c\u8d23 \u7b80\u4ecb \u6f58\u7b03\u9a7f \u9879\u76ee\u8d1f\u8d23\u4eba \u897f\u5b89\u7535\u5b50\u79d1\u6280\u5927\u5b66\u672c\u79d1\u5728\u8bfb \u9648\u53f6\u5e06 \u6838\u5fc3\u8d21\u732e\u8005 MetaGPT\u6210\u5458 \u6c88\u695a\u57ce \u6838\u5fc3\u8d21\u732e\u8005 MetaGPT\u6210\u5458 \u90d1\u8572 \u6838\u5fc3\u8d21\u732e\u8005 MetaGPT\u6210\u5458 \u674e\u67ef\u8fb0 \u8d21\u732e\u8005 Datawhale\u6210\u5458 \u4e01\u4e16\u5947 \u8d21\u732e\u8005 \u56de\u8f66 \u8d21\u732e\u8005"},{"location":"#_5","title":"\u5173\u6ce8\u6211\u4eec","text":"<p>\u626b\u63cf\u4e0b\u65b9\u4e8c\u7ef4\u7801\u5173\u6ce8\u516c\u4f17\u53f7\uff1aDatawhale</p> <p>\u626b\u63cf\u4e0b\u65b9\u4e8c\u7ef4\u7801\u5173\u6ce8\u516c\u4f17\u53f7\uff1aMetaGPT</p>"},{"location":"#license","title":"LICENSE","text":"<p>\u672c\u4f5c\u54c1\u91c7\u7528\u77e5\u8bc6\u5171\u4eab\u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 4.0 \u56fd\u9645\u8bb8\u53ef\u534f\u8bae\u8fdb\u884c\u8bb8\u53ef\u3002</p> <p>\u6ce8\uff1a\u9ed8\u8ba4\u4f7f\u7528CC 4.0\u534f\u8bae\uff0c\u4e5f\u53ef\u6839\u636e\u81ea\u8eab\u9879\u76ee\u60c5\u51b5\u9009\u7528\u5176\u4ed6\u534f\u8bae</p>"},{"location":"chapter0/","title":"Index","text":"<p>python \u534f\u7a0b asyncio</p>"},{"location":"chapter1/","title":"\u524d\u671f\u51c6\u5907","text":"<p>\u672c\u7ae0\u8282\u5185\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u83b7\u53d6MetaGPT  </p> <p>MetaGPT\u63d0\u4f9b\u4e86\u51e0\u79cd\u5b89\u88c5\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u9009\u62e9\u5b89\u88c5\u7684\u65b9\u5f0f  </p> <p>\u8bf7\u786e\u4fdd\u4f60\u7684\u7cfb\u7edf\u5df2\u5b89\u88c5Python 3.9+\u3002   linux \u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u6307\u4ee4\u68c0\u67e5 <pre><code>python3 --version\n</code></pre> Windows \u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u6307\u4ee4\u68c0\u67e5 <pre><code>python --version\n</code></pre></p>"},{"location":"chapter1/%E8%8E%B7%E5%8F%96MetaGPT/","title":"1. \u83b7\u53d6MetaGPT","text":"<ul> <li>\u4f7f\u7528pip\u83b7\u53d6MetaGPT  </li> </ul> <p>metagpt\u53ef\u4ee5\u76f4\u63a5\u7528 pip \u6765\u83b7\u53d6\u81f3\u672c\u5730\u73af\u5883\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u50cf\u4f7f\u7528\u4efb\u4f55python\u5305\u4e00\u6837\u5bfc\u5165MetaGPT \u901a\u8fc7\u5728\u7ec8\u7aef\u5185\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u83b7\u53d6\u7a33\u5b9a\u7248metagpt</p> <pre><code>pip install metagpt\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple metagpt==0.6.6\uff08\u63a8\u8350\uff09\n</code></pre> <p>\u901a\u8fc7\u5728\u7ec8\u7aef\u5185\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u83b7\u53d6\u6700\u65b0\u7248metagpt\u6765\u4f53\u9a8c\u6700\u65b0\u529f\u80fd</p> <pre><code>pip install git+https://github.com/geekan/MetaGPT\n</code></pre> <ul> <li>\u901a\u8fc7github\u4ed3\u5e93\u83b7\u53d6MetaGPT</li> </ul> <p>\u901a\u8fc7\u4ed3\u5e93\u76f4\u63a5\u62c9\u53d6MetaGPT\u7684\u597d\u5904\u662f\u4f60\u53ef\u4ee5\u66f4\u52a0\u7075\u6d3b\u7684\u4f7f\u7528MetaGPT\u6846\u67b6\uff0c\u6839\u636eMetaGPT\u63d0\u4f9b\u7684\u57fa\u7840\u7ec4\u4ef6\u6765\u505a\u51fa\u66f4\u7b26\u5408\u81ea\u5df1\u9700\u6c42\u7684Agent \u901a\u8fc7\u5728\u7ec8\u7aef\u5185\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u4eceMetaGPT\u4ed3\u5e93\u83b7\u53d6MetaGPT</p> <pre><code>git clone https://github.com/geekan/MetaGPT.git\ncd /your/path/to/MetaGPT\npip install -e .\n</code></pre> <p>\u83b7\u53d6MetaGPT\u7684\u5185\u5bb9\u5c31\u5230\u8fd9\u91cc\u4e3a\u6b62\uff0c\u4f46MetaGPT\u5b98\u65b9\u8fd8\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u83b7\u53d6\u65b9\u5f0f\uff0c\u5305\u62ec\u4f7f\u7528Docker\uff0c\u4ee5\u53ca\u83b7\u53d6\u53ef\u751f\u6210\u56fe\u8868\u7684\u66f4\u5b8c\u6574\u7684\u7248\u672c\uff0c\u66f4\u591a\u5185\u5bb9\u4f60\u90fd\u53ef\u4ee5\u5728MetaGPT\u7684\u5b98\u65b9\u6587\u6863\u4e2d\u83b7\u53d6</p> <p>MetaGPT\u5b98\u65b9\u6587\u6863</p>"},{"location":"chapter2/","title":"2.\u667a\u80fd\u4f53\u7efc\u8ff0\u53ca\u591a\u667a\u80fd\u4f53\u6846\u67b6\u4ecb\u7ecd","text":""},{"location":"chapter2/#_1","title":"\u524d\u671f\u51c6\u5907","text":"<p>\u672c\u7ae0\u8282\u5185\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecdAgent\u7684\u57fa\u672c\u6982\u5ff5\u4ee5\u53ca\u53d1\u5c55\u5386\u7a0b\uff0c\u5e2e\u52a9\u5927\u5bb6\u68b3\u7406\u77e5\u8bc6\u4f53\u7cfb\u7684\u540c\u65f6\u8ba9\u5927\u5bb6\u4e86\u89e3\u5230\uff0c\u6211\u4eec\u5c06\u5b66\u4e60/\u5b9e\u73b0\u7684\u57fa\u672c\u5185\u5bb9  </p>"},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","title":"2.1 &nbsp; AI Agent\u4f53\u7cfb\u4ecb\u7ecd","text":""},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#21-ai-agent","title":"2.1 AI Agent\u4f53\u7cfb\u4ecb\u7ecd","text":""},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#211-ai-agent","title":"2.1.1 \u4ec0\u4e48\u662fAI Agent\uff1a","text":"<p>Agent\uff08\u667a\u80fd\u4f53\uff09 = \u4e00\u4e2a\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u76ee\u6807\u6216\u4efb\u52a1\uff0c\u53ef\u4ee5\u8fed\u4ee3\u8fd0\u884c\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\u3002\u8fd9\u4e0e\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u5728\u50cfChatGPT\u8fd9\u6837\u7684\u5de5\u5177\u4e2d\u201c\u901a\u5e38\u201d\u7684\u4f7f\u7528\u65b9\u5f0f\u4e0d\u540c\u3002\u5728ChatGPT\u4e2d\uff0c\u4f60\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898\u5e76\u83b7\u5f97\u4e00\u4e2a\u7b54\u6848\u4f5c\u4e3a\u56de\u5e94\u3002\u800cAgent\u62e5\u6709\u590d\u6742\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u6a21\u578b\u672c\u8d28\u4e0a\u53ef\u4ee5\u81ea\u6211\u5bf9\u8bdd\uff0c\u800c\u65e0\u9700\u4eba\u7c7b\u9a71\u52a8\u6bcf\u4e00\u90e8\u5206\u7684\u4ea4\u4e92\u3002                                                             </p> <p>-Logan Kilpatrick, OpenAI \u5f00\u53d1\u8005\u5173\u7cfb\u8d1f\u8d23\u4eba</p> <p>ChatGPT\u63a5\u6536\u5355\u4e00\u67e5\u8be2\u7684\u8f93\u5165\u5e76\u8fd4\u56de\u8f93\u51fa\uff0c\u5b83\u4e00\u6b21\u4e0d\u80fd\u5b8c\u6210\u8d85\u8fc7\u4e00\u4e2a\u4efb\u52a1\u3002\u800cAI Agent\u5219\u53ef\u4ee5\u81ea\u9a71\u7684\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7a0b\u5e76\u89c4\u5212\u4efb\u52a1\u8fdb\u884c\u89e3\u51b3\u3002\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5929\u6c14\u63d2\u4ef6\uff0c\u5f53\u7528\u6237\u95ee\u201cNYC\uff08\u7ebd\u7ea6\u7f29\u5199\uff09\u7684\u6e29\u5ea6\u662f\u591a\u5c11\uff1f\u201d\uff0c\u6a21\u578b\u5c31\u4f1a\u77e5\u9053\u5b83\u65e0\u6cd5\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u67e5\u770b\u7528\u6237\u5b89\u88c5\u7684\u53ef\u7528\u63d2\u4ef6\u3002\u5047\u8bbe\u5b83\u53d1\u9001\u8bf7\u6c42\uff0cAPI\u8fd4\u56de\u4e86\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u8bf4\u201cNYC\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5730\u70b9\uff0c\u8bf7\u4f7f\u7528\u8be6\u7ec6\u7684\u57ce\u5e02\u540d\u79f0\uff0c\u4e0d\u8981\u4f7f\u7528\u7f29\u5199\u201d\uff0c\u6a21\u578b\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8bfb\u53d6\u8fd9\u4e2a\u9519\u8bef\u5e76\u53d1\u9001\u65b0\u7684\u8bf7\u6c42\u6765\u4fee\u590d\u5b83\u3002\u5728\u8fd9\u6b21\u4eba\u5de5\u667a\u80fd\u7684\u6d6a\u6f6e\u4e2dAI Agent\u7684\u706b\u82b1\u8bde\u751f\u4e8e GPT\u63d2\u4ef6\u5546\u57ce\u4ee5\u53caAutoGPT\u3002\u8fd9\u5206\u522b\u63d0\u5230Agent\u7684\u5de5\u5177\u8c03\u7528\u80fd\u529b\u548c\u89c4\u5212\u80fd\u529b\uff0c\u5728 LLM \u652f\u6301\u7684\u81ea\u4e3bAgent\u7cfb\u7edf\u4e2d\uff0cLLM \u5145\u5f53Agents\u7684\u5927\u8111\uff0c\u5e76\u8f85\u4ee5\u51e0\u4e2a\u5173\u952e\u7ec4\u6210\u90e8\u5206\uff1a</p> <p>\u2022 \u89c4\u5212</p> <p>\u200b   \uffee \u5b50\u76ee\u6807\u548c\u5206\u89e3\uff1aAgents\u5c06\u5927\u578b\u4efb\u52a1\u5206\u89e3\u4e3a\u66f4\u5c0f\u7684\u3001\u53ef\u7ba1\u7406\u7684\u5b50\u76ee\u6807\uff0c\u4ece\u800c\u80fd\u591f\u6709\u6548\u5904\u7406\u590d\u6742\u7684\u4efb\u52a1\u3002</p> <p>\u200b   \uffee \u53cd\u601d\u548c\u5b8c\u5584\uff1aAgents\u53ef\u4ee5\u5bf9\u8fc7\u53bb\u7684\u884c\u4e3a\u8fdb\u884c\u81ea\u6211\u6279\u8bc4\u548c\u81ea\u6211\u53cd\u601d\uff0c\u4ece\u9519\u8bef\u4e2d\u5438\u53d6\u6559\u8bad\uff0c\u5e76\u9488\u5bf9\u672a\u6765\u7684\u6b65\u9aa4\u8fdb\u884c\u5b8c\u5584\uff0c\u4ece\u800c\u63d0\u9ad8\u6700\u7ec8\u7ed3\u679c\u7684\u8d28\u91cf\u3002</p> <p>\u2022 \u8bb0\u5fc6</p> <p>\u200b   \uffee \u77ed\u671f\u8bb0\u5fc6\uff1a\u6211\u8ba4\u4e3a\u6240\u6709\u7684\u4e0a\u4e0b\u6587\u5b66\u4e60\uff08\u53c2\u89c1\u63d0\u793a\u5de5\u7a0b\uff09\u90fd\u662f\u5229\u7528\u6a21\u578b\u7684\u77ed\u671f\u8bb0\u5fc6\u6765\u5b66\u4e60\u3002</p> <p>\u200b   \uffee \u957f\u671f\u8bb0\u5fc6\uff1a\u8fd9\u4e3aAgents\u63d0\u4f9b\u4e86\u957f\u65f6\u95f4\u4fdd\u7559\u548c\u56de\u5fc6\uff08\u65e0\u9650\uff09\u4fe1\u606f\u7684\u80fd\u529b\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u5229\u7528\u5916\u90e8\u5411\u91cf\u5b58\u50a8\u548c\u5feb\u901f\u68c0\u7d22\u6765\u5b9e\u73b0\u3002</p> <p>\u2022 \u5de5\u5177\u4f7f\u7528</p> <p>\u200b   \uffee Agents\u5b66\u4e60\u8c03\u7528\u5916\u90e8 API \u6765\u83b7\u53d6\u6a21\u578b\u6743\u91cd\u4e2d\u7f3a\u5931\u7684\u989d\u5916\u4fe1\u606f\uff08\u901a\u5e38\u5728\u9884\u8bad\u7ec3\u540e\u5f88\u96be\u66f4\u6539\uff09\uff0c\u5305\u62ec\u5f53\u524d\u4fe1\u606f\u3001\u4ee3\u7801\u6267\u884c\u80fd\u529b\u3001\u5bf9\u4e13\u6709\u4fe1\u606f\u6e90\u7684\u8bbf\u95ee\u7b49\u3002</p> <p></p> <p>\u200b                        </p> <p>\u200b                         <p>\u56fe 1. LLM \u9a71\u52a8\u7684\u81ea\u4e3bAgents\u7cfb\u7edf\u6982\u8ff0\u53c2\u8003LLM Powered Autonomous AgentsLilian Weng\uff08OpenAI\u7814\u7a76\u4e3b\u7ba1\uff09</p></p> <p>\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u6211\u4eec\u5c06\u4e00\u4e00\u7528\u4ee3\u7801\u7528\u4f8b\u5b9e\u9645\u5e26\u5927\u5bb6\u4f53\u9a8c\u5982\u4f55\u5f00\u53d1Agent\uff0c\u6253\u901a\u89c4\u5212\uff0c\u8bb0\u5fc6\uff0c\u5de5\u5177\u8c03\u7528\u7b49\u80fd\u529b\u3002</p>"},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#212","title":"2.1.2 \u667a\u80fd\u4f53\u7528\u4f8b","text":""},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#agent-babyagi","title":"\u6982\u5ff5\u9a8c\u8bc1Agent-BabyAGI","text":"<p>Baby AGI \u662f\u4e00\u4e2a python \u811a\u672c\uff0c\u5b83\u4f7f\u7528 OpenAI \u548c Pinecone API \u4ee5\u53ca LangChain \u6846\u67b6\u6765\u521b\u5efa\u3001\u7ec4\u7ec7\u3001\u786e\u5b9a\u4f18\u5148\u7ea7\u4ee5\u53ca\u6267\u884c\u4efb\u52a1\u3002Baby AGI \u80cc\u540e\u7684\u8fc7\u7a0b\u662f\uff0c\u5b83\u5c06\u4f7f\u7528\u57fa\u4e8e\u4e0a\u4e00\u4e2a\u4efb\u52a1\u7ed3\u679c\u7684\u9884\u5b9a\u4e49\u76ee\u6807\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002</p> <p>\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528 OpenAI \u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406 \uff08NLP\uff09 \u529f\u80fd\u5b9e\u73b0\u7684\uff0c\u8be5\u529f\u80fd\u5141\u8bb8\u7cfb\u7edf\u6839\u636e\u76ee\u6807\u521b\u5efa\u65b0\u4efb\u52a1\u3002\u5b83\u4f7f\u7528 Pinecone \u6765\u5b58\u50a8\u8be5\u7279\u5b9a\u4efb\u52a1\u7684\u7ed3\u679c\u5e76\u68c0\u7d22\u4e0a\u4e0b\u6587\uff0c\u5e76\u4f7f\u7528 LangChain \u6846\u67b6\u6765\u5904\u7406\u51b3\u7b56\u8fc7\u7a0b\u3002</p> <p></p> <p>\u200b                                   <p>  \u6765\u81ea https://github.com/yoheinakajima/babyagi \u7684\u56fe\u7247</p>  \u8fd9\u4e2a\u8fc7\u7a0b\u5728\u4e3a\u667a\u80fd\u4f53\u521b\u5efa\u4e00\u4e2a\u76ee\u6807\u6216\u4e3b\u4efb\u52a1\u540e\uff0c\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u83b7\u53d6\u7b2c\u4e00\u4e2a\u672a\u5b8c\u6210\u7684\u4efb\u52a1</li> <li>\u4e30\u5bcc\u7ed3\u679c\u5e76\u5b58\u50a8\u5728\u5411\u91cf\u6570\u636e\u5e93\u4e2d\uff08\u5982\u679c\u4f60\u4e0d\u6e05\u695a\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u6ca1\u5173\u7cfb\uff09</li> <li>\u521b\u5efa\u65b0\u7684\u4efb\u52a1\u5e76\u91cd\u65b0\u8bbe\u7f6e\u4efb\u52a1\u5217\u8868\u7684\u4f18\u5148\u7ea7</li> </ol> <p>\u6839\u636e\u76ee\u6807\u5f00\u59cb\u4efb\u52a1\uff0c\u7136\u540e\u8f6c\u5230\u4ece\u5185\u5b58\u4e2d\u83b7\u53d6\u4e0a\u4e0b\u6587\u7684\u67e5\u8be2\u3002\u7136\u540e\u5c06\u5176\u53d1\u9001\u5230\u521b\u5efa\u4ee3\u7406\uff0c\u521b\u5efa\u4ee3\u7406\u83b7\u53d6\u6570\u636e\u5e76\u5c06\u5176\u53d1\u9001\u5230\u5185\u5b58\u3002\u7136\u540e\uff0c\u5b83\u5c06\u901a\u8fc7\u4e00\u4e2a\u961f\u5217\uff0c\u8be5\u961f\u5217\u5c06\u5b8c\u6210\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u6392\u5e8f\u3002</p> <p>\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u4efb\u52a1\u5f00\u59cb\uff0c\u4f8b\u5982\"\u7f16\u5199\u4e00\u7bc7\u5173\u4e8eChatGPT\u4ee5\u53ca\u529f\u80fd\u76841500\u5b57\u535a\u5ba2\u6587\u7ae0\"\u3002\u4f5c\u4e3a\u63a7\u5236agent\u7684\u7528\u6237\uff0c\u4f60\u53ef\u4ee5\u5199\u51fa\u8fd9\u4e2a\u76ee\u6807\uff0c\u5c3d\u53ef\u80fd\u8be6\u7ec6\u5730\u63d0\u4f9b\u8981\u6c42\uff0c\u7136\u540e\u4f60\u5c31\u5b8c\u6210\u4e86\u3002</p> <p>\u6a21\u578b\u63a5\u6536\u8fd9\u4e9b\u8981\u6c42\uff0c\u5e76\u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a</p> <pre><code>sub_tasks = openai.ChatCompletion.create(\n  model=\"gpt-4\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are an world class assistant designed to help people accomplishh tasks\"},\n    {\"role\": \"user\", \"content\": \"Create a 1500 word blog post on ChatGPT and what it can do\"},\n    {\"role\": \"user\", \"content\": \"Take the users request above and break it down into simple sub-tasks which can be easily done.\"}\n  ]\n)\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528OpenAI API\u6765\u9a71\u52a8agent\u3002\u7cfb\u7edf\u6d88\u606f\u5141\u8bb8\u4f60\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5b9a\u4e49\u4f60\u7684agent\uff0c\u4f46\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u771f\u6b63\u4f7f\u7528\u5b83\u3002\u7136\u540e\uff0c\u6211\u4eec\u6dfb\u52a0\u7528\u6237\u67e5\u8be2\u548c\u5173\u952e\u7684\u4e0b\u4e00\u6b65\uff0c\u5373\u5728\u5176\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u4efb\u52a1\uff0c\u8be5\u4efb\u52a1\u662f\u5c06\u67e5\u8be2\u5206\u89e3\u6210\u5b50\u4efb\u52a1\u3002</p> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b50\u4efb\u52a1\u653e\u5165\u4e00\u4e2a\u5faa\u73af\u4e2d\uff0c\u5e76\u8fdb\u884c\u989d\u5916\u7684\u8c03\u7528\u4ee5\u6267\u884c\u8fd9\u4e9b\u5b50\u4efb\u52a1\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5e26\u6709\u4e0d\u540c\u7684\u7cfb\u7edf\u6d88\u606f\uff08\u60f3\u60f3\u4e0d\u540c\u7684agents\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5199\u4f5cagent\uff0c\u4e00\u4e2a\u7814\u7a76agent\u7b49\uff09\u3002\u4f60\u53ef\u80fd\u4f1a\u60f3\u8981\u201c\u5c06\u8fd9\u4e2a\u4efb\u52a1\u5206\u89e3\u6210\u66f4\u7b80\u5355\u7684\u5b50\u4efb\u52a1\uff0c\u76f4\u5230\u4f60100%\u6e05\u695a\u9700\u8981\u505a\u4ec0\u4e48\u5e76\u4e14\u53ef\u4ee5\u9ad8\u7cbe\u5ea6\u5730\u6267\u884c\u4efb\u52a1\u201d\uff0c\u8fd9\u6837\u6a21\u578b\u5c31\u4e0d\u4f1a\u9677\u5165\u6dfb\u52a0\u66f4\u591a\u4efb\u52a1\u7684\u65e0\u9650\u5faa\u73af\u4e2d\uff08\u5982\u679c\u4f60\u6ca1\u6709\u6b63\u786e\u5730\u8fdb\u884c\u63d0\u793a\u5de5\u7a0b\uff0c\u4eca\u5929\u7684agents\u5c31\u4f1a\u5e38\u5e38\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\uff09\u3002</p>"},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#agents","title":"\u751f\u6210Agents\u6a21\u62df","text":"<p>Generative Agents\uff08Park \u7b49\u4eba\uff0c2023\uff09\u662f\u4e00\u4e2a\u8d85\u7ea7\u6709\u8da3\u7684\u5b9e\u9a8c\uff0c\u5176\u4e2d 25 \u4e2a\u865a\u62df\u89d2\u8272\uff0c\u6bcf\u4e2a\u89d2\u8272\u90fd\u7531 LLM \u652f\u6301\u7684Agents\u63a7\u5236\uff0c\u5728\u6c99\u76d2\u73af\u5883\u4e2d\u751f\u6d3b\u548c\u4ea4\u4e92\uff0c\u5176\u7075\u611f\u6765\u81ea\u300a\u6a21\u62df\u4eba\u751f\u300b\u3002\u751f\u6210Agents\u4e3a\u4ea4\u4e92\u5f0f\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u53ef\u4fe1\u7684\u4eba\u7c7b\u884c\u4e3a\u6a21\u62df\u3002</p> <p>\u751f\u6210Agents\u7684\u8bbe\u8ba1\u5c06 LLM \u4e0e\u8bb0\u5fc6\u3001\u89c4\u5212\u548c\u53cd\u5c04\u673a\u5236\u76f8\u7ed3\u5408\uff0c\u4f7fAgents\u80fd\u591f\u6839\u636e\u8fc7\u53bb\u7684\u7ecf\u9a8c\u8fdb\u884c\u884c\u4e3a\uff0c\u5e76\u4e0e\u5176\u4ed6Agents\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p>\u2022 \u8bb0\u5fc6\u6d41\uff1a \u662f\u4e00\u4e2a\u957f\u671f\u8bb0\u5fc6\u6a21\u5757\uff08\u5916\u90e8\u6570\u636e\u5e93\uff09\uff0c\u7528\u81ea\u7136\u8bed\u8a00\u8bb0\u5f55\u667a\u80fd\u4f53\u7ecf\u9a8c\u7684\u5b8c\u6574\u5217\u8868\u3002</p> <p>\u200b   \uffee \u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u89c2\u5bdf\u7ed3\u679c\uff0c\u662f\u7531 Agent \u76f4\u63a5\u63d0\u4f9b\u7684\u4e8b\u4ef6\u3002\u4ee3\u7406\u4eba\u4e4b\u95f4\u7684\u4ea4\u6d41\u53ef\u4ee5\u5f15\u53d1\u65b0\u7684\u81ea\u7136\u8bed\u8a00\u9648\u8ff0\u3002</p> <p>\u2022 \u68c0\u7d22\u6a21\u578b\uff1a \u6839\u636e\u76f8\u5173\u6027\u3001\u65b0\u8fd1\u5ea6\u548c\u91cd\u8981\u6027\uff0c\u5448\u73b0\u4e0a\u4e0b\u6587\u4ee5\u544a\u77e5Agents\u7684\u884c\u4e3a\u3002</p> <p>\u200b   \uffee \u65b0\u8fd1\u5ea6\uff1a\u6700\u8fd1\u53d1\u751f\u7684\u4e8b\u4ef6\u5f97\u5206\u8f83\u9ad8</p> <p>\u200b   \uffee \u91cd\u8981\u6027\uff1a\u533a\u5206\u5e73\u51e1\u8bb0\u5fc6\u548c\u6838\u5fc3\u8bb0\u5fc6\u3002\u76f4\u63a5\u95eeLM\u3002</p> <p>\u200b   \uffee \u76f8\u5173\u6027\uff1a\u57fa\u4e8e\u5b83\u4e0e\u5f53\u524d\u60c5\u51b5/\u67e5\u8be2\u7684\u76f8\u5173\u7a0b\u5ea6\u3002</p> <p>\u2022 \u53cd\u5c04\u673a\u5236\uff1a \u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u5c06\u8bb0\u5fc6\u5408\u6210\u66f4\u9ad8\u5c42\u6b21\u7684\u63a8\u8bba\uff0c\u5e76\u6307\u5bfc\u667a\u80fd\u4f53\u672a\u6765\u7684\u884c\u4e3a\u3002\u5b83\u4eec\u662f*\u5bf9\u8fc7\u53bb\u4e8b\u4ef6\u7684\u66f4\u9ad8\u5c42\u6b21\u7684\u603b\u7ed3\uff08&lt;-\u6ce8\u610f\uff0c\u8fd9\u4e0e\u4e0a\u9762\u7684*\u81ea\u6211\u53cd\u601d\u6709\u70b9\u4e0d\u540c\uff09</p> <p>\u200b   \uffee \u63d0\u793a LM \u63d0\u4f9b 100 \u4e2a\u6700\u65b0\u89c2\u5bdf\u7ed3\u679c\uff0c\u5e76\u6839\u636e\u8fd9\u4e9b\u89c2\u6d4b/\u9648\u8ff0\u751f\u62103\u4e2a\u6700\u91cd\u8981\u7684\u9ad8\u5c42\u6b21\u95ee\u9898\u3002\u7136\u540e\u8ba9LM\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\u3002</p> <p>\u2022 \u89c4\u5212\u4e0e\u53cd\u5e94\uff1a\u5c06\u53cd\u601d\u548c\u73af\u5883\u4fe1\u606f\u8f6c\u5316\u4e3a\u884c\u52a8</p> <p>\u200b   \uffee \u89c4\u5212\u672c\u8d28\u4e0a\u662f\u4e3a\u4e86\u4f18\u5316\u5f53\u524d\u4e0e\u65f6\u95f4\u7684\u53ef\u4fe1\u5ea6\u3002</p> <p>\u200b   \uffee \u63d0\u793a\u6a21\u677f\uff1a</p> <p>\u200b     {Intro of an agent X}. Here is X's plan today in broad strokes: 1)</p> <p>\u200b   \uffee \u89c4\u5212\u548c\u53cd\u5e94\u65f6\u90fd\u4f1a\u8003\u8651\u4e3b\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u4ee5\u53ca\u4e00\u4e2a\u4e3b\u4f53\u5bf9\u53e6\u4e00\u4e2a\u4e3b\u4f53\u7684\u89c2\u5bdf\u3002\u73af\u5883\u4fe1\u606f\u4ee5\u6811\u5f62\u7ed3\u6784\u5448\u73b0\u3002</p> <p></p> <p> \u56fe 13. \u751f\u6210Agents\u67b6\u6784\u3002\uff08\u56fe\u7247\u6765\u6e90\uff1a[Park \u7b49\u4eba\uff0c2023](https://arxiv.org/abs/2304.03442)\uff09</p> <p>\u200b                                                       </p> <p>\u8fd9\u79cd\u6709\u8da3\u7684\u6a21\u62df\u4f1a\u4ea7\u751f\u65b0\u5174\u7684\u793e\u4ea4\u884c\u4e3a\uff0c\u4f8b\u5982\u4fe1\u606f\u4f20\u64ad\u3001\u5173\u7cfb\u8bb0\u5fc6\uff08\u4f8b\u5982\uff0c\u4e24\u4e2aAgents\u7ee7\u7eed\u8ba8\u8bba\u8bdd\u9898\uff09\u548c\u793e\u4ea4\u6d3b\u52a8\u7684\u534f\u8c03\uff08\u4f8b\u5982\u4e3e\u529e\u805a\u4f1a\u5e76\u9080\u8bf7\u8bb8\u591a\u5176\u4ed6\u4eba\uff09\u3002</p>"},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#moe-","title":"\u5e94\u7528\u5c42\u7684Moe-\u591a\u4eba\u6c42\u89e3","text":"<p>\u5fae\u8f6f\u4e9a\u6d32\u7814\u7a76\u9662\u3001\u5317\u5927\u3001\u5317\u822a\u7b49\u673a\u6784\u7684\u7814\u7a76\u4eba\u5458\uff0c\u901a\u8fc797\u4e2a\u56de\u5408\u7684\u300c\u82cf\u683c\u62c9\u5e95\u5f0f\u300d\u4e25\u683c\u63a8\u7406\uff0c\u6210\u529f\u8ba9GPT-4\u5f97\u51fa\u4e86\u300cP\u2260NP\u300d\u7684\u7ed3\u8bba\uff01</p> <p></p> <p>\u200b                                                                            <p>\u8bba\u6587\u5730\u5740\uff1ahttps://arxiv.org/abs/2309.05689</p> </p> <p>1971\u5e74\uff0c\u6570\u5b66\u5bb6Stephen A. Cook\u548cLeonid Levin\u76f8\u5bf9\u72ec\u7acb\u5730\u63d0\u51fa\u8fd9\u4e2a\u95ee\u9898\uff1a\u4e24\u4e2a\u590d\u6742\u5ea6\u7c7bP\u548cNP\u662f\u5426\u662f\u6052\u7b49\u7684\uff1f</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u4e00\u4e9b\u6c38\u8fdc\u65e0\u6cd5\u901a\u8fc7\u7b80\u5355\u8ba1\u7b97\u5f97\u5230\u7b54\u6848\u7684\u95ee\u9898\uff0c\u5c31\u5c5e\u4e8eP/NP\u95ee\u9898\u3002</p> <p>\u4e00\u4e2a\u590d\u6742\u95ee\u9898\u5982\u679c\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\uff0c\u5c31\u88ab\u79f0\u4e3aP\u95ee\u9898\uff0c\u610f\u5473\u7740\u8ba1\u7b97\u673a\u5f88\u5bb9\u6613\u5c06\u5b83\u6c42\u89e3\u3002</p> <p>\u90a3NP\u95ee\u9898\u5c31\u662f\u9664\u4e86P\u95ee\u9898\u4e4b\u5916\u7684\u95ee\u9898\u5417\uff1f\u672a\u5fc5\u3002\u6211\u4eec\u5e76\u4e0d\u80fd\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\uff0c\u4e5f\u65e0\u6cd5\u8bc1\u660e\u5b83\u4e0d\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u3002</p> <p>97\u8f6e\u5bf9\u8bdd\uff0c\u7ed9\u51faP\u2260NP\u7ed3\u8bba</p> <p>\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c\u7814\u7a76\u8005GPT-4\u5b66\u4f1a\u4e86\u4e00\u79cd\u300c\u82cf\u683c\u62c9\u5e95\u5f0f\u63a8\u7406\u300d\u3002</p> <p>\u4ed6\u4eec\u5f15\u5165\u4e86**\u4e94\u4e2a\u4e0d\u540c\u7684\u89d2\u8272\uff08\u6bd4\u5982\u7cbe\u901a\u6982\u7387\u8bba\u7684\u6570\u5b66\u5bb6\uff09\uff0c\u4f5c\u4e3a\u534f\u52a9\u8bc1\u660e\u8005\uff0c\u6839\u636e\u81ea\u5df1\u64c5\u957f\u8bc1\u660e\u4e0d\u540c\u7684\u90e8\u5206\u3002**</p> <p></p> <p>\u7b80\u5355\u8bb2\uff0c\u82cf\u683c\u62c9\u5e95\u65b9\u6cd5\u5c31\u662f\u8ba9\u6211\u4eec\u300c\u4e00\u6b65\u4e00\u6b65\u601d\u8003\u300d\uff0c\u63d0\u51fa\u4e00\u7cfb\u5217\u95ee\u9898\u6fc0\u53d1\u6279\u5224\u6027\u601d\u7ef4\u3002</p> <p>\u8fd9\u5bf9\u4e8e\u5927\u6a21\u578b\u6765\u8bf4\uff0c\u5982\u679c\u80fd\u591f\u8fdb\u884c\u6279\u5224\u6027\u601d\u8003\uff0c\u5c31\u53ef\u4ee5\u9488\u5bf9\u590d\u6742\u95ee\u9898\u63d0\u51fa\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5bf9\u6b64\uff0c\u7814\u7a76\u56e2\u961f\u6307\u51fa\u8fd9\u4e00\u6846\u67b6\u65e8\u5728\u63a8\u52a8LLM\u89e3\u51b3\u9ad8\u5ea6\u590d\u6742\u4efb\u52a1\uff0c\u534f\u8c03\u5404\u79cd\u5b50\u95ee\u9898\uff0c\u5e76\u5f15\u5bfc\u5176\u642d\u5efa\u9ad8\u5c42\u6b21\u63a8\u7406\u9014\u5f84\u3002</p> <p>\u300c\u82cf\u683c\u62c9\u5e95\u5f0f\u63a8\u7406\u300d\u662f\u5728\u4eba\u7c7b\u4e0eLLM\u4e4b\u95f4\u7684\u4e00\u7cfb\u5217\u5bf9\u8bdd\u56de\u5408\u4e2d\u8fdb\u884c\u7684\uff0c\u662f\u4e0eLLM\u4e00\u8d77\u89e3\u51b3\u590d\u6742\u6311\u6218\u7684\u9012\u5f52\u673a\u5236\u3002</p> <p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u300c\u82cf\u683c\u62c9\u5e95\u5f0f\u63a8\u7406\u300d\u67095\u79cd\u5f3a\u5927\u7684\u63d0\u793a\u6a21\u5f0f\uff1a\u6f14\u7ece\u3001\u8f6c\u6362\u3001\u5206\u89e3\u3001\u9a8c\u8bc1\u3001\u6574\u5408\u3002</p> <p>\u901a\u8fc7\u53d1\u6398\u65b0\u7684\u89c1\u89e3\u548c\u89c2\u70b9\uff0c\u5c06\u590d\u6742\u95ee\u9898\u5206\u89e3\u4e3a\u5b50\u95ee\u9898\u6216\u6b65\u9aa4\uff0c\u5e76\u901a\u8fc7\u8d28\u7591\u56de\u7b54\u8fdb\u884c\u81ea\u6211\u5b8c\u5584\u3002</p> <p></p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5904\u7406\u53ef\u4ee5\u76f4\u63a5\u4ece\u63a8\u7406\u4e2d\u5f97\u51fa\u7ed3\u8bba\u7684\u95ee\u9898\u65f6\uff0c\u4f1a\u91c7\u7528\u300c\u6f14\u7ece\u6a21\u5f0f\u300d\uff08\u5982 \u300c\u8ba9\u6211\u4eec\u4e00\u6b65\u6b65\u601d\u8003\u300d\uff09\u6765\u6307\u5bfcLLM\u76f4\u63a5\u5f97\u51fa\u7ed3\u8bba\u3002</p> <p>\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u95ee\u9898\uff0c\u9996\u5148\u8981\u6c42LLM\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u65b0\u95ee\u9898\uff0c\u6216\u5206\u89e3\u4e3a\u82e5\u5e72\u5b50\u95ee\u9898\u3002\u7136\u540e\uff0c\u901a\u8fc7\u9012\u5f52\u65b9\u6cd5\uff0c\u76f4\u5230\u627e\u5230\u300c\u539f\u5b50\u95ee\u9898\u300d\u3002</p> <p></p> <p>\u200b                                                                            <p>P vs. NP\u95ee\u9898\u5bf9\u8bdd\u8f6c\u6362\u793a\u4f8b</p> </p> <p>\u5728\u751f\u6210\u65b0\u95ee\u9898\u6216\u5f97\u51fa\u65b0\u7ed3\u8bba\u65f6\uff0c\u901a\u8fc7\u300c\u9a8c\u8bc1\u6a21\u5f0f\u300d\uff0c\u5229\u7528LLM\u81ea\u6211\u6279\u5224\u80fd\u529b\u8fdb\u884c\u9a8c\u8bc1\u548c\u5b8c\u5584\u3002</p> <p>\u6700\u540e\uff0c\u300c\u6574\u5408\u6a21\u5f0f\u300d\u8981\u6c42 LLM \u57fa\u4e8e\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u5408\u6210\u7ed3\u8bba\u3002</p> <p>\u6574\u4e2a\u6d41\u7a0b\uff0c\u7814\u7a76\u4eba\u5458\u9f13\u52b1LLM\u901a\u8fc7\u4e00\u7cfb\u5217\u5bf9\u8bdd\uff0c\u9012\u5f52\u5730\u7ee7\u7eed\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u81f3\u89e3\u51b3\u76ee\u6807\u95ee\u9898\u3002</p>"},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#213-sy1sy2agent","title":"2.1.3 Sy1&amp;Sy2\u7ed9Agent\u7684\u542f\u53d1","text":"<p>\u7b2c\u4e00\u4ef6\u4e8b\u662f\u5173\u4e8e\u7cfb\u7edf 1 \u4e0e\u7cfb\u7edf 2 \u7c7b\u578b\u601d\u7ef4\u7684\u6982\u5ff5\uff0c\u8fd9\u4e2a\u6982\u5ff5\u662f\u7531\u300a\u601d\u8003\uff0c\u5feb\u4e0e\u6162\u300b\u8fd9\u672c\u4e66\u6240\u666e\u53ca\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u533a\u522b\u662f\u4ec0\u4e48\uff1f\u8fd9\u4e2a\u60f3\u6cd5\u662f\u4f60\u7684\u5927\u8111\u53ef\u4ee5\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\u8fd0\u884c\u3002\u7cfb\u7edf 1 \u601d\u7ef4\u662f\u4f60\u7684\u5927\u8111\u7684\u5feb\u901f\u3001\u672c\u80fd\u548c\u81ea\u52a8\u5316\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u4f8b\u5982\uff0c\u5982\u679c\u6211\u95ee\u4f60 2+2 \u7b49\u4e8e\u591a\u5c11\uff0c\u4f60\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u505a\u6570\u5b66\u8ba1\u7b97\u3002</p> <p></p> <p>\u4f60\u53ea\u662f\u544a\u8bc9\u6211\u5b83\u7b49\u4e8e\u56db\uff0c\u56e0\u4e3a\u8fd9\u662f\u53ef\u7528\u7684\uff0c\u5df2\u7ecf\u5b58\u5728\u4e8e\u4f60\u7684\u5927\u8111\u4e2d\uff0c\u662f\u672c\u80fd\u7684\u3002\u4f46\u662f\u5f53\u6211\u544a\u8bc9\u4f60 17*24 \u7b49\u4e8e\u591a\u5c11\u65f6\uff0c\u4f60\u5e76\u6ca1\u6709\u51c6\u5907\u597d\u8fd9\u4e2a\u7b54\u6848\uff0c\u6240\u4ee5\u4f60\u4f1a\u542f\u52a8\u4f60\u7684\u5927\u8111\u7684\u53e6\u4e00\u90e8\u5206\uff0c\u8fd9\u90e8\u5206\u66f4\u52a0\u7406\u6027\uff0c\u66f4\u52a0\u7f13\u6162\uff0c\u8fdb\u884c\u590d\u6742\u7684\u51b3\u7b56\uff0c\u611f\u89c9\u66f4\u6709\u610f\u8bc6\u3002\u4f60\u4e0d\u5f97\u4e0d\u5728\u8111\u6d77\u4e2d\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u7136\u540e\u7ed9\u51fa\u7b54\u6848\u3002</p> <p>\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\uff0c\u5982\u679c\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u53ef\u80fd\u4e0b\u8c61\u68cb\uff0c\u5f53\u4f60\u8fdb\u884c\u5feb\u901f\u8c61\u68cb\u6bd4\u8d5b\u65f6\uff0c\u4f60\u6ca1\u6709\u65f6\u95f4\u601d\u8003\uff0c\u6240\u4ee5\u4f60\u53ea\u662f\u6839\u636e\u76f4\u89c9\u79fb\u52a8\u68cb\u5b50\u3002\u8fd9\u65f6\u5927\u90e8\u5206\u7531\u4f60\u7684\u7cfb\u7edf 1 \u6765\u5904\u7406\u3002\u4f46\u5982\u679c\u4f60\u5728\u6bd4\u8d5b\u4e2d\uff0c\u6709\u66f4\u591a\u65f6\u95f4\u6765\u601d\u8003\uff0c\u90a3\u4e48\u4f60\u4f1a\u66f4\u591a\u5730\u53c2\u4e0e\u5230\u51b3\u7b56\u4e2d\uff0c\u4f60\u4f1a\u611f\u5230\u81ea\u5df1\u5728\u5efa\u7acb\u53ef\u80fd\u6027\u7684\u6811\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u6709\u610f\u8bc6\u3001\u66f4\u8d39\u529b\u7684\u8fc7\u7a0b\u3002\u4f60\u5fc5\u987b\u5728\u8111\u6d77\u4e2d\u89e3\u51b3\u95ee\u9898\u5e76\u7ed9\u51fa\u7b54\u6848\u3002</p> <p>\u73b0\u5728\u4e8b\u5b9e\u8bc1\u660e\uff0c LLM \u76ee\u524d\u53ea\u6709\u7cfb\u7edf 1\u3002\u5b83\u4eec\u53ea\u6709\u8fd9\u4e2a\u672c\u80fd\u90e8\u5206\u3002\u5b83\u4eec\u4e0d\u80fd\u601d\u8003\u5e76\u63a8\u7406\u51fa\u5404\u79cd\u53ef\u80fd\u6027\u3002\u5b83\u4eec\u53ea\u662f\u6309\u987a\u5e8f\u8f93\u5165\u5355\u8bcd\uff0c\u5e76\u4e14\u57fa\u672c\u4e0a\u8fd9\u4e9b\u8bed\u8a00\u6a21\u578b\u6709\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e0b\u4e00\u4e2a\u5355\u8bcd\uff0c\u6240\u4ee5\u5b83\u5c31\u50cf\u53f3\u8fb9\u7684\u6f2b\u753b\u4e00\u6837\uff0c\u4f60\u53ea\u662f\u5728\u8ddf\u8e2a\u8f68\u8ff9\uff0c\u8fd9\u4e9b\u8bed\u8a00\u6a21\u578b\u57fa\u672c\u4e0a\u53ea\u662f\u4e0d\u65ad\u53d1\u51fa\u58f0\u97f3\uff0c\u8fd9\u5c31\u662f\u5b83\u4eec\u6309\u7167\u5e8f\u5217\u91c7\u6837\u5355\u8bcd\u7684\u65b9\u5f0f\u3002\u6bcf\u4e2a\u8fd9\u6837\u7684\u5757\u5927\u81f4\u9700\u8981\u76f8\u540c\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u8fd9\u57fa\u672c\u4e0a\u662f LLM \u5728\u7cfb\u7edf 1 \u8bbe\u7f6e\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u6240\u4ee5\u5f88\u591a\u4eba\u8ba4\u4e3a\uff0c\u8d4b\u4e88 LLM \u7cfb\u7edf 2 \u7684\u80fd\u529b\u4f1a\u7ed9\u4eba\u4eec\u5e26\u6765\u7075\u6d3b\u7684\u65f6\u95f4\uff0c\u8ba9\u5b83\u4eec\u66f4\u6df1\u5165\u5730\u601d\u8003\u95ee\u9898\uff0c\u53cd\u601d\u548c\u91cd\u65b0\u8868\u8ff0\uff0c\u7136\u540e\u4ee5\u66f4\u6709\u4fe1\u5fc3\u7684\u7b54\u6848\u56de\u6765\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u60f3\u8c61\u5c06\u65f6\u95f4\u8868\u793a\u4e3a x \u8f74\uff0c\u67d0\u79cd\u54cd\u5e94\u7684\u51c6\u786e\u5ea6\u8868\u793a\u4e3a y \u8f74\uff0c\u5f53\u4f60\u7ed8\u5236\u5b83\u65f6\uff0c\u4f60\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u51fd\u6570\u3002</p> <p></p> <p>\u4eca\u5929\u8fd9\u5e76\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u5f88\u591a\u4eba\u90fd\u5728\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5b9e\u9645\u4e0a\u521b\u5efa\u4e00\u79cd\u601d\u8003\u7684\u6811\u72b6\u7ed3\u6784\uff0c\u601d\u8003\u95ee\u9898\uff0c\u5e76\u53cd\u601d\u548c\u91cd\u65b0\u8868\u8ff0\uff0c\u7136\u540e\u56de\u7b54\u65f6\u6a21\u578b\u4f1a\u66f4\u6709\u4fe1\u5fc3\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u60f3\u8c61\u5c06\u65f6\u95f4\u8868\u793a\u4e3a x \u8f74\uff0c\u67d0\u79cd\u54cd\u5e94\u7684\u51c6\u786e\u5ea6\u8868\u793a\u4e3a y \u8f74\uff0c\u5f53\u4f60\u7ed8\u5236\u5b83\u65f6\uff0c\u4f60\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u51fd\u6570\u3002\u4eca\u5929\u8fd9\u5e76\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u5f88\u591a\u4eba\u90fd\u5728\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"chapter2/AIAgent%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#214","title":"2.1.4 \u66f4\u591a\u4ed3\u5e93\u4ee5\u53ca\u4ea7\u54c1\uff1a","text":"<p>https://github.com/e2b-dev/awesome-ai-agents</p> <p></p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/","title":"2.2 &nbsp; \u591a\u667a\u80fd\u4f53\u6846\u67b6\u4ecb\u7ecd","text":""},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#22","title":"2.2 \u591a\u667a\u80fd\u4f53\u6846\u67b6\u4ecb\u7ecd","text":""},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#221-metagpt","title":"2.2.1 \u4ec0\u4e48\u662fMetaGPT","text":"<p>MetaGPT\u662f\u4e00\u4e2a\u591a\u667a\u80fd\u4f53\u534f\u4f5c\u6846\u67b6\uff0c\u5c06\u6807\u51c6\u5316\u64cd\u4f5c\uff08SOP\uff09 \u7a0b\u5e8f\u7f16\u7801\u4e3a\u63d0\u793a\u786e\u4fdd\u89e3\u51b3\u95ee\u9898\u65f6\u91c7\u7528\u7ed3\u6784\u5316\u65b9\u6cd5\u3002\u8981\u6c42\u667a\u80fd\u4f53\u4ee5\u4e13\u5bb6\u5f62\u5f0f\u53c2\u4e0e\u534f\u4f5c\uff0c\u5e76\u6309\u8981\u6c42\u751f\u6210\u7ed3\u6784\u5316\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9ad8\u8d28\u91cf\u7684\u9700\u6c42\u6587\u6863\u3001\u67b6\u6784\u8bbe\u8ba1\u56fe\u548c\u6d41\u7a0b\u56fe\u7b49\u3002\u7ed3\u6784\u5316\u7684\u8f93\u51fa\u5bf9\u4e8e\u5355\u4e2a\u667a\u80fd\u4f53\u5373\u662f\u66f4\u9ad8\u5c42\u6b21\u7684\u601d\u7ef4\u94fe\uff08Chain-of-Thought\uff09\uff0c\u5bf9\u4e8e\u4e0b\u6e38\u89d2\u8272\u5219\u662f\u8bed\u4e49\u6e05\u6670\u3001\u76ee\u6807\u660e\u786e\u7684\u4e0a\u4e0b\u6587\uff08Context\uff09\u3002\u901a\u8fc7\u660e\u786e\u5b9a\u4e49\u7684\u89d2\u8272\u5206\u5de5\uff0c\u590d\u6742\u7684\u5de5\u4f5c\u5f97\u4ee5\u5206\u89e3\u4e3a\u66f4\u5c0f\u3001\u66f4\u5177\u4f53\u7684\u4efb\u52a1\u3002\u4ece\u800c\u63d0\u5347\u4e86LLMs\u7684\u8f93\u51fa\u8d28\u91cf\u3002</p> <p>\u4e3b\u8981\u7279\u70b9\uff1a</p> <p>\u2022 \u7a33\u5b9a\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u501f\u52a9SOP\uff0c\u4e0e\u5176\u4ed6 Agents \u76f8\u6bd4\uff0cMetaGPT \u5df2\u88ab\u8bc1\u660e\u53ef\u4ee5\u751f\u6210\u66f4\u4e00\u81f4\u548c\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u2022 \u591a\u6837\u5316\u7684\u89d2\u8272\u5206\u914d\uff1a\u4e3aLLM\u5206\u914d\u4e0d\u540c\u89d2\u8272\u7684\u80fd\u529b\u786e\u4fdd\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u5168\u9762\u6027\u3002</p> <pre><code>\u5728MetaGPT\u4e2d\u591a\u667a\u80fd\u4f53 = \u667a\u80fd\u4f53+\u73af\u5883+SOP+\u8bc4\u5ba1+\u8def\u7531+\u8ba2\u9605+\u7ecf\u6d4e\n</code></pre> <p>\u2022 \u667a\u80fd\u4f53\uff1a\u5728\u5355\u4e2a\u667a\u80fd\u4f53\u7684\u57fa\u7840\u4e0a\uff0c\u6269\u5c55\u4e86\u591a\u667a\u80fd\u4f53\u5b9a\u4e49\u3002\u5728\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u7531\u591a\u4e2a\u5355\u667a\u80fd\u4f53\u534f\u540c\u5de5\u4f5c\uff0c\u6bcf\u4e2a\u667a\u80fd\u4f53\u90fd\u5177\u5907\u72ec\u7279\u6709\u7684LLM\u3001\u89c2\u5bdf\u3001\u601d\u8003\u3001\u884c\u52a8\u548c\u8bb0\u5fc6\u3002</p> <p>\u2022 \u73af\u5883\uff1a\u73af\u5883\u662f\u667a\u80fd\u4f53\u751f\u5b58\u548c\u4e92\u52a8\u7684\u516c\u5171\u573a\u6240\u3002\u667a\u80fd\u4f53\u4ece\u73af\u5883\u4e2d\u89c2\u5bdf\u5230\u91cd\u8981\u4fe1\u606f\uff0c\u5e76\u53d1\u5e03\u884c\u52a8\u7684\u8f93\u51fa\u7ed3\u679c\u4ee5\u4f9b\u5176\u4ed6\u667a\u80fd\u4f53\u4f7f\u7528\u3002</p> <p>\u2022 \u6807\u51c6\u6d41\u7a0b\uff08SOP\uff09\uff1a\u8fd9\u4e9b\u662f\u7ba1\u7406\u667a\u80fd\u4f53\u884c\u52a8\u548c\u4ea4\u4e92\u7684\u65e2\u5b9a\u7a0b\u5e8f\uff0c\u786e\u4fdd\u7cfb\u7edf\u5185\u90e8\u7684\u6709\u5e8f\u548c\u9ad8\u6548\u8fd0\u4f5c\u3002</p> <p>\u2022 \u8bc4\u5ba1\uff1a \u8bc4\u5ba1\u662f\u4e3a\u4e86\u89e3\u51b3\u5e7b\u89c9\u95ee\u9898\u3002\u4eba\u7c7b\u7684\u5e7b\u89c9\u5b9e\u9645\u9ad8\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\uff0c\u4f46\u4eba\u7c7b\u5df2\u7ecf\u4e60\u60ef\u4e86\u5e7b\u89c9\u4e0e\u9519\u8bef\uff0c\u65e5\u5e38\u4e2d\u4f1a\u901a\u8fc7\u5927\u91cf\u8bc4\u5ba1\u6765\u4fdd\u969c\u590d\u6742\u5de5\u4f5c\u6bcf\u4e00\u6b65\u7684\u53ef\u9760\u6027\u3002\u4e25\u8c28\u6709\u6548\u7684\u8bc4\u5ba1\u8fc7\u7a0b\u80fd\u5c06\u590d\u6742\u5de5\u4f5c\u6574\u4f53\u7684\u9519\u8bef\u7387\u964d\u4f4e90%</p> <p>\u2022 \u8def\u7531\uff1a\u901a\u4fe1\u662f\u667a\u80fd\u4f53\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6d41\u7684\u8fc7\u7a0b\u3002\u5b83\u5bf9\u4e8e\u7cfb\u7edf\u5185\u7684\u534f\u4f5c\u3001\u8c08\u5224\u548c\u7ade\u4e89\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u2022 \u8ba2\u9605\uff1a \u9700\u6c42\u8bf4\u4e86\u4e00\u4e2a\u5236\u5ea6\u6539\u9769\u6216\u5e02\u573a\u53d8\u5316\uff0c\u6240\u6709\u4eba\u90fd\u5e94\u8be5\u5173\u6ce8/\u5224\u65ad\u5f71\u54cd/\u4fee\u6539\u8ba1\u5212</p> <p>\u2022 \u7ecf\u6d4e\uff1a\u8fd9\u6307\u7684\u662f\u591a\u667a\u80fd\u4f53\u73af\u5883\u4e2d\u7684\u4ef7\u503c\u4ea4\u6362\u7cfb\u7edf\uff0c\u51b3\u5b9a\u8d44\u6e90\u5206\u914d\u548c\u4efb\u52a1\u4f18\u5148\u7ea7\u3002</p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#222","title":"2.2.2 \u7ecf\u5178\u6848\u4f8b\uff1a\u8f6f\u4ef6\u516c\u53f8","text":"<p>MetaGPT \u4ee5\u4e00\u884c\u9700\u6c42\u4e3a\u8f93\u5165\uff0c\u8f93\u51fa\u7528\u6237\u6545\u4e8b/\u7ade\u4e89\u5206\u6790/\u9700\u6c42/\u6570\u636e\u7ed3\u6784/API/\u6587\u6863\u7b49\u3002</p> <p>\u5728\u5185\u90e8\uff0cMetaGPT \u5305\u62ec\u4ea7\u54c1\u7ecf\u7406/\u67b6\u6784\u5e08/\u9879\u76ee\u7ecf\u7406/\u5de5\u7a0b\u5e08\u3002\u5b83\u63d0\u4f9b\u4e86\u8f6f\u4ef6\u516c\u53f8\u7684\u6574\u4e2a\u8fc7\u7a0b\u4ee5\u53ca\u7cbe\u5fc3\u7f16\u6392\u7684 SOP\u3002</p> <p></p> <ol> <li>\u9700\u6c42\u5206\u6790\uff1a\u6536\u5230\u9700\u6c42\u540e\uff0c\u8be5\u8fc7\u7a0b\u5f00\u59cb\u3002\u8fd9\u4e00\u9636\u6bb5\u81f4\u529b\u4e8e\u660e\u786e\u8f6f\u4ef6\u6240\u9700\u7684\u529f\u80fd\u548c\u8981\u6c42\u3002</li> <li>\u4ea7\u54c1\u7ecf\u7406\uff1a\u4ea7\u54c1\u7ecf\u7406\u4ee5\u9700\u6c42\u548c\u53ef\u884c\u6027\u5206\u6790\u4e3a\u57fa\u7840\uff0c\u5f00\u542f\u6574\u4e2a\u6d41\u7a0b\u3002\u4ed6\u4eec\u8d1f\u8d23\u7406\u89e3\u9700\u6c42\uff0c\u5e76\u4e3a\u9879\u76ee\u5236\u5b9a\u660e\u786e\u7684\u65b9\u5411\u3002</li> <li>\u67b6\u6784\u5e08\uff1a\u4e00\u65e6\u9700\u6c42\u660e\u786e\uff0c\u67b6\u6784\u5e08\u5c06\u4e3a\u9879\u76ee\u521b\u5efa\u6280\u672f\u8bbe\u8ba1\u65b9\u6848\u3002\u4ed6\u4eec\u8d1f\u8d23\u6784\u5efa\u7cfb\u7edf\u63a5\u53e3\u8bbe\u8ba1\uff0c\u786e\u4fdd\u6280\u672f\u5b9e\u73b0\u7b26\u5408\u9700\u6c42\u3002\u5728MetaGPT\u4e2d\uff0c\u67b6\u6784 Agent \u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u7cfb\u7edf\u754c\u9762\u8bbe\u8ba1\uff0c\u5982\u5185\u5bb9\u63a8\u8350\u5f15\u64ce\u7684\u5f00\u53d1\u3002</li> <li>\u9879\u76ee\u7ecf\u7406\uff1a\u9879\u76ee\u7ecf\u7406\u4f7f\u7528\u5e8f\u5217\u6d41\u7a0b\u56fe\u6765\u6ee1\u8db3\u6bcf\u4e2a\u9700\u6c42\u3002\u4ed6\u4eec\u786e\u4fdd\u9879\u76ee\u6309\u8ba1\u5212\u524d\u884c\uff0c\u6bcf\u4e2a\u9636\u6bb5\u90fd\u5f97\u5230\u9002\u65f6\u6267\u884c\u3002</li> <li>\u5de5\u7a0b\u5e08\uff1a\u5de5\u7a0b\u5e08\u8d1f\u8d23\u5b9e\u9645\u7684\u4ee3\u7801\u5f00\u53d1\u3002\u4ed6\u4eec\u4f7f\u7528\u8bbe\u8ba1\u548c\u6d41\u7a0b\u56fe\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u529f\u80fd\u5b8c\u5907\u7684\u4ee3\u7801\u3002</li> <li>\u8d28\u91cf\u4fdd\u8bc1\uff08QA\uff09\u5de5\u7a0b\u5e08\uff1a\u5728\u5f00\u53d1\u9636\u6bb5\u7ed3\u675f\u540e\uff0cQA\u5de5\u7a0b\u5e08\u8fdb\u884c\u5168\u9762\u7684\u6d4b\u8bd5\u3002\u4ed6\u4eec\u786e\u4fdd\u8f6f\u4ef6\u7b26\u5408\u6240\u9700\u6807\u51c6\uff0c\u4e0d\u5b58\u5728\u4efb\u4f55\u9519\u8bef\u6216\u95ee\u9898\u3002</li> </ol> <p></p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#223-metagpt","title":"2.2.3 \u66f4\u591a\u5173\u4e8eMetaGPT","text":"<p>\u8be6\u89c1\u6211\u4eec\u7684\u5f00\u6e90\u4ed3\u5e93\uff1ahttps://github.com/geekan/MetaGPT/</p> <p>\u4ee5\u53ca\u5bf9\u5e94\u6587\u7ae0\uff1aICLR 2024 Oral | MetaGPT: LLM Agent\u9886\u57df\u7b2c\u4e00\u9ad8\u5206\u8bba\u6587\uff0c\u5168\u7f51Star\u6570\u6700\u9ad8\u7684\u591a\u667a\u80fd\u4f53\u6846\u67b6</p> <p></p> <ol> <li>\u73b0\u72b6\uff1aMetaGPT\u76ee\u524d\u89e3\u51b3\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u7684\u4e2d\u7a0b\u4efb\u52a1\uff0c\u8ba9\u7528\u6237\u4e0d\u518d\u53ea\u662f\u4e0eChatGPT\u804a\u5929\uff0c\u800c\u662f\u771f\u6b63\u4e0e\u667a\u80fd\u4f53\u534f\u4f5c\u3002\u56e0\u6b64\uff0cMetaGPT\u83b7\u5f97\u4e86\u6765\u81ea\u5168\u4e16\u754c\u7684\u5e7f\u6cdb\u597d\u8bc4\uff08\u591a\u5929\u4e16\u754c\u7b2c\u4e00\uff09\uff0c\u4e5f\u5e26\u6765\u4e86\u5168\u4e16\u754c\u5de5\u7a0b\u5e08\u3001\u6295\u8d44\u4eba\u7684\u8bf8\u591a\u5173\u6ce8\uff0c\u5438\u5f15\u4e86\u591a\u4f4d\u9876\u7ea7\u8d21\u732e\u8005\uff08\u80cc\u666f\u6709\u5b57\u8282AILab / \u53ee\u549a\u7b97\u6cd5 / \u5c0f\u7ea2\u4e66\u7b97\u6cd5 / \u767e\u5ea6 / MSRA / TikTok / bloomgpt infra / bilibili / CUHK / \u6e2f\u79d1 / CMU / UCB\u7b49\u80cc\u666f\uff09</li> <li>\u76ee\u6807\uff1a \u5e0c\u671b\u80fd\u591f\u62d3\u5c55\u5230\u4efb\u610f\u884c\u4e1a\u4efb\u610f\u5929\u6570\u7684\u4efb\u52a1</li> <li>\u5173\u952e\u70b9\uff1a ChatGPT\u53ea\u89e3\u51b3\u4e86\u804a\u5929\uff0c\u5e76\u6ca1\u6709\u89e3\u51b3\u534f\u4f5c\u3002\u800c\u667a\u80fd\u4f53\u53ef\u4ee5\u4e0e\u4eba\u7c7b\u534f\u4f5c\uff0c\u610f\u5473\u7740\u667a\u80fd\u4f53\u4f1a\u6210\u4e3a\u4e92\u8054\u7f51\u7ea7\u522b\u7684\u5165\u53e3\uff0c\u5e76\u4e14\u4f1a\u5b58\u5728\u4e8e\u5927\u91cf\u7684IM\u3001\u786c\u4ef6\u4e4b\u4e2d\uff0c\u53d6\u4ee3\u5df2\u6709\u7684\u5927\u91cfSaaS</li> </ol>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#224","title":"2.2.4 \u5176\u4ed6\u591a\u667a\u80fd\u4f53\u6846\u67b6","text":""},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#chatdev","title":"ChatDev","text":"<p>ChatDev \u662f\u4e00\u5bb6\u865a\u62df\u8f6f\u4ef6\u516c\u53f8\uff0c\u901a\u8fc7\u62c5\u4efb\u4e0d\u540c\u89d2\u8272\u7684\u5404\u79cd\u667a\u80fd\u4ee3\u7406\u8fdb\u884c\u8fd0\u8425\uff0c\u5305\u62ec\u9996\u5e2d\u6267\u884c\u5b98\u3001\u9996\u5e2d\u4ea7\u54c1\u5b98\u3001\u9996\u5e2d\u6280\u672f\u5b98 \u3001\u7a0b\u5e8f\u5458\u3001\u5ba1\u7a3f\u4eba \u3001\u6d4b\u8bd5\u4eba\u5458 \u3001\u827a\u672f\u8bbe\u8ba1\u5e08 \u3002\u8fd9\u4e9b\u4ee3\u7406\u5f62\u6210\u4e86\u4e00\u4e2a\u591a\u4ee3\u7406\u7ec4\u7ec7\u7ed3\u6784\uff0c\u5e76\u56e0\u201c\u901a\u8fc7\u7f16\u7a0b\u5f7b\u5e95\u6539\u53d8\u6570\u5b57\u4e16\u754c\u201d\u7684\u4f7f\u547d\u800c\u56e2\u7ed3\u5728\u4e00\u8d77\u3002ChatDev \u4e2d\u7684\u4ee3\u7406\u901a\u8fc7\u53c2\u52a0\u4e13\u95e8\u7684\u529f\u80fd\u7814\u8ba8\u4f1a\u8fdb\u884c\u534f\u4f5c\uff0c\u5305\u62ec\u8bbe\u8ba1\u3001\u7f16\u7801\u3001\u6d4b\u8bd5\u548c\u6587\u6863\u7b49\u4efb\u52a1\u3002</p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#autoagents","title":"AutoAgents","text":"<p>AutoAgents \u662f\u4e00\u4e2a\u5b9e\u9a8c\u6027\u7684\u5f00\u6e90\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u4e8e\u57fa\u4e8e LLM\u7684\u81ea\u52a8\u4ee3\u7406\u751f\u6210\u5b9e\u9a8c\u3002\u8be5\u7a0b\u5e8f\u7531 LLM\u9a71\u52a8\uff0c\u81ea\u52a8\u751f\u6210\u591a\u667a\u80fd\u4f53\u4ee5\u5b9e\u73b0\u60a8\u8bbe\u5b9a\u7684\u4efb\u4f55\u76ee\u6807\u3002</p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#agents","title":"Agents","text":"<p>Agents \u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u81ea\u6cbb\u8bed\u8a00\u4ee3\u7406\u7684\u5f00\u6e90\u5e93/\u6846\u67b6\u3002\u8be5\u5e93\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u53ef\u652f\u6301\u91cd\u8981\u529f\u80fd\uff0c\u5305\u62ec\u957f\u77ed\u671f\u8bb0\u5fc6\u3001\u5de5\u5177\u4f7f\u7528\u3001\u7f51\u7edc\u5bfc\u822a\u3001\u591a\u667a\u80fd\u4f53\u901a\u4fe1\uff0c\u4ee5\u53ca\u5305\u62ec\u4eba\u673a\u4ea4\u4e92\u548c\u7b26\u53f7\u63a7\u5236\u5728\u5185\u7684\u5168\u65b0\u529f\u80fd\u3002\u4f7f\u7528\u4ee3\u7406\uff0c\u53ea\u9700\u7528\u81ea\u7136\u8bed\u8a00\u586b\u5199\u914d\u7f6e\u6587\u4ef6\uff0c\u5373\u53ef\u81ea\u5b9a\u4e49\u8bed\u8a00\u4ee3\u7406\u6216\u591a\u4ee3\u7406\u7cfb\u7edf\uff0c\u5e76\u5c06\u8bed\u8a00\u4ee3\u7406\u90e8\u7f72\u5728\u7ec8\u7aef\u3001Gradio\u754c\u9762\u6216\u540e\u7aef\u670d\u52a1\u4e2d\u3002</p> <p>Agents \u4e0e\u5176\u4ed6\u73b0\u6709\u8bed\u8a00\u4ee3\u7406\u6846\u67b6\u4e4b\u95f4\u7684\u4e00\u4e2a\u4e3b\u8981\u533a\u522b\u662f\uff0c\u6211\u4eec\u7684\u6846\u67b6\u5141\u8bb8\u7528\u6237\u901a\u8fc7 SOP\uff08\u6807\u51c6\u64cd\u4f5c\u6d41\u7a0b\uff09\u4e3a\u8bed\u8a00\u4ee3\u7406\u63d0\u4f9b\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u548c\u6307\u5bfc\u3002SOP \u5b9a\u4e49\u4e86\u6574\u4e2a\u4efb\u52a1\u7684\u5b50\u76ee\u6807/\u5b50\u4efb\u52a1\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u4e3a\u8bed\u8a00\u4ee3\u7406\u5b9a\u5236\u7ec6\u7c92\u5ea6\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#camel","title":"Camel","text":"<p>\u57fa\u4e8e\u5bf9\u8bdd\u548c\u804a\u5929\u7684\u8bed\u8a00\u6a21\u578b\u7684\u5feb\u901f\u53d1\u5c55\u5728\u590d\u6742\u4efb\u52a1\u89e3\u51b3\u65b9\u9762\u53d6\u5f97\u4e86\u663e\u7740\u8fdb\u5c55\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u7684\u6210\u529f\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u4eba\u5de5\u8f93\u5165\u6765\u6307\u5bfc\u5bf9\u8bdd\uff0c\u8fd9\u53ef\u80fd\u662f\u5177\u6709\u6311\u6218\u6027\u548c\u8017\u65f6\u7684\u3002\u672c\u6587\u63a2\u8ba8\u4e86\u5efa\u7acb\u53ef\u6269\u5c55\u6280\u672f\u7684\u6f5c\u529b\uff0c\u4ee5\u4fc3\u8fdb\u4ea4\u9645\u4ee3\u7406\u4e4b\u95f4\u7684\u81ea\u4e3b\u5408\u4f5c\uff0c\u5e76\u6df1\u5165\u4e86\u89e3\u4ed6\u4eec\u7684\u201c\u8ba4\u77e5\u201d\u8fc7\u7a0b\u3002\u4e3a\u4e86\u5e94\u5bf9\u5b9e\u73b0\u81ea\u4e3b\u5408\u4f5c\u7684\u6311\u6218\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a\u89d2\u8272\u626e\u6f14\u7684\u65b0\u578b\u4ea4\u9645\u4ee3\u7406\u6846\u67b6\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528\u521d\u59cb\u63d0\u793a\u6765\u6307\u5bfc\u804a\u5929\u4ee3\u7406\u5b8c\u6210\u4efb\u52a1\uff0c\u540c\u65f6\u4fdd\u6301\u4e0e\u4eba\u7c7b\u610f\u56fe\u7684\u4e00\u81f4\u6027\u3002\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u89d2\u8272\u626e\u6f14\u6765\u751f\u6210\u5bf9\u8bdd\u6570\u636e\uff0c\u4ee5\u7814\u7a76\u804a\u5929\u4ee3\u7406\u7684\u884c\u4e3a\u548c\u80fd\u529b\uff0c\u4e3a\u7814\u7a76\u5bf9\u8bdd\u8bed\u8a00\u6a21\u578b\u63d0\u4f9b\u5b9d\u8d35\u7684\u8d44\u6e90\u3002\u6211\u4eec\u7684\u8d21\u732e\u5305\u62ec\u5f15\u5165\u4e00\u79cd\u65b0\u9896\u7684\u4ea4\u9645\u4ee3\u7406\u6846\u67b6\uff0c\u63d0\u4f9b\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u65b9\u6cd5\u6765\u7814\u7a76\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u7684\u534f\u4f5c\u884c\u4e3a\u548c\u80fd\u529b\uff0c\u4ee5\u53ca\u5f00\u6e90\u6211\u4eec\u7684\u5e93\u4ee5\u652f\u6301\u4ea4\u9645\u4ee3\u7406\u53ca\u5176\u4ed6\u65b9\u9762\u7684\u7814\u7a76\u3002</p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#autogen","title":"AutoGen","text":"<p>AutoGen \u662f\u4e00\u4e2a\u6846\u67b6\uff0c\u5b83\u652f\u6301\u4f7f\u7528\u591a\u4e2a\u4ee3\u7406\u5f00\u53d1LLM\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u4ee3\u7406\u53ef\u4ee5\u76f8\u4e92\u4ea4\u8c08\u4ee5\u89e3\u51b3\u4efb\u52a1\u3002AutoGen \u4ee3\u7406\u662f\u53ef\u5b9a\u5236\u7684\u3001\u53ef\u5bf9\u8bdd\u7684\uff0c\u5e76\u4e14\u65e0\u7f1d\u5730\u5141\u8bb8\u4eba\u5de5\u53c2\u4e0e\u3002\u5b83\u4eec\u53ef\u4ee5\u5728\u5404\u79cd\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u91c7\u7528\u4eba\u5de5\u8f93\u5165\u548c\u5de5\u5177\u7684LLMs\u7ec4\u5408\u3002</p>"},{"location":"chapter2/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/#2241","title":"2.2.4.1 \u53c2\u8003\u8d44\u6599\uff1a","text":"<p>\u7531\u4e8e\u7acb\u573a\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u5bf9\u5176\u4ed6\u5f00\u6e90\u9879\u76ee\u505a\u51fa\u4efb\u4f55\u8bc4\u4ef7\uff0c\u60f3\u8981\u4e86\u89e3\u5404\u4e2a\u6846\u67b6\u7279\u6027\u53ef\u4ee5\u53c2\u8003\u4e0b\u6587\u4e09\u65b9\u535a\u5ba2</p> <p>https://www.breezedeus.com/article/ai-agent-part3</p>"},{"location":"chapter3/","title":"3.\u7b2c\u4e09\u7ae0\uff1a\u5355\u667a\u80fd\u4f53\u5f00\u53d1","text":""},{"location":"chapter3/#_1","title":"\u524d\u671f\u51c6\u5907","text":"<p>\u672c\u7ae0\u8282\u5185\u6211\u4eec\u5c06\u4e86\u89e3\u5c06\u8be6\u7ec6\u4e86\u89e3metagpt\u5e76\u5b66\u4e60\u5982\u4f55\u4f7f\u7528metagpt\u8fdb\u884c\u5355\u667a\u80fd\u4f53\u7684\u5f00\u53d1\u3002 \u901a\u8fc7\u5b9e\u73b0\u6280\u672f\u6587\u6863\u52a9\u624b\u548cOSS\u8ba2\u9605\u667a\u80fd\u4f53,\u8fdb\u4e00\u6b65\u5e26\u5927\u5bb6\u611f\u53d7metagpt\u7684\u529f\u80fd\u3002</p>"},{"location":"chapter3/Agent%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0/","title":"3.1 &nbsp; Agent\u6982\u5ff5\u6982\u8ff0","text":""},{"location":"chapter3/Agent%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0/#31-agent","title":"3.1 Agent\u6982\u5ff5\u6982\u8ff0","text":"<p>\u5728MetaGPT\u770b\u6765\uff0c\u6211\u4eec\u628aAgent\u60f3\u8c61\u6210\u73af\u5883\u4e2d\u7684\u6570\u5b57\u4eba\uff0c\u5176\u4e2d Agent = \u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09 + \u89c2\u5bdf + \u601d\u8003 + \u884c\u52a8 + \u8bb0\u5fc6 \u8fd9\u4e2a\u516c\u5f0f\u6982\u62ec\u4e86\u667a\u80fd\u4f53\u7684\u529f\u80fd\u672c\u8d28\u3002\u4e3a\u4e86\u7406\u89e3\u6bcf\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u8ba9\u6211\u4eec\u5c06\u5176\u4e0e\u4eba\u7c7b\u8fdb\u884c \u7c7b\u6bd4\uff1a 1. \u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\uff1aLLM\u4f5c\u4e3a\u667a\u80fd\u4f53\u7684\u201c\u5927\u8111\u201d\u90e8\u5206\uff0c\u4f7f\u5176\u80fd\u591f\u5904\u7406\u4fe1\u606f\uff0c\u4ece\u4ea4 \u4e92\u4e2d\u5b66\u4e60\uff0c\u505a\u51fa\u51b3\u7b56\u5e76\u6267\u884c\u884c\u52a8\u3002 2. \u89c2\u5bdf\uff1a\u8fd9\u662f\u667a\u80fd\u4f53\u7684\u611f\u77e5\u673a\u5236\uff0c\u4f7f\u5176\u80fd\u591f\u611f\u77e5\u5176\u73af\u5883\u3002\u667a\u80fd\u4f53\u53ef\u80fd\u4f1a\u63a5\u6536\u6765\u81ea\u53e6 \u4e00\u4e2a\u667a\u80fd\u4f53\u7684\u6587\u672c\u6d88\u606f\u3001\u6765\u81ea\u76d1\u89c6\u6444\u50cf\u5934\u7684\u89c6\u89c9\u6570\u636e\u6216\u6765\u81ea\u5ba2\u6237\u670d\u52a1\u5f55\u97f3\u7684\u97f3\u9891\u7b49\u4e00 \u7cfb\u5217\u4fe1\u53f7\u3002\u8fd9\u4e9b\u89c2\u5bdf\u6784\u6210\u4e86\u6240\u6709\u540e\u7eed\u884c\u52a8\u7684\u57fa\u7840\u3002 3. \u601d\u8003\uff1a\u601d\u8003\u8fc7\u7a0b\u6d89\u53ca\u5206\u6790\u89c2\u5bdf\u7ed3\u679c\u548c\u8bb0\u5fc6\u5185\u5bb9\u5e76\u8003\u8651\u53ef\u80fd\u7684\u884c\u52a8\u3002\u8fd9\u662f\u667a\u80fd\u4f53\u5185 \u90e8\u7684\u51b3\u7b56\u8fc7\u7a0b\uff0c\u5176\u53ef\u80fd\u7531LLM\u8fdb\u884c\u9a71\u52a8\u3002 4. \u884c\u52a8\uff1a\u8fd9\u4e9b\u662f\u667a\u80fd\u4f53\u5bf9\u5176\u601d\u8003\u548c\u89c2\u5bdf\u7684\u663e\u5f0f\u54cd\u5e94\u3002\u884c\u52a8\u53ef\u4ee5\u662f\u5229\u7528 LLM \u751f\u6210\u4ee3 \u7801\uff0c\u6216\u662f\u624b\u52a8\u9884\u5b9a\u4e49\u7684\u64cd\u4f5c\uff0c\u5982\u9605\u8bfb\u672c\u5730\u6587\u4ef6\u3002\u6b64\u5916\uff0c\u667a\u80fd\u4f53\u8fd8\u53ef\u4ee5\u6267\u884c\u4f7f\u7528\u5de5\u5177\u7684 \u64cd\u4f5c\uff0c\u5305\u62ec\u5728\u4e92\u8054\u7f51\u4e0a\u641c\u7d22\u5929\u6c14\uff0c\u4f7f\u7528\u8ba1\u7b97\u5668\u8fdb\u884c\u6570\u5b66\u8ba1\u7b97\u7b49\u3002 5. \u8bb0\u5fc6\uff1a\u667a\u80fd\u4f53\u7684\u8bb0\u5fc6\u5b58\u50a8\u8fc7\u53bb\u7684\u7ecf\u9a8c\u3002\u8fd9\u5bf9\u5b66\u4e60\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u667a\u80fd\u4f53\u53c2 \u8003\u5148\u524d\u7684\u7ed3\u679c\u5e76\u636e\u6b64\u8c03\u6574\u672a\u6765\u7684\u884c\u52a8\u3002</p> <p>MetaGPT \u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2aagent \u8fd0\u884c\u793a\u4f8b\u5982\u4e0b\uff1a</p> <p></p> <p>\u2022 \u4e00\u4e2aagent\u5728\u542f\u52a8\u540e\u4ed6\u4f1a\u89c2\u5bdf\u81ea\u5df1\u80fd\u83b7\u53d6\u5230\u7684\u4fe1\u606f\uff0c\u52a0\u5165\u81ea\u5df1\u7684\u8bb0\u5fc6\u4e2d \u2022 \u4e0b\u4e00\u6b65\u8fdb\u884c\u601d\u8003\uff0c\u51b3\u5b9a\u4e0b\u4e00\u6b65\u7684\u884c\u52a8\uff0c\u4e5f\u5c31\u662f\u4ece Action1\uff0cAction2\uff0cAction3 \u4e2d\u9009\u62e9\u6267\u884c\u7684 Action \u2022 \u51b3\u5b9a\u884c\u52a8\u540e\uff0c\u7d27\u63a5\u7740\u5c31\u6267\u884c\u5bf9\u5e94\u884c\u52a8\uff0c\u5f97\u5230\u8fd9\u4e2a\u73af\u8282\u7684\u7ed3\u679c \u800c\u5728**MetaGPT\u5185 Role \u7c7b\u662f\u667a\u80fd\u4f53\u7684\u903b\u8f91\u62bd\u8c61\u3002**\u4e00\u4e2a Role \u80fd\u6267\u884c\u7279\u5b9a\u7684 Action\uff0c\u62e5\u6709\u8bb0\u5fc6\u3001\u601d\u8003\u5e76\u91c7\u7528\u5404\u79cd\u7b56\u7565\u884c\u52a8\u3002\u57fa\u672c\u4e0a\uff0c\u5b83\u5145\u5f53\u4e00\u4e2a\u5c06\u6240\u6709\u8fd9\u4e9b\u7ec4\u4ef6 \u8054\u7cfb\u5728\u4e00\u8d77\u7684\u51dd\u805a\u5b9e\u4f53\u3002\u76ee\u524d\uff0c\u8ba9\u6211\u4eec\u53ea\u5173\u6ce8\u4e00\u4e2a\u6267\u884c\u52a8\u4f5c\u7684\u667a\u80fd\u4f53\uff0c\u5e76\u770b\u770b\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u6700\u7b80\u5355\u7684 Agent</p>"},{"location":"chapter3/RoleContext%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/","title":"3.2 &nbsp; RoleContext\u5bf9\u8c61\u5206\u6790","text":""},{"location":"chapter3/RoleContext%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/#32-rolecontext","title":"3.2 RoleContext","text":"<p>\u800c Role \u5728\u4e0e\u73af\u5883\u4e0a\u4e0b\u6587\u8fdb\u884c\u4ea4\u4e92\u65f6\uff0c\u662f\u901a\u8fc7\u5185\u90e8\u7684 RoleContext \u5bf9\u8c61\u6765\u5b9e\u73b0\u7684\u3002\u672c\u7bc7\u6211\u4eec\u5c31\u6765\u770b\u770b RoleContext \u4e2d\u90fd\u6709\u54ea\u4e9b\u5185\u5bb9\u3002</p> <p>\u4ee3\u7801\u7248\u672c\u4f7f\u7528 v0.6.6</p> <pre><code>class RoleContext(BaseModel):\n    \"\"\"Role Runtime Context\"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    # # env exclude=True to avoid `RecursionError: maximum recursion depth exceeded in comparison`\n    env: \"Environment\" = Field(default=None, exclude=True)  # # avoid circular import\n    # TODO judge if ser&amp;deser\n    msg_buffer: MessageQueue = Field(\n        default_factory=MessageQueue, exclude=True\n    )  # Message Buffer with Asynchronous Updates\n    memory: Memory = Field(default_factory=Memory)\n    # long_term_memory: LongTermMemory = Field(default_factory=LongTermMemory)\n    state: int = Field(default=-1)  # -1 indicates initial or termination state where todo is None\n    todo: Action = Field(default=None, exclude=True)\n    watch: set[str] = Field(default_factory=set)\n    news: list[Type[Message]] = Field(default=[], exclude=True)  # TODO not used\n    react_mode: RoleReactMode = (\n        RoleReactMode.REACT\n    )  # see `Role._set_react_mode` for definitions of the following two attributes\n    max_react_loop: int = 1\n</code></pre> <p>env\uff1aEnvironment \u5bf9\u8c61\uff0c\u5f53\u5728 Environment \u6dfb\u52a0 Role \u65f6\u4f1a\u540c\u65f6\u8bbe\u7f6e Role \u5bf9 Environment \u7684\u5f15\u7528\u3002</p> <p>msg_buffer\uff1a\u4e00\u4e2a MessageQueue \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u662f\u5bf9 asyncio \u7684 Queue \u8fdb\u884c\u7b80\u5355\u5c01\u88c5\uff0c\u4e3b\u8981\u662f\u63d0\u4f9b\u4e86\u975e\u963b\u585e\u7684 pop / push \u65b9\u6cd5\u3002Role \u901a\u8fc7\u8be5\u5bf9\u8c61\u4e0e\u73af\u5883\u4e2d\u7684\u5176\u4ed6 Role \u8fdb\u884c\u4fe1\u606f\u4ea4\u4e92\u3002</p> <p>memory\uff1a\u8bb0\u5fc6\u5bf9\u8c61\u3002\u5f53 Role \u6267\u884c _act \u65f6\uff0c\u4f1a\u5c06\u6267\u884c\u5f97\u5230\u7684\u54cd\u5e94\u8f6c\u6362\u4e3a Message \u5bf9\u8c61\u653e\u5165 memory \u4e2d\u3002\u53e6\u5916\u5f53 Role \u6267\u884c _observe \u65f6\uff0c\u4f1a\u628a msg_buffer \u7684\u6240\u6709\u6d88\u606f\u8f6c\u79fb\u5230 memory \u4e2d\u3002</p> <p>state\uff1a\u8bb0\u5f55 Role \u7684\u6267\u884c\u72b6\u6001\u3002\u521d\u59cb\u72b6\u6001\u503c\u4e3a -1\uff0c\u5f53\u5168\u90e8 Action \u6267\u884c\u5b8c\u6210\u4e4b\u540e\u4e5f\u4f1a\u88ab\u91cd\u7f6e\u4e3a -1\u3002</p> <p>todo\uff1a\u4e0b\u4e00\u4e2a\u5f85\u6267\u884c\u7684 Action\u3002\u5f53 state &gt;= 0 \u65f6\u4f1a\u6307\u5411\u6700\u540e\u4e00\u4e2a Action\u3002</p> <p>watch\uff1a\u7528 str \u8868\u793a\u7684\u5f53\u524d Role \u89c2\u5bdf\u7684 Action \u5217\u8868\uff0c\u76ee\u524d\u7528\u5728 _observe \u83b7\u53d6 news \u65f6\u8fdb\u884c\u6d88\u606f\u8fc7\u6ee4\u3002</p> <p>news\uff1a\u5b58\u50a8\u90a3\u4e9b\u5728\u672c\u6b21\u6267\u884c  _observe \u65f6\u8bfb\u53d6\u5230\u7684\u4e0e\u5f53\u524d Role \u4e0a\u4e0b\u6e38\u76f8\u5173\u7684\u6d88\u606f\u3002</p> <p>react_mode\uff1aReAct \u5faa\u73af\u7684\u6a21\u5f0f\uff0c\u76ee\u524d\u652f\u6301 REACT\u3001BY_ORDER\u3001PLAN_AND_ACT 3\u79cd\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4f7f\u7528 REACT \u6a21\u5f0f\u3002\u5728 _set_react_mode \u65b9\u6cd5\u4e2d\u6709\u76f8\u5173\u8bf4\u660e\u3002\u7b80\u5355\u6765\u8bf4\uff0cBY_ORDER \u6a21\u5f0f\u6309\u7167\u6307\u5b9a\u7684 Action \u987a\u5e8f\u6267\u884c\u3002PLAN_AND_ACT \u5219\u4e3a\u4e00\u6b21\u601d\u8003\u540e\u6267\u884c\u591a\u4e2a\u52a8\u4f5c\uff0c\u5373 _think -&gt; _act -&gt; act -&gt; ...\uff0c\u800c REACT \u6a21\u5f0f\u6309\u7167 ReAct \u8bba\u6587\u4e2d\u7684\u601d\u8003\u2014\u2014\u884c\u52a8\u5faa\u73af\u6765\u6267\u884c\uff0c\u5373 _think -&gt; _act -&gt; _think -&gt; _act -&gt; ...\u3002</p> <p>max_react_loop\uff1a\u5728 react_mode \u4e3a REACT \u6a21\u5f0f\u65f6\u751f\u6548\uff0c\u7528\u4e8e\u8bbe\u7f6e\u6700\u5927\u7684\u601d\u8003-\u5faa\u73af\u6b21\u6570\uff0c\u8d85\u8fc7\u540e\u4f1a\u505c\u6b62 _react \u6267\u884c\u3002</p> <p>\u90e8\u5206\u53c2\u6570\u7684\u8bb2\u89e3\u5c06\u5728\u591a\u667a\u80fd\u4f53\u7bc7\u8be6\u89e3</p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/","title":"3.6 &nbsp; \u5355\u667a\u80fd\u4f53\u6848\u4f8bOSS-\u8ba2\u9605\u667a\u80fd\u4f53","text":""},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#36-oss-","title":"3.6 \u5355\u667a\u80fd\u4f53\u6848\u4f8b OSS - \u8ba2\u9605\u667a\u80fd\u4f53","text":""},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#361","title":"3.6.1 \u57fa\u672c\u4ecb\u7ecd","text":""},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3611","title":"3.6.1.1 \u4ec0\u4e48\u662f\u8ba2\u9605\u667a\u80fd\u4f53","text":"<p>MetaGPT\u63d0\u4f9b\u4e86Agent\u7684\u5f00\u53d1\u80fd\u529b\uff0cAgent\u53ef\u4ee5\u534f\u52a9\u6211\u4eec\u89e3\u51b3\u65e5\u5e38\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u5176\u4e2d \u4e00\u4e2a\u5e94\u7528\u573a\u666f\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u8ba9Agent\u4e3a\u6211\u4eec\u5173\u6ce8\u67d0\u4e9b\u60f3\u5173\u6ce8\u7684\u4fe1\u606f\uff0c\u5f53\u6709\u6211\u4eec\u5173\u6ce8\u7684\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0cAgent\u83b7\u53d6\u4fe1\u606f\u5e76\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e9b\u5982\u90ae\u4ef6\u3001\u5fae\u4fe1\u3001discord\u7b49\u901a \u77e5\u6e20\u9053\u5c06\u5904\u7406\u540e\u7684\u4fe1\u606f\u53d1\u9001\u7ed9\u6211\u4eec\uff0c\u6211\u4eec\u5c06\u8fd9\u7c7bAgent\u79f0\u4e3a\u8ba2\u9605\u667a\u80fd\u4f53 \u5728\u8fd9\u91cc\uff0cAgent \u7684Role \u662f\u4ee5\u4e00\u4e2a\u201c\u8d44\u8baf\u8ba2\u9605\u5458\u201d\u7684\u8eab\u4efd\u4e3a\u4f60\u670d\u52a1\uff0c\u800c Agent \u4e2d\u5305\u542b\u7684 Action\u5219\u4e3b\u8981\u6709\u4e24\u79cd\uff1a\u4ece\u5916\u754c\u4fe1\u606f\u6e90\u4e2d\u641c\u96c6\u4fe1\u606f\u548c\u5bf9\u641c\u96c6\u5f97\u5230\u7684\u4fe1\u606f\u8fdb\u884c\u603b\u7ed3\uff1b\u5b8c\u6210 \u4e0a\u8ff0\u4efb\u52a1\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u8fd9\u4e2aAgent\u5f00\u53d1\u66f4\u591a\u989d\u5916\u529f\u80fd\uff1a\u5b9a\u65f6\u8fd0\u884c\u7684\u529f\u80fd\u548c\u53d1\u9001\u5230\u901a \u77e5\u6e20\u9053\u7684\u529f\u80fdx</p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3612-metagpt","title":"3.6.1.2 \u5982\u4f55\u7528 MetaGPT \u5b9e\u73b0\u8ba2\u9605\u667a\u80fd\u4f53","text":"<p>\u5728 MetaGPT \u4e2d\uff0cmetagpt.subscription \u6a21\u5757\u63d0\u4f9b\u4e86 SubscriptionRunner \u7c7b\uff0c\u4e0e metagpt.team.Team \u7c7b\u4f3c\uff0cSubscriptionRunner \u7c7b\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a Role \u7684\u8fd0\u884c\u65b9\u5f0f\uff0c \u57fa\u4e8e SubscriptionRunner \u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u65f6\u89e6\u53d1\u8fd0\u884c\u4e00\u4e2a Role\uff0c\u7136\u540e\u5c06 Role \u7684\u6267\u884c \u8f93\u51fa\u901a\u77e5\u7ed9\u7528\u6237\uff0c\u4f8b\u5982\uff0c\u4ee5\u4e0b\u7684\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from metagpt.subscription import SubscriptionRunner\n&gt;&gt;&gt; from metagpt.roles import Searcher\n&gt;&gt;&gt; from metagpt.schema import Message\n\n&gt;&gt;&gt; async def trigger():\n...     while True:\n...         yield Message(\"the latest news about OpenAI\")\n...         await asyncio.sleep(3600 * 24)\n\n&gt;&gt;&gt; async def callback(msg: Message):\n...     print(msg.content)\n\n&gt;&gt;&gt; async def main():\n...     pb = SubscriptionRunner()\n...     await pb.subscribe(Searcher(), trigger(), callback)\n...     await pb.run()\n\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> <p>\u4ece\u4f8b\u5b50\u53ef\u4ee5\u77e5\u9053\u8ba2\u9605\u667a\u80fd\u4f53\u7684\u5b9e\u73b0\u4e3b\u8981\u67093\u4e2a\u8981\u7d20\uff0c\u5206\u522b\u662fRole\u3001Trigger\u3001Callback\uff0c\u5373\u667a\u80fd\u4f53\u672c\u8eab\u3001\u89e6\u53d1\u5668\u3001\u6570\u636e\u56de\u8c03\u3002\u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u5b66\u8fc7\u4e86Agent\u7684\u5f00\u53d1\uff0c\u90a3\u4e48\u5bf9Role\u7684\u5b9e\u73b0\u80af\u5b9a\u975e\u5e38\u719f\u6089\u4e86\uff0c\u8fd9\u8fb9\u7684Role\u5c31\u662f\u6211\u4eec\u7684Agent\u7684\u5b9e\u9645\u4ee3\u7801\u5b9e\u73b0\uff0c\u6240\u4ee5\u8ba2\u9605\u667a\u80fd\u4f53\u5728\u4ee3\u7801\u5b9e\u73b0\u4e0a\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u4f8b\u5b50\u5b9e\u9645\u8fd0\u884c\u7684\u5c31\u662fMetaGPT\u4e2d\u7684Searcher Role\uff0c\u5b83\u65e9\u5c31\u5b58\u5728\u4e86\u6211\u4eec\u7684MetaGPT\u4ed3\u5e93\u4e2d</p> <p>\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u4e0d\u5bf9\u8ba2\u9605\u667a\u80fd\u4f53\u7684Role\u505a\u9650\u5236\uff0c\u4f46\u662f\u4e0d\u662f\u6240\u6709\u7684Role\u90fd\u9002\u5408\u7528\u6765\u505a\u8ba2\u9605\u667a\u80fd\u4f53\uff0c\u6bd4\u5982MetaGPT\u8f6f\u4ef6\u516c\u53f8\u4e2d\u7684\u51e0\u4e2a\u89d2\u8272\uff0c\u4f8b\u5982\u4ea7\u54c1\u7ecf\u7406\u3001\u67b6\u6784\u5e08\u3001\u5de5\u7a0b\u5e08\u7b49\uff0c\u56e0\u4e3a\u5f53\u7ed9\u8fd9\u4e9bRole\u4e00\u4e2a\u9700\u6c42\u8f93\u5165\u65f6\uff0c\u5b83\u4eec\u7684\u4ea7\u51fa\u5f80\u5f80\u662f\u7c7b\u4f3c\u7684\uff0c\u5e76\u6ca1\u6709\u5b9a\u65f6\u6267\u884c\u7136\u540e\u53d1\u9001\u7ed9\u6211\u4eec\u80fd\u7684\u5fc5\u8981\u3002\u6240\u4ee5\u4ece\u5e94\u7528\u7684\u89d2\u5ea6\u51fa\u53d1\uff0c\u8ba2\u9605\u667a\u80fd\u4f53\u7684\u8f93\u51fa\u5e94\u8be5\u5177\u6709\u5b9e\u65f6\u6027\uff0c\u76f8\u540c\u7684\u4e00\u4e2a\u9700\u6c42\u63cf\u8ff0\u8f93\u5165\uff0c\u8f93\u51fa\u7684\u5185\u5bb9\u4e00\u822c\u662f\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u53d8\u5316\u800c\u4e0d\u540c\uff0c\u4f8b\u5982\u65b0\u95fb\u8d44\u8baf\u3001\u6280\u672f\u524d\u6cbf\u8fdb\u5c55\u3001\u70ed\u95e8\u7684\u5f00\u6e90\u9879\u76ee\u7b49\u3002</p> <p>\u6240\u4ee5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u672c\u6587\u6863\u901a\u8fc7\u4e00\u4e2aOSS\uff08Open Source Software\uff09\u8ba2\u9605\u667a\u80fd\u4f53\u5b9e\u73b0\u793a\u4f8b\u6559\u5927\u5bb6\u5982\u4f55\u4f7f\u7528MetaGPT\u5b9e\u73b0\u8ba2\u9605\u667a\u80fd\u4f53</p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#362","title":"3.6.2 \u6559\u7a0b\u4fe1\u606f","text":""},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3621","title":"3.6.2.1 \u524d\u7f6e\u51c6\u5907","text":"<p>\u4e3a\u4e86\u8ba9\u5927\u5bb6\u5728\u5b9e\u64cd\u8fc7\u7a0b\u4e2d\u6709\u826f\u597d\u4f53\u9a8c\uff0c\u5728\u6b63\u5f0f\u8fdb\u5165\u5230\u672c\u7ae0\u8282\u7684\u5b9e\u64cd\u73af\u8282\u4e4b\u524d\uff0c\u6211\u4eec\u51c6\u5907\u4e86\u4ee5\u4e0b\u7684\u524d\u7f6e\u77e5\u8bc6\u68c0\u67e5\u6e05\u5355\uff0c\u8fd9\u4e9b\u90fd\u662f\u5728\u63a5\u4e0b\u6765\u5b9e\u64cd\u65f6\u4f1a\u7528\u5230\u7684\uff0c\u5982\u679c\u4ee5\u4e0b\u6e05\u5355\u6240\u5217\u5185\u5bb9\u90fd\u5f88\u719f\u6089\uff0c\u76f4\u63a5\u8df3\u8fc7\u5373\u53ef\uff1b\u5982\u679c\u6709\u4e0d\u592a\u6e05\u695a\u7684\u70b9\uff0c\u53ef\u4ee5\u6839\u636e\u5efa\u8bae\u5148\u8865\u9f50\u4e00\u4e0b\u524d\u7f6e\u77e5\u8bc6</p> <ul> <li>\u666e\u901a\u667a\u80fd\u4f53\u7684\u5f00\u53d1\uff1a\u53c2\u8003\u524d\u9762\u7684\u6559\u7a0b</li> <li>\u7f51\u7edc\u722c\u866b</li> <li>\u57fa\u7840\u7684\u6982\u5ff5\uff1a<ul> <li><code>HTML</code>\uff1a\u4e86\u89e3 HTML \u7684\u57fa\u672c\u7ed3\u6784\u3001\u6807\u7b7e\u548c\u5e38\u89c1\u5143\u7d20</li> <li><code>CSS</code>\uff1a\u4e86\u89e3 CSS \u5728 HTML \u4e2d\u7684\u4f5c\u7528</li> <li>\u5de5\u5177\uff1a\u4f7f\u7528\u6d4f\u89c8\u5668\u5f00\u53d1\u8005\u6a21\u5f0f\u80fd\u5b9a\u4f4d\u7f51\u9875\u5143\u7d20</li> </ul> </li> <li>Python \u5de5\u5177<ul> <li><code>aiohttp</code>\uff1a\u719f\u6089 aiohttp \u5e93\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u4f1a\u7528aiohttp\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42</li> <li><code>beautifulsoup</code>\uff1a\u4e86\u89e3HTML\u89e3\u6790\u5e93 BeautifulSoup\uff0c\u638c\u63e1\u5982\u4f55\u4f7f\u7528\u5b83\u4eceHTML\u4e2d\u63d0\u53d6\u4fe1\u606f</li> </ul> </li> <li>MetaGPT \u8ba2\u9605\u6a21\u5757</li> <li><code>Role</code>\u3001<code>Trigger</code>\u3001<code>Callback</code>\u7684\u6982\u5ff5</li> <li><code>Trigger</code>\u662f\u4e2a\u5f02\u6b65\u751f\u6210\u5668\uff0c\u53c2\u8003 https://peps.python.org/pep-0525/\uff0c\u77e5\u9053\u5982\u4f55\u5b9e\u73b0\u5373\u53ef</li> </ul> <p>\u5982\u679c\u5bf9\u722c\u866b\u4e0d\u4e86\u89e3\u4e5f\u4e0d\u8981\u7d27\uff0c\u4e0d\u8981\u4f60\u7cbe\u901a\u722c\u866b\uff0c\u6709\u57fa\u672c\u4e86\u89e3\u5373\u53ef\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9ChatGPT \u5e2e\u5fd9\u751f\u6210\u722c\u866b\u4ee3\u7801 </p> <p>\u53e6\u5916\u6559\u7a0b\u6d89\u4e2d\u9700\u8981\u8bbf\u95ee\u5230\u4e00\u4e9b\u56fd\u5916\u7684\u7f51\u7ad9\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u7f51\u7edc\u95ee\u9898\uff0c\u56e0\u4e3a aiohttp \u9ed8\u8ba4\u4e0d\u8d70\u7cfb\u7edf\u4ee3\u7406\uff0c\u6240\u4ee5\u9700\u8981\u505a\u4e0b\u4ee3\u7406\u914d\u7f6e\u3002MetaGPT\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86<code>GLOBAL_PROXY</code>\u53c2\u6570\u7528\u6765\u8868\u793a\u5168\u5c40\u4ee3\u7406\u914d\u7f6e\uff0c\u6559\u7a0b\u4e2d\u9047\u5230\u4f7f\u7528<code>aiohttp</code>\u8fdb\u884c\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u90fd\u4f1a\u5c06\u4ee3\u7406\u8bbe\u7f6e\u4e3a<code>GLOBAL_PROXY</code>\u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5728<code>config/key.yaml</code>\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u81ea\u5df1\u4ee3\u7406\u670d\u52a1\u5668\u7684\u914d\u7f6e\uff0c\u4ee5\u89e3\u51b3\u7f51\u7edc\u95ee\u9898\uff1a</p> <pre><code>GLOBAL_PROXY: http://127.0.0.1:8118  # \u6539\u6210\u81ea\u5df1\u7684\u4ee3\u7406\u670d\u52a1\u5668\u5730\u5740\n</code></pre> <p>\u6700\u540e\uff0c\u8fd0\u884c\u793a\u4f8b\u7ae0\u8282\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4ee3\u7801\uff0c\u5982\u679c\u60f3\u5148\u770b\u4e0b\u6574\u4f53\u7684\u8fd0\u884c\u6548\u679c\uff0c\u53ef\u4ee5\u8fd0\u884c\u793a\u4f8b\u7684main.py\u6587\u4ef6</p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3622","title":"3.6.2.2 \u6559\u7a0b\u76ee\u6807","text":"<p>\u901a\u8fc7\u672c\u6559\u7a0b\u4f60\u53ef\u4ee5\uff1a</p> <ol> <li>\u5b66\u4e60 MetaGPT \u8ba2\u9605\u6a21\u5757\u7684\u4f7f\u7528 </li> <li>\u5b9e\u73b0\u4e00\u4e2a\u5c5e\u4e8e\u81ea\u5df1\u7684\u8ba2\u9605\u667a\u80fd\u4f53</li> </ol>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#363-oss","title":"3.6.3 OSS \u8ba2\u9605\u667a\u80fd\u4f53\u5b9e\u73b0","text":"<p>\u8ba2\u9605\u667a\u80fd\u4f53\u7684\u5b9e\u73b0\u4e3b\u8981\u6709 3 \u4e2a\u8981\u7d20\uff0c\u5206\u522b\u662f Role\u3001Trigger\u3001Callback\uff0c\u5373\u667a\u80fd\u4f53\u672c \u8eab\u3001\u89e6\u53d1\u5668\u3001\u6570\u636e\u56de\u8c03\u3002\u6211\u4eec\u5148\u62c6\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u5de5\u4f5c\uff1a</p> <ol> <li>\u5b9e\u73b0\u4e00\u4e2a OSSWatcher \u7684 Role\uff1aOSS \u5373 Open source software\uff0c\u6211\u4eec\u5bf9OSS \u667a\u80fd\u4f53\u5b9a\u4f4d\u662f\uff0c\u5e2e\u6211\u4eec\u5173\u6ce8\u5e76\u5206\u6790\u70ed\u95e8\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5f53\u6709\u76f8\u5173\u4fe1\u606f\u65f6\u5c06\u4fe1\u606f\u63a8\u9001\u7ed9\u6211\u4eec\uff0c\u8fd9\u91cc\u9700\u8981\u786e\u5b9a\u8ba9 OSS \u4ece\u54ea\u4e2a\u7f51\u9875\u83b7\u53d6\u4fe1\u606f</li> <li>\u89e6\u53d1 Trigger\uff1a\u6307\u8fd9\u4e2a OSSWatcher \u89d2\u8272\u8fd0\u884c\u7684\u89e6\u53d1\u6761\u4ef6\uff0c\u53ef\u4ee5\u662f\u5b9a\u65f6\u89e6\u53d1\u6216\u8005 \u662f\u67d0\u4e2a\u7f51\u7ad9\u6709\u66f4\u65b0\u65f6\u89e6\u53d1</li> <li>\u7ed3\u679c Callback\uff1a\u5904\u7406 OSSWatcher \u89d2\u8272\u8fd0\u884c\u751f\u6210\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u53d1\u9001\u5230\u5fae\u4fe1\u6216\u8005 discord\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u5730\u8fdb\u884c\u5b9e\u73b0</li> </ol>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#364-osswatcher-role","title":"3.6.4 OSSWatcher Role \u5b9e\u73b0","text":""},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3641","title":"3.6.4.1 \u57fa\u672c\u5206\u6790","text":"<p>\u5b9e\u73b0OSSWatcher\u7684Role\u524d\uff0c\u9700\u8981\u5148\u786e\u5b9a\u6211\u4eec\u8981 OSSWatcher \u505a\u54ea\u4e9b\u4e8b\u60c5\uff0c\u5373\u9700\u8981\u5b9e\u73b0\u54ea\u4e9b Action\uff0c\u8981\u5206\u6790\u70ed\u95e8\u5f00\u6e90\u9879\u76ee\uff0c\u9700\u8981\u5148\u83b7\u53d6\u70ed\u95e8\u5f00\u6e90\u9879\u76ee\u4fe1\u606f\uff0c\u6240\u4ee5OSSWatcher\u53ef\u4ee5\u62c6\u5206\u51fa\u4e24\u4e2aAction\uff0c\u722c\u53d6\u70ed\u95e8\u5f00\u6e90\u9879\u76ee\u548c\u5206\u6790\u70ed\u95e8\u5f00\u6e90\u9879\u76ee\u3002</p> <p>\u6211\u4eec\u5148\u786e\u5b9a\u4ece\u54ea\u4e2a\u7f51\u9875\u83b7\u53d6\u4fe1\u606f\uff0c\u8bf4\u5230\u70ed\u95e8\u5f00\u6e90\u9879\u76ee\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u5c31\u662fGitHub Trending\uff0cGithub Trending\u662fGithub\u4e3b\u8981\u677f\u5757\u5b50\u9875\u9762\u4e4b\u4e00\uff0c\u4e3b\u8981\u5c55\u793a\u6307\u5b9a\u65f6\u95f4\u6bb5\u5185Github\u4e0a\u6700\u53d7\u5173\u6ce8\u3001\u70ed\u5ea6\u4e0a\u5347\u7684\u6700\u5feb\u7684\u8d44\u6e90\u5e93\u548c\u5f00\u53d1\u8005\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2aGithub\u7684\u4e00\u4e2a\u8d44\u6e90\u5e93\u548c\u5f00\u53d1\u8005\u300c\u70ed\u641c\u699c\u300d\uff0c\u8d44\u6e90\u5e93\u6309\u7167\u65f6\u95f4\u6bb5\uff08\u6bcf\u5929\u3001\u6bcf\u5468\u3001\u6bcf\u6708\uff09\u5185\u83b7\u5f97\u7684\u661f\u661f\u6570\u91cf\u3001fork\u6570\u7b49\u6307\u6807\u6392\u884c\u3002\u6211\u4eec\u5148\u6253\u5f00 Github Trending \u7684\u7f51\u9875\uff0c\u89c2\u5bdf\u7f51\u9875\u5185\u5bb9\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\uff1a</p> <ul> <li>\u8bbf\u95ee\u94fe\u63a5\uff1ahttps://github.com/trending</li> <li>\u6709\u7b5b\u9009\u6761\u4ef6\uff0c\u4e3b\u8981\u6709</li> <li>spoken language\uff1aen/zh/...</li> <li>language\uff1ahtml/javascript/python/go/java/...</li> <li>since\uff1adaily/weekly/monthly</li> </ul> <p>\u8fd9\u662f\u4e2a\u9759\u6001\u7f51\u9875\uff0c\u8981\u722c\u53d6\u975e\u5e38\u7b80\u5355\uff0c\u5982\u679c\u6709\u9700\u8981\u8fd8\u53ef\u4ee5\u6839\u636e\u6761\u4ef6\u8fdb\u884c\u7b5b\u9009\u3002\u7f51\u9875\u722c\u53d6\u540e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u7f51\u9875\u5185\u5bb9\u8fdb\u884c\u5206\u6790\uff0c\u4f8b\u5982\u4ee5\u4e0b\u7684\u5206\u6790\u89d2\u5ea6</p> <ol> <li>\u7f16\u7a0b\u8bed\u8a00\u8d8b\u52bf\uff1a\u89c2\u5bdfTrending\u5217\u8868\u4e2d\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e86\u89e3\u5f53\u524d\u54ea\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5728\u5f00\u53d1\u8005\u793e\u533a\u4e2d\u66f4\u53d7\u6b22\u8fce</li> <li>\u9879\u76ee\u7c7b\u578b\u548c\u7528\u9014\uff1a\u5206\u6790Trending\u5217\u8868\u4e2d\u7684\u9879\u76ee\uff0c\u770b\u770b\u5b83\u4eec\u662f\u5c5e\u4e8e\u54ea\u4e9b\u7c7b\u522b\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u5177\u4f53\u7528\u9014\u662f\u4ec0\u4e48</li> <li>\u793e\u533a\u6d3b\u8dc3\u5ea6\uff1a\u67e5\u770b\u9879\u76ee\u7684\u661f\u6807\u6570\u91cf\u3001\u8d21\u732e\u8005\u6570\u91cf</li> <li>\u65b0\u5174\u6280\u672f\u548c\u5de5\u5177\uff1a\u6ce8\u610f\u65b0\u9879\u76ee\u548c\u6d8c\u73b0\u7684\u6280\u672f\uff0c\u4ee5\u4fbf\u4e86\u89e3\u5f53\u524d\u7684\u6280\u672f\u8d8b\u52bf</li> </ol> <p>\u4ee5\u4e0a\u662f\u4e00\u4e9b\u6bd4\u8f83\u901a\u7528\u7684\u89d2\u5ea6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u504f\u597d\u8fdb\u884c\u5206\u6790\uff0c\u4f8b\u5982\uff0c\u4e3b\u8981\u5173\u6ce8AI\u9886\u57df\u7684\u4e00\u4e9b\u70ed\u95e8\u9879\u76ee\u3002\u57fa\u4e8e\u4ee5\u4e0a\uff0c\u6211\u4eec\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\uff0c\u6293\u53d6Github Trending\u7f51\u9875\u7684\u4fe1\u606f\uff0c\u7136\u540e\u8ba9LLM\u6839\u636e\u6211\u4eec\u5173\u6ce8\u7684\u89d2\u5ea6\u8fdb\u884c\u5206\u6790\uff0c\u90a3\u4e48\u6211\u4eec\u7684OSSWatcher\u89d2\u8272\u5c31\u5b8c\u6210\u4e86</p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3642-github-trending","title":"3.6.4.2 GitHub Trending \u722c\u53d6","text":"<p>\u6211\u4eec\u5148\u6765\u5b8c\u6210\u7f51\u9875\u722c\u53d6\u7684\u529f\u80fd\uff0c\u6211\u4eec\u6559\u7a0b\u76f4\u63a5\u722c\u53d6\u5f53\u5929\u4e0d\u5206\u56fd\u5bb6\u8bed\u8a00\u548c\u7f16\u7a0b\u8bed\u8a00\u7684\u70ed\u95e8\u4ed3\u5e93\u8fdb\u884c\u5206\u6790\uff0c\u5982\u679c\u6709\u7279\u6b8a\u8981\u6c42\uff0c\u722c\u53d6\u52a0\u4e0a\u7b5b\u9009\u6761\u4ef6\u6761\u4ef6\u540e\u7f51\u9875\u5373\u53ef\u3002\u6211\u4eec\u5148\u6253\u5f00https://github.com/trending \u7f51\u9875\uff0c\u89c2\u5bdf\u7f51\u9875\u5185\u5bb9\uff0c\u627e\u5230\u6211\u4eec\u9700\u8981\u7684\u5185\u5bb9\u5bf9\u5e94\u7684 html \u5143\u7d20\uff0c</p> <p></p> <p>\u5982\u679c\u719f\u6089\u722c\u866b\u7684\u5c31\u53ef\u4ee5\u76f4\u63a5\u5199\u722c\u53d6\u548c\u89e3\u6790\u811a\u672c\u4e86\uff0c\u5982\u679c\u4e0d\u719f\u6089\u7684\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5 \u7528 ChatGPT \u8f85\u52a9\u5f00\u53d1\uff1a \u9996\u5148\u6211\u4eec\u5c06\u56fe\u7247\u6240\u793a\u7684 html \u590d\u5236\u51fa\u6765\uff0c\u4fdd\u5b58\u5230 github-trending-raw.html\uff0c\u683c\u5f0f \u5316\u540e\u53d1\u73b0\u5185\u5bb9\u975e\u5e38\u591a\uff0c\u5927\u6982600\u591ak\uff0c\u8fd8\u6709\u4e00\u4e9bsvg\u6e90\u7801\uff0c\u56e0\u4e3a\u4e00\u822c\u7528CSS\u8db3\u4ee5\u5b9a\u4f4d html\u91cc\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9html\u5185\u5bb9\u8fdb\u884c\u7626\u8eab\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u811a\u672c\uff1a</p> <pre><code>from bs4 import BeautifulSoup\n\nwith open(\"github-trending-raw.html\") as f:\n    html = f.read()\n\nsoup = BeautifulSoup(html, \"html.parser\")\nfor i in soup.find_all(True):\n    for name in list(i.attrs):\n        if i[name] and name not in [\"class\"]:\n            del i[name]\n\nfor i in soup.find_all([\"svg\", \"img\", \"video\", \"audio\"]):\n    i.decompose()\n\nwith open(\"github-trending-slim.html\", \"w\") as f:\n    f.write(str(soup))\n</code></pre> <p>\u7ecf\u8fc7\u4ee5\u4e0a\u7684\u811a\u672c\u5904\u7406\u4e4b\u540e\uff0c\u5927\u6982\u8fd8\u6709100\u591ak\u3002\u5bf9\u4e8e\u722c\u866b\u6765\u8bf4\uff0c\u91cd\u8981\u7684\u662fHtml\u7684\u7ed3\u6784\uff0c\u5904\u7406\u540e\u7684Html\u6587\u4ef6\u5176\u5b9e\u6709\u5927\u91cf\u7684\u4fe1\u606f\u662f\u91cd\u590d\u7684\uff0c\u5982\u679c\u6211\u4eec\u8981\u8ba9GPT\u534f\u52a9\u6211\u4eec\u5199\u722c\u866b\u811a\u672c\uff0c\u53ea\u9700\u8981\u622a\u53d6\u90e8\u5206\u4fe1\u606f\u5c31\u53ef\u4ee5\u4e86\uff0c\u699c\u5355\u4e0a\u670920\u4e2arepo\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u7559\u524d\u4e24\u4e2a</p> <p>\u5220\u51cf\u524d\uff1a</p> <p></p> <p>\u5220\u51cf\u540e:</p> <p></p> <p>\u6b64\u65f6\u5927\u5c0f\u4ec512k\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u7528ChatGPT\u5e2e\u6211\u4eec\u5199\u722c\u53d6\u5206\u6790Github Trending\u7684\u4ee3\u7801\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u7684\u5bf9\u8bdd\uff1a</p> <p>https://chat.openai.com/share/6c8046d3-e363-40bd-9412-8d859e7b3854</p> <p>\u6700\u521d\u7ed9\u51fa\u7684\u4ee3\u7801\u6709\u62a5\u9519\uff0c\u4ee5\u53ca\u8f93\u51fa\u7684Language\u4e3a\u7a7a\uff0c\u901a\u8fc7\u4e24\u6b21\u7684\u5bf9\u8bdd\u8ba9ChatGPT\u8fdb\u884c\u4fee\u590d\uff0c\u6700\u7ec8\u5f97\u5230\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>import aiohttp\nimport asyncio\nfrom bs4 import BeautifulSoup\n\nasync def fetch_html(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            return await response.text()\n\nasync def parse_github_trending(html):\n    soup = BeautifulSoup(html, 'html.parser')\n\n    repositories = []\n\n    for article in soup.select('article.Box-row'):\n        repo_info = {}\n\n        repo_info['name'] = article.select_one('h2 a').text.strip()\n        repo_info['url'] = article.select_one('h2 a')['href'].strip()\n\n        # Description\n        description_element = article.select_one('p')\n        repo_info['description'] = description_element.text.strip() if description_element else None\n\n        # Language\n        language_element = article.select_one('span[itemprop=\"programmingLanguage\"]')\n        repo_info['language'] = language_element.text.strip() if language_element else None\n\n        # Stars and Forks\n        stars_element = article.select('a.Link--muted')[0]\n        forks_element = article.select('a.Link--muted')[1]\n        repo_info['stars'] = stars_element.text.strip()\n        repo_info['forks'] = forks_element.text.strip()\n\n        # Today's Stars\n        today_stars_element = article.select_one('span.d-inline-block.float-sm-right')\n        repo_info['today_stars'] = today_stars_element.text.strip() if today_stars_element else None\n\n        repositories.append(repo_info)\n\n    return repositories\n\nasync def main():\n    url = 'https://github.com/trending'\n    html = await fetch_html(url)\n    repositories = await parse_github_trending(html)\n\n    for repo in repositories:\n        print(f\"Name: {repo['name']}\")\n        print(f\"URL: https://github.com{repo['url']}\")\n        print(f\"Description: {repo['description']}\")\n        print(f\"Language: {repo['language']}\")\n        print(f\"Stars: {repo['stars']}\")\n        print(f\"Forks: {repo['forks']}\")\n        print(f\"Today's Stars: {repo['today_stars']}\")\n        print()\n</code></pre> <p>\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\uff0c\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2aAction\u7c7b</p> <ol> <li>\u5bfc\u5165 </li> </ol> <pre><code>from metagpt.actions.action import Action\nfrom metagpt.config import CONFIG\n</code></pre> <ol> <li>\u53c2\u8003\u7b2c\u4e09\u7ae01.2.2\u8bbe\u8ba1 action\u7684\u5f02\u6b65run\u65b9\u6cd5</li> </ol> <p>a. \u521b\u5efa aiohttp.ClientSession \u5bf9\u8c61: \u4f7f\u7528 <code>async with</code> \u8bed\u53e5\u521b\u5efa aiohttp.ClientSession \u5bf9\u8c61\uff0c\u7528\u4e8e\u53d1\u9001 HTTP \u8bf7\u6c42\u3002</p> <p>b. \u53d1\u9001 GET \u8bf7\u6c42: \u4f7f\u7528 <code>client.get()</code> \u65b9\u6cd5\u53d1\u9001 GET \u8bf7\u6c42\uff0c\u5e76\u6307\u5b9a\u8981\u8bbf\u95ee\u7684 URL\u3002</p> <p>c. \u8bbe\u7f6e\u4ee3\u7406: \u901a\u8fc7 <code>proxy=CONFIG.global_proxy</code> \u53c2\u6570\u8bbe\u7f6e\u5168\u5c40\u4ee3\u7406\u670d\u52a1\u5668\u3002</p> <p>d. \u68c0\u67e5\u54cd\u5e94\u72b6\u6001: \u4f7f\u7528 <code>response.raise_for_status()</code> \u65b9\u6cd5\u68c0\u67e5\u54cd\u5e94\u72b6\u6001\uff0c\u5982\u679c\u72b6\u6001\u7801\u4e0d\u4e3a 200\uff0c\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002</p> <p>e. \u8bfb\u53d6\u54cd\u5e94\u5185\u5bb9: \u4f7f\u7528 <code>await response.text()</code> \u65b9\u6cd5\u8bfb\u53d6\u54cd\u5e94\u5185\u5bb9\u5e76\u5c06\u5176\u5b58\u50a8\u5728 <code>html</code> \u53d8\u91cf\u4e2d\u3002</p> <p>f. \u8fd4\u56de HTML \u5185\u5bb9: \u5c06\u83b7\u53d6\u5230\u7684 HTML \u5185\u5bb9\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002</p> <pre><code>async def run(self, url: str = \"https://github.com/trending\"):\n    async with aiohttp.ClientSession() as client:\n        async with client.get(url, proxy=CONFIG.global_proxy) as response:\n            response.raise_for_status()\n            html = await response.text()\n</code></pre> <ol> <li>\u5728\u65b9\u6cd5\u4e2d\u5c06\u5148\u524d\u7684parse_github_trending(html)\u65b9\u6cd5\u642c\u8fd0\u5230action\u4e2d\u7528repositories\u505a\u8fd4\u56de\u503c</li> </ol> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import aiohttp\nfrom bs4 import BeautifulSoup\nfrom metagpt.actions.action import Action\nfrom metagpt.config import CONFIG\n\nclass CrawlOSSTrending(Action):\n\n    async def run(self, url: str = \"https://github.com/trending\"):\n        async with aiohttp.ClientSession() as client:\n            async with client.get(url, proxy=CONFIG.global_proxy) as response:\n                response.raise_for_status()\n                html = await response.text()\n\n        soup = BeautifulSoup(html, 'html.parser')\n\n        repositories = []\n\n        for article in soup.select('article.Box-row'):\n            repo_info = {}\n\n            repo_info['name'] = article.select_one('h2 a').text.strip().replace(\"\\n\", \"\").replace(\" \", \"\")\n            repo_info['url'] = \"https://github.com\" + article.select_one('h2 a')['href'].strip()\n\n            # Description\n            description_element = article.select_one('p')\n            repo_info['description'] = description_element.text.strip() if description_element else None\n\n            # Language\n            language_element = article.select_one('span[itemprop=\"programmingLanguage\"]')\n            repo_info['language'] = language_element.text.strip() if language_element else None\n\n            # Stars and Forks\n            stars_element = article.select('a.Link--muted')[0]\n            forks_element = article.select('a.Link--muted')[1]\n            repo_info['stars'] = stars_element.text.strip()\n            repo_info['forks'] = forks_element.text.strip()\n\n            # Today's Stars\n            today_stars_element = article.select_one('span.d-inline-block.float-sm-right')\n            repo_info['today_stars'] = today_stars_element.text.strip() if today_stars_element else None\n\n            repositories.append(repo_info)\n\n        return repositories\n</code></pre>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3643-github-trending","title":"3.6.4.3 GitHub Trending \u603b\u7ed3","text":"<p>\u7f51\u9875\u722c\u53d6\u7684Action\u5b9e\u73b0\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba9LLM\u57fa\u4e8e\u722c\u53d6\u7684\u7f51\u9875\u5185\u5bb9\u8fdb\u884c\u5206\u6790\u4e86\uff0c\u8fd9\u4e2a Action\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u5199\u63d0\u793a\u8bcd\uff0c\u5728\u63d0\u793a\u8bcd\u4e2d\u6211\u4eec\u53ef\u4ee5\u8981\u6c42LLM\u4ece\u51e0\u4e2a\u89d2\u5ea6\u8fdb \u884c\u5206\u6790\uff0c\u5e76\u6309\u7167\u4e00\u5b9a\u7684\u683c\u5f0f\u8fdb\u884c\u8f93\u51fa\uff0c\u4f8b\u5982</p> <ol> <li>\u4eca\u5929\u699c\u5355\u7684\u6574\u4f53\u8d8b\u52bf\uff0c\u4f8b\u5982\u54ea\u51e0\u4e2a\u7f16\u7a0b\u8bed\u8a00\u6bd4\u8f83\u70ed\u95e8\u3001\u6700\u70ed\u95e8\u7684\u9879\u76ee\u662f\u54ea\u4e9b\u3001\u4e3b    \u8981\u96c6\u4e2d\u5728\u54ea\u4e9b\u9886\u57df</li> <li>\u699c\u5355\u7684\u4ed3\u5e93\u5206\u7c7b</li> <li>\u63a8\u8350\u8fdb\u4e00\u6b65\u5173\u6ce8\u54ea\u4e9b\u4ed3\u5e93\uff0c\u63a8\u8350\u539f\u56e0\u662f\u4ec0\u4e48</li> </ol> <pre><code>from typing import Any\nfrom metagpt.actions.action import Action\n\nTRENDING_ANALYSIS_PROMPT = \"\"\"# Requirements\nYou are a GitHub Trending Analyst, aiming to provide users with insightful and personalized recommendations based on the latest\nGitHub Trends. Based on the context, fill in the following missing information, generate engaging and informative titles, \nensuring users discover repositories aligned with their interests.\n\n# The title about Today's GitHub Trending\n## Today's Trends: Uncover the Hottest GitHub Projects Today! Explore the trending programming languages and discover key domains capturing developers' attention. From ** to **, witness the top projects like never before.\n## The Trends Categories: Dive into Today's GitHub Trending Domains! Explore featured projects in domains such as ** and **. Get a quick overview of each project, including programming languages, stars, and more.\n## Highlights of the List: Spotlight noteworthy projects on GitHub Trending, including new tools, innovative projects, and rapidly gaining popularity, focusing on delivering distinctive and attention-grabbing content for users.\n---\n# Format Example\n\n```\n# [Title]\n\n## Today's Trends\nToday, ** and ** continue to dominate as the most popular programming languages. Key areas of interest include **, ** and **.\nThe top popular projects are Project1 and Project2.\n\n## The Trends Categories\n1. Generative AI\n    - [Project1](https://github/xx/project1): [detail of the project, such as star total and today, language, ...]\n    - [Project2](https://github/xx/project2): ...\n...\n\n## Highlights of the List\n1. [Project1](https://github/xx/project1): [provide specific reasons why this project is recommended].\n...\n```\n\n---\n# Github Trending\n{trending}\n\"\"\"\n\nclass AnalysisOSSTrending(Action):\n\n    async def run(\n        self,\n        trending: Any\n    ):\n        return await self._aask(TRENDING_ANALYSIS_PROMPT.format(trending=trending))\n</code></pre>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3644-osswatcher-role","title":"3.6.4.4 OSSWatcher Role \u5b9e\u73b0","text":"<p>\u4ee5\u4e0a Action \u90fd\u5b9e\u73b0\u4e86\uff0c\u628a\u5b83\u4eec\u90fd\u5199\u5230 metagpt/actions/oss_trending.py \u6587\u4ef6 \u4e2d\uff0c\u7136\u540e\u65b0\u5efa\u6587\u4ef6 metagpt/roles/oss_watcher.py\uff0c\u5c31\u53ef\u4ee5\u5199 Role \u7684\u4ee3\u7801\u4e86\uff1a</p> <pre><code>from metagpt.actions.oss_trending import CrawlOSSTrending, AnalysisOSSTrending\nfrom metagpt.roles import Role\n\nclass OssWatcher(Role):\n    def __init__(\n        self,\n        name=\"Codey\",\n        profile=\"OssWatcher\",\n        goal=\"Generate an insightful GitHub Trending analysis report.\",\n        constraints=\"Only analyze based on the provided GitHub Trending data.\",\n    ):\n        super().__init__(name, profile, goal, constraints)\n        self._init_actions([CrawlOSSTrending, AnalysisOSSTrending])\n        self._set_react_mode(react_mode=\"by_order\")\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self._rc.todo}\")\n        # By choosing the Action by order under the hood\n        # todo will be first SimpleWriteCode() then SimpleRunCode()\n        todo = self.rc.todo\n\n        msg = self.get_memories(k=1)[0] # find the most k recent messages\n        result = await todo.run(msg.content)\n\n        msg = Message(content=str(result), role=self.profile, cause_by=type(todo))\n        self._rc.memory.add(msg)\n        return msg\n</code></pre>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#365-trigger","title":"3.6.5 Trigger \u5b9e\u73b0","text":"<p>Trigger\u5373\u89e6\u53d1\u5668\uff0c\u4ee3\u8868\u4e86OSSWatcher\u89d2\u8272\u7684\u6267\u884c\u65f6\u673a\uff0c\u6700\u7b80\u5355\u7684\u89e6\u53d1\u65b9\u5f0f\u5373\u5b9a\u65f6\u89e6\u53d1\u3002Github Trending\u4e0d\u662f\u5b9e\u65f6\u66f4\u65b0\u7684\uff0c\u53c2\u8003https://github.com/orgs/community/discussions/64295\uff0c\u5927\u7ea6\u662f\u572810:00 AM UTC\uff0c\u5b9e\u6d4b\u66f4\u65b0\u65f6\u95f4\u4e0d\u662f\u5f88\u51c6\u65f6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e00\u5929\u89e6\u53d1\u4e00\u6b21\uff0c\u9009\u53d6\u4e00\u4e2a\u6bd4\u8f83\u9002\u5408\u81ea\u5df1\u7684\u63a8\u9001\u65f6\u95f4\u5373\u53ef\uff0c\u6bd4\u5982\u6bcf\u5929\u65e9\u4e0a9\u70b9</p> <p>\u4ee5\u4e0b\u63d0\u4f9b\u4e00\u4e2a\u5b9a\u65f6Trigger\u7684\u5b9e\u73b0\uff0c\u8981\u8fbe\u5230\u5b9a\u65f6\u7684\u76ee\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528asyncio.sleep\uff0c\u4f8b\u5982\uff1a</p> <pre><code>import asyncio\nimport time\n\nfrom datetime import datetime, timedelta\nfrom metagpt.schema import Message\nfrom pydantic import BaseModel, Field\n\n\nclass OssInfo(BaseModel):\n    url: str\n    timestamp: float = Field(default_factory=time.time)\n\n\nasync def oss_trigger(hour: int, minute: int, second: int = 0, url: str = \"https://github.com/trending\"):\n    while True:\n        now = datetime.now()\n        next_time = datetime(now.year, now.month, now.day, hour, minute, second)\n        if next_time &lt; now:\n            next_time = next_time + timedelta(1)\n        wait = next_time - now\n        print(wait.total_seconds())\n        await asyncio.sleep(wait.total_seconds())\n        yield Message(url, OssInfo(url=url))\n</code></pre> <p>yield \u8bed\u53e5\u88ab\u7528\u4e8e\u5f02\u6b65\u51fd\u6570\"oss_trigger\"\u4e2d\uff0c\u7528\u4e8e\u751f\u6210\u6d88\u606f\u3002\u6bcf\u5f53\u8c03\u7528\u8fd9\u4e2a\u5f02\u6b65\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u5185\u751f\u6210\u4e00\u4e2a\u6d88\u606f\uff0c\u5e76\u5728\u4e0b\u4e00\u6b21\u8c03\u7528\u65f6\u7ee7\u7eed\u6267\u884c\u3002\u6b64\u5904\u6211\u4eec\u9884\u5b9a\u4e49\u4e86<code>OssInfo</code>\u7684\u7ed3\u6784\uff0c\u52a0\u5165\u4e86\u65f6\u95f4\u6233\u7684\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u5b9e\u4f8b\u4f5c\u4e3atrigger\u751f\u6210\u7684<code>Message</code>\u7684<code>instruct_content</code>\u5c5e\u6027\uff0c\u4f5c\u7528\u662f\u5728\u65e9\u671f\u7684\u7248\u672c\u4e2d\uff0c\u89d2\u8272\u5728\u63a5\u6536Message\u4f1a\u6709\u4e00\u4e2a\u53bb\u91cd\u64cd\u4f5c\uff0c\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u751f\u6210\u7684<code>Message</code>\u53ea\u6709url\u4fe1\u606f\uff0c\u90a3\u4e48\u7b2c2\u6b21\u8fd0\u884c\u65f6\uff0c\u89d2\u8272\u5c06\u4e0d\u4f1a\u63a5\u6536\u65b0\u7684<code>Message</code>\uff0c\u4f46\u662f\u52a0\u5165\u65f6\u95f4\u6233\u540e\uff0ctrigger\u751f\u6210\u7684\u6bcf\u4e2a<code>Message</code>\u5c31\u4e0d\u518d\u76f8\u7b49\uff0c\u89d2\u8272\u4e5f\u4f1a\u63a5\u6536\u5bf9\u5e94\u7684<code>Message</code></p> <p>\u4e0a\u8ff0\u7684\u7b80\u5355\u4f8b\u5b50\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7b80\u5355\u7684\u6309\u5929\u5b9a\u65f6\u89e6\u53d1\u7684\u80fd\u529b\uff0c\u4e0d\u8fc7\u5982\u679c\u9700\u8981\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236\uff0c\u8fd9\u4e2a\u51fd\u6570\u8fd8\u9700\u8981\u7ee7\u7eed\u4f18\u5316\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5305\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f7f\u7528crontab\u5b9e\u73b0\u5b9a\u65f6\u89e6\u53d1\u662f\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u4e2a\u505a\u6cd5\uff0c\u800c\u4e14python\u4e5f\u6709\u4e00\u4e2a\u5f02\u6b65\u7684cron\u5de5\u5177\uff0c\u5373<code>aiocron</code>\uff0c\u4f7f\u7528<code>aiocron</code>\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528cron\u7684\u8bed\u6cd5\u5236\u5b9a\u5b9a\u65f6\u4efb\u52a1\u3002\u4e0a\u9762\u6211\u4eec\u4f7f\u7528\u4e86\u51fd\u6570\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u4e86\u5b9a\u65f6Trigger\u5f02\u6b65\u751f\u6210\u5668\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u7ed3\u5408<code>aiocron</code>\u4f7f\u7528\u7c7b\u7684\u65b9\u5f0f\uff0c\u6765\u5b9e\u73b0\u5b9a\u65f6Trigger</p> <pre><code>import time\nfrom aiocron import crontab\nfrom typing import Optional\nfrom pytz import BaseTzInfo\nfrom pydantic import BaseModel, Field\nfrom metagpt.schema import Message\n\nclass GithubTrendingCronTrigger:\n    def __init__(\n        self,\n        spec: str,\n        tz: Optional[BaseTzInfo] = None,\n        url: str = \"https://github.com/trending\",\n    ) -&gt; None:\n        self.crontab = crontab(spec, tz=tz)\n        self.url = url\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        await self.crontab.next()\n        return Message(content=self.url)\n</code></pre> <p><code>\u57fa\u4e8eaiocron</code>\u6211\u4eec\u53ef\u4ee5\u5c11\u5199\u5f88\u591a\u4ee3\u7801\uff0c\u529f\u80fd\u4e5f\u66f4\u52a0\u5f3a\u5927\uff0c\u53ef\u4ee5\u7528cron\u8bed\u6cd5\u975e\u5e38\u7075\u6d3b\u5730\u914d\u7f6e\u5b9a\u65f6\u89c4\u5219 \u5982\u679c\u60a8\u60f3\u6307\u5b9aUTC \u65f6\u95f4 10:00 AM \u89e6\u53d1</p> <pre><code># \u521b\u5efa GithubTrendingCronTrigger \u5b9e\u4f8b\uff0c\u6307\u5b9a\u6bcf\u5929 UTC \u65f6\u95f4 10:00 AM \u89e6\u53d1\ncron_trigger = GithubTrendingCronTrigger(\"0 10 * * *\")\n</code></pre> <p>\u5982\u679c\u60a8\u60f3\u6307\u5b9a\u5317\u4eac\u65f6\u95f4\u4e0a\u53488:00\u6765\u89e6\u53d1\u8fd9\u4e2a\u4efb\u52a1\uff0c\u60a8\u9700\u8981\u505a\u4e24\u4ef6\u4e8b\uff1a</p> <ol> <li>\u8bbe\u7f6e\u6b63\u786e\u7684 cron \u8868\u8fbe\u5f0f\u3002</li> <li>\u786e\u4fdd\u65f6\u533a\u8bbe\u7f6e\u6b63\u786e\u3002</li> </ol> <p>\u5317\u4eac\u65f6\u95f4\u662f\u4e1c\u516b\u533a\uff08UTC+8\uff09\uff0c\u6240\u4ee5\u60a8\u5e94\u8be5\u5728 <code>tz</code> \u53c2\u6570\u4e2d\u8bbe\u7f6e\u76f8\u5e94\u7684\u65f6\u533a\u3002\u800c cron \u8868\u8fbe\u5f0f\u9075\u5faa\u7279\u5b9a\u7684\u683c\u5f0f\uff0c\u901a\u5e38\u662f\uff1a\u5206\u949f\u3001\u5c0f\u65f6\u3001\u65e5\u3001\u6708\u3001\u661f\u671f\u51e0\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u5929\u4e0a\u53488:00\uff0ccron \u8868\u8fbe\u5f0f\u5e94\u8be5\u662f <code>\"0 8 * * *\"</code>\uff0c\u8fd9\u8868\u793a\u6bcf\u5929\u7684\u7b2c8\u5c0f\u65f6\u7684\u7b2c0\u5206\u949f\u89e6\u53d1\u3002</p> <p>\u56e0\u6b64\uff0c\u60a8\u7684 <code>GithubTrendingCronTrigger</code> \u7c7b\u7684\u521d\u59cb\u5316\u4ee3\u7801\u5e94\u8be5\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>from pytz import timezone\nbeijing_tz = timezone('Asia/Shanghai')  \u83b7\u53d6\u5317\u4eac\u65f6\u95f4\u7684\u65f6\u533a\ncron_trigger = GithubTrendingCronTrigger(\"0 8 * * *\", tz=beijing_tz)\n</code></pre> <p>\u601d\u80031\uff1a\u5982\u679c\u9700\u8981\u699c\u5355\u66f4\u65b0\u518d\u63a8\u9001\uff0c\u53ef\u4ee5\u5982\u4f55\u5b9e\u73b0\uff1f</p> <p>\u601d\u80032\uff1aCrontab\u7684\u5b9a\u65f6\u65b9\u5f0f\u53ef\u80fd\u4e0d\u662f\u5f88\u65b9\u4fbf\u8fdb\u884c\u8c03\u8bd5\uff0c\u6709\u4ec0\u4e48\u65b9\u4fbf\u8c03\u8bd5\u7684\u65b9\u6cd5\u5417\uff1f</p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#366-callback","title":"3.6.6 Callback \u8bbe\u8ba1","text":""},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3661","title":"3.6.6.1 \u57fa\u7840\u4ecb\u7ecd","text":"<p>Callback\u5c31\u662f\u5b9a\u4e49\u4e86\u5982\u4f55\u5904\u7406\u667a\u80fd\u4f53\u751f\u6210\u7684\u4fe1\u606f\uff0c\u5b83\u672c\u8eab\u6ca1\u6709\u8fc7\u591a\u96be\u70b9\uff0c\u4f46\u662f\u5982\u679c\u60f3 \u5c06\u4fe1\u606f\u53d1\u9001\u5230\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\u7684\u4e00\u4e9b\u5e94\u7528\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u6210\u672c\u3002\u56e0\u6b64\uff0c\u672c\u6587\u6863\u63d0\u4f9b\u5c06\u667a\u80fd\u4f53\u4ea7\u751f\u7684\u6570\u636e\u53d1\u9001\u5230 discord/\u5fae\u4fe1\u7684\u793a\u4f8b\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u5176\u4e2d Discord \u662f\u4e00\u6b3e\u514d\u8d39\u7684\u901a \u8baf\u8f6f\u4ef6\uff0c\u8ba9\u4f60\u53ef\u4ee5\u4e0e\u4f60\u7684\u597d\u53cb\uff0c\u793e\u7fa4\u4ee5\u53ca\u5f00\u53d1\u8005\u4eec\u8fdb\u884c\u8bed\u97f3\uff0c\u89c6\u9891\u53ca\u6587\u5b57\u804a\u5929\u3002\u76ee\u524d\uff0cMetaGPT\u7684\u6d77\u5916\u793e\u533a\u5c31\u662f\u5728 Discord\u4e0a\u7ef4\u62a4\u7684\uff0c\u5728\u56fd\u5185\uff0cMetaGPT\u4e5f\u6709\u5e9e\u5927\u7684 \u5fae\u4fe1\u793e\u533a\uff0c\u6240\u4ee5\u672c\u6587\u6863\u9009\u53d6\u76ee\u524dMetaGPT\u6bd4\u8f83\u6d3b\u8dc3\u7684\u4e24\u4e2a\u793e\u533a\u5de5\u5177\u4f5c\u4e3a\u793a\u4f8b\uff0c\u5176\u4ed6 \u5de5\u5177\u540c\u7406</p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3662-discord","title":"3.6.6.2 Discord","text":"<p>\u524d\u7f6e\u8981\u6c42\uff1a\u6ce8\u518c\u8d26\u53f7\u3001\u5728discord\u7684\u5f00\u53d1\u8005\u9762\u677f\u6dfb\u52a0BOT\uff0c\u5e76\u5c06BOT\u6dfb\u52a0\u5230\u67d0\u4e2a\u670d\u52a1\u5668\u4e2d\uff0c\u53c2\u8003https://discordpy.readthedocs.io/en/stable/discord.html</p> <p>\u4f7f\u7528discord\u53d1\u9001\u6d88\u606f\u7684\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>import asyncio\nimport discord\n\n\nasync def send_discord_msg(channel_id: int, msg: str, token: str):\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = discord.Client(intents=intents)\n    async with client:\n        await client.login(token)\n        channel = await client.fetch_channel(channel_id)\n        await channel.send(msg)\n</code></pre> <p>\u4e0d\u8fc7discord\u5355\u6761\u6d88\u606f\u6709\u5927\u5c0f\u9650\u5236\uff0c\u8fc7\u957f\u7684\u5185\u5bb9\u4f1a\u5bfc\u81f4\u53d1\u9001\u4e0d\u6210\u529f\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7ae0\u8282\u5206\u591a\u6761msg\u53d1\u9001\uff0c\u6700\u7ec8\u5b9e\u73b0\u7684<code>discord_callback</code>\u51fd\u6570\u5982\u4e0b\uff1a</p> <pre><code>import asyncio\nimport discord\n\nfrom metagpt.config import CONFIG\n\n\nasync def discord_callback(msg: Message):\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = discord.Client(intents=intents, proxy=CONFIG.global_proxy)\n    token = os.environ[\"DISCORD_TOKEN\"]\n    channel_id = int(os.environ[\"DISCORD_CHANNEL_ID\"])\n    async with client:\n        await client.login(token)\n        channel = await client.fetch_channel(channel_id)\n        lines = []\n        for i in msg.content.splitlines():\n            if i.startswith((\"# \", \"## \", \"### \")):\n                if lines:\n                    await channel.send(\"\\n\".join(lines))\n                    lines = []\n            lines.append(i)\n\n        if lines:\n            await channel.send(\"\\n\".join(lines))\n</code></pre> <p>**DISCORD_TOKEN**\u53c2\u8003\u5b98\u65b9\u6587\u6863discord readthedocs\uff0c\"Creating a Bot Account\"\u7ae0\u8282\u7684\u7b2c7\u6b65\uff1a</p> <p></p> <p>DISCORD_CHANNEL_ID\u5373\u5e0c\u671bBot\u53d1\u9001\u6d88\u606f\u7684\u9891\u9053\uff0c\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#3663-wechat","title":"3.6.6.3 Wechat","text":"<p>\u4e4b\u524dMetaGPT\u6709\u5c1d\u8bd5\u901a\u8fc7\u5fae\u4fe1\u673a\u5668\u4eba\u540c\u6b65\u4e0d\u540c\u793e\u533a\u7fa4\u7684\u6d88\u606f\uff0c\u4e0d\u8fc7\u7531\u4e8e\u5f15\u8d77\u4e86\u8fc7\u5927\u7684\u8ba8\u8bba\uff0c\u6700\u7ec8\u5173\u95ed\u4e86\u8be5\u529f\u80fd\uff0c\u5f53\u65f6\u662f\u4f7f\u7528wechaty\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u4f7f\u7528\u8be5\u65b9\u5f0f\u8f83\u4e3a\u7e41\u7410\uff0c\u800c\u4e14\u7531\u4e8e\u6211\u4eec\u7684\u5185\u5bb9\u662fmarkdown\u683c\u5f0f\u7684\uff0c\u76f4\u63a5\u53d1\u9001\u5fae\u4fe1\u6d88\u606f\u9605\u8bfb\u4f53\u9a8c\u8f83\u5dee\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bfb\u627e\u5408\u9002\u7684\u5fae\u4fe1\u6d88\u606f\u53d1\u9001\u65b9\u5f0f\u3002\u516c\u4f17\u53f7\u53ef\u4ee5\u53d1\u9001\u5bcc\u672c\u6587\u6d88\u606f\uff0c\u6bd4\u8f83\u7b26\u5408\u6211\u4eec\u7684\u573a\u666f\uff0c\u4f46\u662f\u4e3a\u4e86\u4e2a\u63a8\u9001\u7684\u529f\u80fd\uff0c\u5f00\u53d1\u4e2a\u516c\u4f17\u53f7\u7684\u6210\u672c\u4e5f\u662f\u6bd4\u8f83\u5927\uff0c\u4f46\u662f\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5df2\u6709\u7684\u4e00\u4e2a\u516c\u4f17\u53f7\u7ed9\u6211\u4eec\u53d1\u9001\u6d88\u606f\uff0c\u90a3\u5b9e\u73b0\u5c06\u4f1a\u975e\u5e38\u7b80\u5355\u3002\u867d\u7136\u5fae\u4fe1\u5b98\u65b9\u6ca1\u6709\u63d0\u4f9b\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5df2\u6709\u8bb8\u591a\u7684\u7b2c\u4e09\u65b9\u516c\u4f17\u53f7\u63d0\u4f9b\u4e86\u6d88\u606f\u63a8\u9001\u7684\u529f\u80fd\uff0c\u4f8b\u5982server\u9171\u3001wxpusher\u3001Pushplus\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4e4b\u4e00\uff0c\u4f8b\u5982wxpusher\uff0c\u5b83\u7684\u4ee3\u7801\u662f\u5f00\u6e90\u7684\uff0c\u4e5f\u6709\u8be6\u7ec6\u7684\u6587\u6863\uff0c\u5f00\u53d1\u6587\u6863\u89c1\uff1ahttps://wxpusher.zjiecode.com/docs/#/</p> <p>wxpusher\u867d\u7136\u6709python\u5ba2\u6237\u7aef\uff0c\u4f46\u662f\u662f\u540c\u6b65\u7684\uff0c\u4f46\u6211\u4eec\u6839\u636eAPI\u6587\u6863\uff0c\u53ef\u4ee5\u5feb\u901f\u7b80\u5355\u5730\u5b9e\u73b0\u4e00\u4e2a\u5f02\u6b65\u7684\u5ba2\u6237\u7aef\uff1a</p> <pre><code>import os\nfrom typing import Optional\nimport aiohttp\n\n\nclass WxPusherClient:\n    def __init__(self, token: Optional[str] = None, base_url: str = \"http://wxpusher.zjiecode.com\"):\n        self.base_url = base_url\n        self.token = token or os.environ[\"WXPUSHER_TOKEN\"]\n\n    async def send_message(\n        self,\n        content,\n        summary: Optional[str] = None,\n        content_type: int = 1,\n        topic_ids: Optional[list[int]] = None,\n        uids: Optional[list[int]] = None,\n        verify: bool = False,\n        url: Optional[str] = None,\n    ):\n        payload = {\n            \"appToken\": self.token,\n            \"content\": content,\n            \"summary\": summary,\n            \"contentType\": content_type,\n            \"topicIds\": topic_ids or [],\n            \"uids\": uids or os.environ[\"WXPUSHER_UIDS\"].split(\",\"),\n            \"verifyPay\": verify,\n            \"url\": url,\n        }\n        url = f\"{self.base_url}/api/send/message\"\n        return await self._request(\"POST\", url, json=payload)\n\n    async def _request(self, method, url, **kwargs):\n        async with aiohttp.ClientSession() as session:\n            async with session.request(method, url, **kwargs) as response:\n                response.raise_for_status()\n                return await response.json()\n</code></pre> <p>\u7136\u540e\u5b9e\u73b0callback\uff1a</p> <pre><code>async def wxpusher_callback(msg: Message):\n    client = WxPusherClient()\n    await client.send_message(msg.content, content_type=3)\n</code></pre> <p>**WXPUSHER_TOKEN**\u5373wxpush\u7684APP_TOKEN\uff0c\u53c2\u8003\u5b98\u65b9\u6587\u6863\u83b7\u53d6appToken</p> <p></p> <p>**WXPUSHER_UIDS**\u53ef\u4ee5\u4ece\u5e94\u7528\u7ba1\u7406\u9875\u7684\u201d\u7528\u6237\u7ba1\u7406-&gt;\u7528\u6237\u5217\u8868\u201c\u83b7\u53d6\u7528\u6237\u7684UID\uff0c\u5982\u679c\u8981\u53d1\u9001\u7ed9\u591a\u4e2a\u7528\u6237\uff0c\u53ef\u4ee5\u7528\u9017\u53f7\u5c06\u4e0d\u540c\u7528\u6237UID\u9694\u5f00</p> <p></p>"},{"location":"chapter3/%E5%8D%95%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8BOSS-%E8%AE%A2%E9%98%85%E6%99%BA%E8%83%BD%E4%BD%93/#367","title":"3.6.7 \u8fd0\u884c\u793a\u4f8b","text":"<p>\u4ee5\u4e0a\u57fa\u7840\u7684\u4ee3\u7801\u90fd\u5f00\u53d1\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u8981\u8fd0\u884c\u4e86\uff0c\u8003\u8651\u5230\u4e3a\u4e86\u80fd\u591f\u5728\u8ba9\u4e0a\u9762\u7684\u4ee3\u7801\u5185\u5bb9\u80fd\u591f\u8fde\u8d2f\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u5199\u5728\u4e00\u4e2amain.py\u6587\u4ef6\u91cc\uff0c\u5e76\u8fdb\u884c\u56de\u987e\uff1a</p> <p>\uff08\u5b8c\u6574\u4ee3\u7801\u4e0b\u8f7d\uff1apython\u7248main.py|notebook\u7248main.ipynb\uff09</p> <pre><code>import asyncio\nimport os\nfrom typing import Any, AsyncGenerator, Awaitable, Callable, Dict, Optional\n\nimport aiohttp\nimport discord\nfrom aiocron import crontab\nfrom bs4 import BeautifulSoup\nfrom pydantic import BaseModel, Field\nfrom pytz import BaseTzInfo\n\nfrom metagpt.actions.action import Action\nfrom metagpt.config import CONFIG\nfrom metagpt.logs import logger\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\n\n# fix SubscriptionRunner not fully defined\nfrom metagpt.environment import Environment as _  # noqa: F401\n\n\n# \u8ba2\u9605\u6a21\u5757\uff0c\u53ef\u4ee5from metagpt.subscription import SubscriptionRunner\u5bfc\u5165\uff0c\u8fd9\u91cc\u8d34\u4e0a\u4ee3\u7801\u4f9b\u53c2\u8003\nclass SubscriptionRunner(BaseModel):\n    \"\"\"A simple wrapper to manage subscription tasks for different roles using asyncio.\n    Example:\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; from metagpt.subscription import SubscriptionRunner\n        &gt;&gt;&gt; from metagpt.roles import Searcher\n        &gt;&gt;&gt; from metagpt.schema import Message\n        &gt;&gt;&gt; async def trigger():\n        ...     while True:\n        ...         yield Message(\"the latest news about OpenAI\")\n        ...         await asyncio.sleep(3600 * 24)\n        &gt;&gt;&gt; async def callback(msg: Message):\n        ...     print(msg.content)\n        &gt;&gt;&gt; async def main():\n        ...     pb = SubscriptionRunner()\n        ...     await pb.subscribe(Searcher(), trigger(), callback)\n        ...     await pb.run()\n        &gt;&gt;&gt; asyncio.run(main())\n    \"\"\"\n\n    tasks: Dict[Role, asyncio.Task] = Field(default_factory=dict)\n\n    class Config:\n        arbitrary_types_allowed = True\n\n    async def subscribe(\n        self,\n        role: Role,\n        trigger: AsyncGenerator[Message, None],\n        callback: Callable[\n            [\n                Message,\n            ],\n            Awaitable[None],\n        ],\n    ):\n        \"\"\"Subscribes a role to a trigger and sets up a callback to be called with the role's response.\n        Args:\n            role: The role to subscribe.\n            trigger: An asynchronous generator that yields Messages to be processed by the role.\n            callback: An asynchronous function to be called with the response from the role.\n        \"\"\"\n        loop = asyncio.get_running_loop()\n\n        async def _start_role():\n            async for msg in trigger:\n                resp = await role.run(msg)\n                await callback(resp)\n\n        self.tasks[role] = loop.create_task(_start_role(), name=f\"Subscription-{role}\")\n\n    async def unsubscribe(self, role: Role):\n        \"\"\"Unsubscribes a role from its trigger and cancels the associated task.\n        Args:\n            role: The role to unsubscribe.\n        \"\"\"\n        task = self.tasks.pop(role)\n        task.cancel()\n\n    async def run(self, raise_exception: bool = True):\n        \"\"\"Runs all subscribed tasks and handles their completion or exception.\n        Args:\n            raise_exception: _description_. Defaults to True.\n        Raises:\n            task.exception: _description_\n        \"\"\"\n        while True:\n            for role, task in self.tasks.items():\n                if task.done():\n                    if task.exception():\n                        if raise_exception:\n                            raise task.exception()\n                        logger.opt(exception=task.exception()).error(\n                            f\"Task {task.get_name()} run error\"\n                        )\n                    else:\n                        logger.warning(\n                            f\"Task {task.get_name()} has completed. \"\n                            \"If this is unexpected behavior, please check the trigger function.\"\n                        )\n                    self.tasks.pop(role)\n                    break\n            else:\n                await asyncio.sleep(1)\n\n\n# Actions \u7684\u5b9e\u73b0\nTRENDING_ANALYSIS_PROMPT = \"\"\"# Requirements\nYou are a GitHub Trending Analyst, aiming to provide users with insightful and personalized recommendations based on the latest\nGitHub Trends. Based on the context, fill in the following missing information, generate engaging and informative titles, \nensuring users discover repositories aligned with their interests.\n\n# The title about Today's GitHub Trending\n## Today's Trends: Uncover the Hottest GitHub Projects Today! Explore the trending programming languages and discover key domains capturing developers' attention. From ** to **, witness the top projects like never before.\n## The Trends Categories: Dive into Today's GitHub Trending Domains! Explore featured projects in domains such as ** and **. Get a quick overview of each project, including programming languages, stars, and more.\n## Highlights of the List: Spotlight noteworthy projects on GitHub Trending, including new tools, innovative projects, and rapidly gaining popularity, focusing on delivering distinctive and attention-grabbing content for users.\n---\n# Format Example\n\n```\n# [Title]\n\n## Today's Trends\nToday, ** and ** continue to dominate as the most popular programming languages. Key areas of interest include **, ** and **.\nThe top popular projects are Project1 and Project2.\n\n## The Trends Categories\n1. Generative AI\n    - [Project1](https://github/xx/project1): [detail of the project, such as star total and today, language, ...]\n    - [Project2](https://github/xx/project2): ...\n...\n\n## Highlights of the List\n1. [Project1](https://github/xx/project1): [provide specific reasons why this project is recommended].\n...\n```\n\n---\n# Github Trending\n{trending}\n\"\"\"\n\n\nclass CrawlOSSTrending(Action):\n    async def run(self, url: str = \"https://github.com/trending\"):\n        async with aiohttp.ClientSession() as client:\n            async with client.get(url, proxy=CONFIG.global_proxy) as response:\n                response.raise_for_status()\n                html = await response.text()\n\n        soup = BeautifulSoup(html, \"html.parser\")\n\n        repositories = []\n\n        for article in soup.select(\"article.Box-row\"):\n            repo_info = {}\n\n            repo_info[\"name\"] = (\n                article.select_one(\"h2 a\")\n                .text.strip()\n                .replace(\"\\n\", \"\")\n                .replace(\" \", \"\")\n            )\n            repo_info[\"url\"] = (\n                \"https://github.com\" + article.select_one(\"h2 a\")[\"href\"].strip()\n            )\n\n            # Description\n            description_element = article.select_one(\"p\")\n            repo_info[\"description\"] = (\n                description_element.text.strip() if description_element else None\n            )\n\n            # Language\n            language_element = article.select_one(\n                'span[itemprop=\"programmingLanguage\"]'\n            )\n            repo_info[\"language\"] = (\n                language_element.text.strip() if language_element else None\n            )\n\n            # Stars and Forks\n            stars_element = article.select(\"a.Link--muted\")[0]\n            forks_element = article.select(\"a.Link--muted\")[1]\n            repo_info[\"stars\"] = stars_element.text.strip()\n            repo_info[\"forks\"] = forks_element.text.strip()\n\n            # Today's Stars\n            today_stars_element = article.select_one(\n                \"span.d-inline-block.float-sm-right\"\n            )\n            repo_info[\"today_stars\"] = (\n                today_stars_element.text.strip() if today_stars_element else None\n            )\n\n            repositories.append(repo_info)\n\n        return repositories\n\n\nclass AnalysisOSSTrending(Action):\n    async def run(self, trending: Any):\n        return await self._aask(TRENDING_ANALYSIS_PROMPT.format(trending=trending))\n\n\n# Role\u5b9e\u73b0\nclass OssWatcher(Role):\n    def __init__(\n        self,\n        name=\"Codey\",\n        profile=\"OssWatcher\",\n        goal=\"Generate an insightful GitHub Trending analysis report.\",\n        constraints=\"Only analyze based on the provided GitHub Trending data.\",\n    ):\n        super().__init__(name=name, profile=profile, goal=goal, constraints=constraints)\n        self._init_actions([CrawlOSSTrending, AnalysisOSSTrending])\n        self._set_react_mode(react_mode=\"by_order\")\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        # By choosing the Action by order under the hood\n        # todo will be first SimpleWriteCode() then SimpleRunCode()\n        todo = self.rc.todo\n\n        msg = self.get_memories(k=1)[0]  # find the most k recent messages\n        result = await todo.run(msg.content)\n\n        msg = Message(content=str(result), role=self.profile, cause_by=type(todo))\n        self.rc.memory.add(msg)\n        return msg\n\n\n# Trigger\nclass GithubTrendingCronTrigger:\n    def __init__(\n        self,\n        spec: str,\n        tz: Optional[BaseTzInfo] = None,\n        url: str = \"https://github.com/trending\",\n    ) -&gt; None:\n        self.crontab = crontab(spec, tz=tz)\n        self.url = url\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        await self.crontab.next()\n        return Message(content=self.url)\n\n\n# callback\nasync def discord_callback(msg: Message):\n    intents = discord.Intents.default()\n    intents.message_content = True\n    client = discord.Client(intents=intents, proxy=CONFIG.global_proxy)\n    token = os.environ[\"DISCORD_TOKEN\"]\n    channel_id = int(os.environ[\"DISCORD_CHANNEL_ID\"])\n    async with client:\n        await client.login(token)\n        channel = await client.fetch_channel(channel_id)\n        lines = []\n        for i in msg.content.splitlines():\n            if i.startswith((\"# \", \"## \", \"### \")):\n                if lines:\n                    await channel.send(\"\\n\".join(lines))\n                    lines = []\n            lines.append(i)\n\n        if lines:\n            await channel.send(\"\\n\".join(lines))\n\n\nclass WxPusherClient:\n    def __init__(\n        self,\n        token: Optional[str] = None,\n        base_url: str = \"http://wxpusher.zjiecode.com\",\n    ):\n        self.base_url = base_url\n        self.token = token or os.environ[\"WXPUSHER_TOKEN\"]\n\n    async def send_message(\n        self,\n        content,\n        summary: Optional[str] = None,\n        content_type: int = 1,\n        topic_ids: Optional[list[int]] = None,\n        uids: Optional[list[int]] = None,\n        verify: bool = False,\n        url: Optional[str] = None,\n    ):\n        payload = {\n            \"appToken\": self.token,\n            \"content\": content,\n            \"summary\": summary,\n            \"contentType\": content_type,\n            \"topicIds\": topic_ids or [],\n            \"uids\": uids or os.environ[\"WXPUSHER_UIDS\"].split(\",\"),\n            \"verifyPay\": verify,\n            \"url\": url,\n        }\n        url = f\"{self.base_url}/api/send/message\"\n        return await self._request(\"POST\", url, json=payload)\n\n    async def _request(self, method, url, **kwargs):\n        async with aiohttp.ClientSession() as session:\n            async with session.request(method, url, **kwargs) as response:\n                response.raise_for_status()\n                return await response.json()\n\n\nasync def wxpusher_callback(msg: Message):\n    client = WxPusherClient()\n    await client.send_message(msg.content, content_type=3)\n\n\n# \u8fd0\u884c\u5165\u53e3\uff0c\nasync def main(spec: str = \"0 9 * * *\", discord: bool = True, wxpusher: bool = True):\n    callbacks = []\n    if discord:\n        callbacks.append(discord_callback)\n\n    if wxpusher:\n        callbacks.append(wxpusher_callback)\n\n    if not callbacks:\n\n        async def _print(msg: Message):\n            print(msg.content)\n\n        callbacks.append(_print)\n\n    async def callback(msg):\n        await asyncio.gather(*(call(msg) for call in callbacks))\n\n    runner = SubscriptionRunner()\n    await runner.subscribe(OssWatcher(), GithubTrendingCronTrigger(spec), callback)\n    await runner.run()\n\n\nif __name__ == \"__main__\":\n    import fire\n\n    fire.Fire(main)\n</code></pre> <p>\u8fd0\u884c\u524d\uff0c\u8bb0\u5f97\u914d\u7f6e\u56de\u8c03\u9700\u8981\u7684\u73af\u5883\u53d8\u91cf\uff1a</p> <pre><code>export DISCORD_TOKEN=MTE3ODM0NzQ5NzA4MTU0NDg0NA.GqWXK2.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nexport DISCORD_CHANNEL_ID=11783424143316xxxxxx\nexport WXPUSHER_TOKEN=AT_xxxxxxxxxxxxxxxxxxxxxx\nexport WXPUSHER_UIDS=UID_xxxxxxxxxxxxxxxxxxxxxxxxx\npython main.py\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <ul> <li>Discord</li> </ul> <p></p> <ul> <li>WXPusher</li> </ul> <p></p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%95%E5%8A%A8%E4%BD%9CAgent/","title":"3.3 &nbsp; \u5b9e\u73b0\u4e00\u4e2a\u5355\u52a8\u4f5cAgent","text":""},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%95%E5%8A%A8%E4%BD%9CAgent/#33-agent","title":"3.3 \u5b9e\u73b0\u4e00\u4e2a\u5355\u52a8\u4f5cAgent","text":"<p>\u4e0b\u9762\u5c06\u5e26\u9886\u5927\u5bb6\u5229\u7528 MetaGPT \u6846\u67b6\u5b9e\u73b0\u4e00\u4e2a\u751f\u6210\u4ee3\u7801\u7684 Agent SimpleCoder \u6211\u4eec\u5e0c \u671b\u8fd9\u4e2aAgent \u80fd\u591f\u6839\u636e\u6211\u4eec\u7684\u9700\u6c42\u6765\u751f\u6210\u4ee3\u7801 \u8981\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u6700\u7b80\u5355\u7684Role\uff0c\u53ea\u9700\u8981\u91cd\u5199Role \u57fa\u7c7b\u7684 init \u4e0e _act \u65b9\u6cd5 \u5728 <code>_init_</code> \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u58f0\u660e Agent \u7684 <code>name</code>\uff08\u540d\u79f0\uff09<code>profile</code>\uff08\u7c7b\u578b\uff09</p> <p>\u6211\u4eec\u4f7f\u7528 <code>self._init_action</code> \u51fd\u6570\u4e3a\u5176\u914d\u5907\u671f\u671b\u7684\u52a8\u4f5c <code>SimpleWriteCode</code> \u8fd9\u4e2aAction \u5e94\u8be5\u80fd\u6839\u636e\u6211\u4eec\u7684\u9700\u6c42\u751f\u6210\u6211\u4eec\u671f\u671b\u7684\u4ee3\u7801 \u5728<code>_act</code>\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u7f16\u5199\u667a\u80fd\u4f53\u5177\u4f53\u7684\u884c\u52a8\u903b\u8f91\uff0c\u667a\u80fd\u4f53\u5c06\u4ece\u6700\u65b0\u7684\u8bb0\u5fc6\u4e2d\u83b7\u53d6 \u4eba\u7c7b\u6307\u4ee4\uff0c\u8fd0\u884c\u914d\u5907\u7684\u52a8\u4f5c\uff0cMetaGPT \u5c06\u5176\u4f5c\u4e3a\u5f85\u529e\u4e8b\u9879 (<code>self.rc.todo</code>) \u5728\u5e55\u540e \u5904\u7406\uff0c\u6700\u540e\u8fd4\u56de\u4e00\u4e2a\u5b8c\u6574\u7684\u6d88\u606f\u3002</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%95%E5%8A%A8%E4%BD%9CAgent/#331","title":"3.3.1 \u9700\u6c42\u5206\u6790","text":"<p>\u8981\u5b9e\u73b0\u4e00\u4e2a <code>SimpleCoder</code> \u6211\u4eec\u9700\u8981\u5206\u6790\u8fd9\u4e2aAgent \u5b83\u9700\u8981\u54ea\u4e9b\u80fd\u529b</p> <p></p> <p>\u9996\u5148\u6211\u4eec\u9700\u8981\u8ba9\u4ed6\u63a5\u53d7\u7528\u6237\u7684\u8f93\u5165\u7684\u9700\u6c42\uff0c\u5e76\u8bb0\u5fc6\u6211\u4eec\u7684\u9700\u6c42\uff0c\u63a5\u7740\u8fd9\u4e2aAgent\u5b83\u9700 \u8981\u6839\u636e\u81ea\u5df1\u5df2\u77e5\u7684\u4fe1\u606f\u548c\u9700\u6c42\u6765\u7f16\u5199\u6211\u4eec\u9700\u8981\u7684\u4ee3\u7801\u3002</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%95%E5%8A%A8%E4%BD%9CAgent/#332-simplewritecode","title":"3.3.2 \u7f16\u5199 SimpleWriteCode \u52a8\u4f5c","text":"<p>\u5728 MetaGPT \u4e2d\uff0c\u7c7b <code>Action</code> \u662f\u52a8\u4f5c\u7684\u903b\u8f91\u62bd\u8c61\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u8c03\u7528 <code>self._aask</code> \u51fd\u6570 \u6765\u83b7\u53d6 LLM \u7684\u56de\u590d\u3002</p> <p>self._aask \u51fd\u6570\u5982\u4e0b\uff1a</p> <pre><code>async def _aask(self, prompt: str, system_msgs: Optional[list[str]] = None) -&gt; str:\n    \"\"\"Append default prefix\"\"\"\n    if not system_msgs:\n        system_msgs = []\n    system_msgs.append(self.prefix)\n    return await self.llm.aask(prompt, system_msgs)\n</code></pre> <p>\u5b83\u5c06\u8c03\u7528\u4f60\u9884\u8bbe\u597d\u7684 LLM \u6765\u6839\u636e\u8f93\u51fa\u7684\u63d0\u793a\u8bcd\u751f\u6210\u56de\u7b54\u3002</p> <p>\u4e0b\u9762\u662f\u5b9e\u73b0SimpleWriteCode\u7684\u5177\u4f53\u4ee3\u7801\uff1a</p> <pre><code>import re\nimport asyncio\nfrom metagpt.actions import Action\n\nclass SimpleWriteCode(Action):\n\n    PROMPT_TEMPLATE: str = \"\"\"\n    Write a python function that can {instruction} and provide two runnnable test cases.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n\n    name: str = \"SimpleWriteCode\"\n\n    async def run(self, instruction: str):\n        prompt = self.PROMPT_TEMPLATE.format(instruction=instruction)\n        rsp = await self._aask(prompt)\n        code_text = SimpleWriteCode.parse_code(rsp)\n        return code_text\n\n    @staticmethod\n    def parse_code(rsp):\n        pattern = r'```python(.*)```'\n        match = re.search(pattern, rsp, re.DOTALL)\n        code_text = match.group(1) if match else rsp\n        return code_text\n</code></pre> <p>\u5728\u6211\u4eec\u7684\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a <code>SimpleWriteCode</code> \u7c7b\uff0c\u5b83\u7ee7\u627f\u81ea <code>Action</code>\u7c7b\uff0c\u6211\u4eec\u91cd\u5199\u4e86<code>run</code> \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u51b3\u5b9a\u4e86\u6211\u4eec\u5bf9\u4f20\u5165\u7684\u5185\u5bb9\u5230\u5e95\u8981\u505a\u4ec0\u4e48\u6837\u7684\u5904\u7406\u3002</p> <p>\u5728\u7c7b\u4e2d\u8bbe\u7f6e name \u6307\u5b9a\u52a8\u4f5c\u540d\u79f0\u3002</p> <pre><code>    name: str = \"SimpleWriteCode\"\n</code></pre> <p>\u5728<code>run</code>\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u58f0\u660e\u5f53\u91c7\u53d6\u8fd9\u4e2a\u884c\u52a8\u65f6\uff0c\u6211\u4eec\u8981\u5bf9\u4f20\u5165\u7684\u5185\u5bb9\u505a\u4ec0\u4e48\u6837\u7684\u5904\u7406\uff0c\u5728 <code>SimpleWriteCode</code> \u7c7b\u4e2d\uff0c\u6211\u4eec\u5e94\u8be5\u4f20\u5165\uff1a\u201c\u8bf7\u4f60\u5e2e\u6211\u5199\u4e00\u4e2aXXX\u7684\u4ee3\u7801\u201d \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f\u7528\u6237\u7684\u8f93\u5165\uff0c<code>run</code>\u65b9\u6cd5\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u5904\u7406\uff0c\u628a\u4ed6\u4ea4\u7ed9llm\uff0c\u7b49\u5230llm\u8fd4\u56de\u751f\u6210\u7ed3\u679c\u540e\uff0c\u6211\u4eec\u518d\u53d6\u51fa\u5176\u4e2d\u7684\u4ee3\u7801\u90e8\u5206\u8fd4\u56de\u3002</p> <p>\u6211\u4eec\u5199\u597d\u4e86\u4e00\u4e2a\u63d0\u793a\u8bcd\u6a21\u677f\uff0c\u5c06\u7528\u6237\u8f93\u5165\u5d4c\u5165\u6a21\u677f\u4e2d</p> <pre><code>PROMPT_TEMPLATE: str = \"\"\"\n    Write a python function that can {instruction} and provide two runnnable test cases.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\nprompt = self.PROMPT_TEMPLATE.format(instruction=instruction)\n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u8ba9\u5927\u6a21\u578b\u4e3a\u6211\u4eec\u751f\u6210\u56de\u7b54</p> <pre><code>rsp = await self._aask(prompt)\n</code></pre> <p>\u751f\u6210\u56de\u7b54\u540e\uff0c\u6211\u4eec\u5229\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u53d6\u5176\u4e2d\u7684code\u90e8\u5206\uff0cllm\u5728\u8fd4\u56de\u7ed9\u6211\u4eec\u4ee3\u7801\u65f6\u901a\u5e38\u7528\u4e0b\u9762\u7684\u5f62\u5f0f\u8fd4\u56de</p> <pre><code>```python\ncode\u5185\u5bb9\n```\n</code></pre> <p>\u5bf9\u5e94\u7684\u6b63\u5219\u63d0\u53d6\u5185\u5bb9\u5982\u4e0b\uff1a</p> <p><code>parse_code</code>\u65b9\u6cd5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5339\u914d\u7528\u6237\u8f93\u5165\u7684\u4ee3\u7801\u6587\u672c\u3002\u5b83\u4f1a\u67e5\u627e\u4ee5\"<code>python\"\u5f00\u5934\uff0c\"</code>\"\u7ed3\u5c3e\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u63d0\u53d6\u5176\u4e2d\u7684\u4ee3\u7801\u5185\u5bb9\u3002\u5982\u679c\u627e\u5230\u5339\u914d\u7684\u4ee3\u7801\u5757\uff0c\u5219\u8fd4\u56de\u63d0\u53d6\u7684\u4ee3\u7801\u5185\u5bb9\uff1b\u5426\u5219\uff0c\u8fd4\u56de\u539f\u59cb\u7684\u7528\u6237\u8f93\u5165\u3002</p> <pre><code>@staticmethod\ndef parse_code(rsp):\n    pattern = r'```python(.*)```'\n    match = re.search(pattern, rsp, re.DOTALL)\n    code_text = match.group(1) if match else rsp\n    return code_text\n</code></pre> <p>\u6700\u540e\u5c06\u4ee3\u7801\u5185\u5bb9\u8fd4\u56de</p> <p>\u81f3\u6b64\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u8fd9\u6837\u4e00\u4e2a\u7f16\u5199\u4ee3\u7801\u7684\u52a8\u4f5c\u3002</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%95%E5%8A%A8%E4%BD%9CAgent/#333-simplecoder","title":"3.3.3 \u8bbe\u8ba1SimpleCoder\u89d2\u8272","text":"<p>\u5728\u6b64\u4e4b\u524d\u6211\u4eec\u9700\u8981\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b Message\uff0c\u5728MetaGPT\u4e2d\uff0cMessage \u7c7b\u662f\u6700\u57fa\u672c\u7684\u4fe1\u606f\u7c7b\u578b\uff0cMessage \u7684\u57fa\u672c\u7ec4\u6210\u5982\u4e0b</p> <p></p> <p>\u5728\u672c\u7ae0\u8282\u7684\u5b66\u4e60\u4e2d\u6211\u4eec\u53ea\u6d89\u53ca content  role  cause_by \uff0c\u9664\u4e86content\u5916\uff0c\u5176\u4ed6\u5185\u5bb9\u90fd\u662f\u53ef\u9009\u7684</p> <p>\u4ed6\u4eec\u5206\u522b\u4ee3\u8868\u4fe1\u606f\u5185\u5bb9\uff0c\u53d1\u51fa\u4fe1\u606f\u7684\u89d2\u8272\uff0c\u4ee5\u53ca\u662f\u54ea\u4e2a\u52a8\u4f5c\u5bfc\u81f4\u4ea7\u751f\u7684message</p> <p>\u5728\u7f16\u5199\u5b8cSimpleWriteCode\u52a8\u4f5c\u540e\uff0c\u6211\u76f8\u4fe1\u5927\u5bb6\u8fd8\u6709\u5f88\u591a\u7591\u60d1\uff0c\u6bd4\u5982\u5982\u4f55\u8c03\u7528\u8fd9\u4e2a\u52a8\u4f5c\uff1f\u600e\u6837\u628a\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\u4f20\u9012\u7ed9\u8fd9\u4e2a\u52a8\u4f5c\uff1f</p> <p>\u8fd9\u90e8\u5206\u5185\u5bb9\u6211\u4eec\u90fd\u4f1a\u5728\u8bbe\u8ba1SimpleCoder\u89d2\u8272\u7684\u65f6\u5019\u89e3\u51b3</p> <pre><code>from metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.logs import logger\n\nclass SimpleCoder(Role):\n\n    name: str = \"Alice\"\n    profile: str = \"SimpleCoder\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([SimpleWriteCode])\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        todo = self.rc.todo # todo will be SimpleWriteCode()\n\n        msg = self.get_memories(k=1)[0] # find the most recent messages\n\n        code_text = await todo.run(msg.content)\n        msg = Message(content=code_text, role=self.profile, cause_by=type(todo))\n\n        return msg\n</code></pre> <p>\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u63d0\u5230\u8fc7\u5b9e\u73b0\u4e00\u4e2a\u6700\u7b80\u5355\u7684Role\uff0c\u53ea\u9700\u8981\u6307\u5b9a Role \u7684 name\uff08\u6635\u79f0\uff09 \u548c profile\uff08\u4eba\u8bbe\uff09\uff0c\u5e76\u91cd\u5199Role\u57fa\u7c7b\u7684 <code>_init_</code> \u4e0e <code>_act</code> \u65b9\u6cd5\u3002</p> <p><code>__init__</code> \u65b9\u6cd5\u7528\u6765\u521d\u59cb\u5316\u8fd9\u4e2aAction\uff0c\u800c <code>_act</code> \u65b9\u6cd5\u51b3\u5b9a\u4e86\u5f53\u8fd9\u4e2a\u89d2\u8272\u884c\u52a8\u65f6\u5b83\u7684\u5177\u4f53\u884c\u52a8\u903b\u8f91</p> <p>\u6211\u4eec\u5728 <code>__init__</code> \u65b9\u6cd5\u4e2d\u4e3a Role \u914d\u5907\u4e86\u6211\u4eec\u4e4b\u524d\u5199\u597d\u7684\u52a8\u4f5c SimpleWriteCode\u3002</p> <pre><code>def __init__(self, **kwargs):\n    super().__init__(**kwargs)\n    self._init_actions([SimpleWriteCode])\n</code></pre> <p>\u914d\u5907\u597d\u4e4b\u540e\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u884c\u52a8<code>SimpleWriteCode</code>\u5c31\u4f1a\u88ab\u52a0\u5165\u5230\u4ee3\u529e<code>self.rc.todo</code>\u4e2d\uff0c</p> <p>\u5728<code>_act</code>\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5c31\u4f1a\u8981\u6c42\u6211\u4eec\u7684\u667a\u80fd\u4f53\u6765\u6267\u884c\u8fd9\u4e2a\u52a8\u4f5c\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u8c03\u7528<code>todo.run()</code>\u65b9\u6cd5</p> <pre><code>async def _act(self) -&gt; Message:\n    logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n    todo = self.rc.todo  # todo will be SimpleWriteCode()\n</code></pre> <p>\u53e6\u5916\u6211\u4eec\u5728 \u524d\u9762\u7684action \u4e2d\u63d0\u5230\u4e86\uff0c\u5f53action\u8c03\u7528\u65f6\uff0c\u6211\u4eec\u9700\u8981\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165\u6765\u4f5c\u4e3ainstruction\u4f20\u9012\u7ed9action\uff0c\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230\u6211\u4eec\u8be5\u5982\u4f55\u83b7\u53d6\u7528\u6237\u4e4b\u524d\u4f20\u9012\u7ed9agent\u7684\u4fe1\u606f\uff0c\u5728MetaGPT\u4e2d\uff0c\u5f53\u7528\u6237\u4e0eAgent\u4ea4\u4e92\u65f6\uff0c\u6240\u6709\u7684\u5185\u5bb9\u90fd\u4f1a\u88ab\u5b58\u50a8\u5728\u5176\u81ea\u6709\u7684Memory\u4e2d</p> <p>\u5728MetaGPT\u4e2d\uff0c<code>Memory</code>\u7c7b\u662f\u667a\u80fd\u4f53\u7684\u8bb0\u5fc6\u7684\u62bd\u8c61\u3002\u5f53\u521d\u59cb\u5316\u65f6\uff0c<code>Role</code>\u521d\u59cb\u5316\u4e00\u4e2a<code>Memory</code>\u5bf9\u8c61\u4f5c\u4e3a<code>self.rc.memory</code>\u5c5e\u6027\uff0c\u5b83\u5c06\u5728\u4e4b\u540e\u7684<code>_observe</code>\u4e2d\u5b58\u50a8\u6bcf\u4e2a<code>Message</code>\uff0c\u4ee5\u4fbf\u540e\u7eed\u7684\u68c0\u7d22\u3002\u7b80\u800c\u8a00\u4e4b\uff0c<code>Role</code>\u7684\u8bb0\u5fc6\u662f\u4e00\u4e2a\u542b\u6709<code>Message</code>\u7684\u5217\u8868\u3002</p> <p>\u5f53\u9700\u8981\u83b7\u53d6\u8bb0\u5fc6\u65f6\uff08\u83b7\u53d6LLM\u8f93\u5165\u7684\u4e0a\u4e0b\u6587\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>self.get_memories</code>\u3002\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>def get_memories(self, k=0) -&gt; list[Message]:\n    \"\"\"A wrapper to return the most recent k memories of this role, return all when k=0\"\"\"\n    return self.rc.memory.get(k=k)\n</code></pre> <p>\u5728SimpleCoder\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u83b7\u53d6\u6700\u8fd1\u7684\u4e00\u6761\u8bb0\u5fc6\uff0c\u4e5f\u5c31\u662f\u7528\u6237\u4e0b\u8fbe\u7684\u9700\u6c42\uff0c\u5c06\u5b83\u4f20\u9012\u7ed9action\u5373\u53ef</p> <pre><code>msg = self.get_memories(k=1)[0]  # find the most recent messages\ncode_text = await todo.run(msg.content)\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u5c31\u5c06\u62ff\u5230\u5927\u6a21\u578b\u7ed9\u6211\u4eec\u7684\u8f93\u51fa\u5566\uff0c\u6700\u540e\u6211\u4eec\u5c06\u62ff\u5230\u7684\u4fe1\u606f\u5c01\u88c5\u4e3aMetaGPT\u4e2d\u901a\u4fe1\u7684\u57fa\u672c\u683c\u5f0f Message \u8fd4\u56de\uff0c</p> <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5355\u52a8\u4f5cAgent</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8D%95%E5%8A%A8%E4%BD%9CAgent/#334-simplecoder","title":"3.3.4 \u8fd0\u884cSimpleCoder\u89d2\u8272","text":"<p>\u63a5\u4e0b\u6765\u4f60\u53ea\u9700\u8981\u521d\u59cb\u5316\u5b83\u5e76\u4f7f\u7528\u4e00\u4e2a\u8d77\u59cb\u6d88\u606f\u8fd0\u884c\u5b83\u3002</p> <pre><code>import asyncio\n\nasync def main():\n    msg = \"write a function that calculates the sum of a list\"\n    role = SimpleCoder()\n    logger.info(msg)\n    result = await role.run(msg)\n    logger.info(result)\n\nasyncio.run(main())\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import re\nimport asyncio\nfrom metagpt.actions import Action\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.logs import logger\n\nclass SimpleWriteCode(Action):\n\n    PROMPT_TEMPLATE = \"\"\"\n    Write a python function that can {instruction} and provide two runnable test cases.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n\n    name: str = \"SimpleWriteCode\"\n\n    async def run(self, instruction: str):\n        prompt = self.PROMPT_TEMPLATE.format(instruction=instruction)\n        rsp = await self._aask(prompt)\n        code_text = SimpleWriteCode.parse_code(rsp)\n        return code_text\n\n    @staticmethod\n    def parse_code(rsp):\n        pattern = r'```python(.*)```'\n        match = re.search(pattern, rsp, re.DOTALL)\n        code_text = match.group(1) if match else rsp\n        return code_text\n\nclass SimpleCoder(Role):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([SimpleWriteCode])\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        todo = self.rc.todo  # todo will be SimpleWriteCode()\n\n        msg = self.get_memories(k=1)[0]  # find the most recent messages\n\n        code_text = await todo.run(msg.content)\n        msg = Message(content=code_text, role=self.profile,\n                      cause_by=type(todo))\n\n        return msg\n\nasync def main():\n    msg = \"write a function that calculates the sum of a list\"\n    role = SimpleCoder()\n    logger.info(msg)\n    result = await role.run(msg)\n    logger.info(result)\n\nasyncio.run(main())\n</code></pre>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%8A%A8%E4%BD%9CAgent/","title":"3.4 &nbsp; \u5b9e\u73b0\u4e00\u4e2a\u591a\u52a8\u4f5cAgent","text":""},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%8A%A8%E4%BD%9CAgent/#34-agent","title":"3.4 \u5b9e\u73b0\u4e00\u4e2a\u591a\u52a8\u4f5c Agent","text":""},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%8A%A8%E4%BD%9CAgent/#341","title":"3.4.1 \u9700\u6c42\u5206\u6790","text":"<p>\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u4e0d\u4ec5\u5e0c\u671b\u7528\u81ea\u7136\u8bed\u8a00\u7f16\u5199\u4ee3\u7801\uff0c\u800c\u4e14\u8fd8\u5e0c\u671b\u751f\u6210\u7684\u4ee3\u7801\u7acb\u5373\u6267\u884c\u3002\u4e00\u4e2a\u62e5\u6709\u591a\u4e2a\u52a8\u4f5c\u7684\u667a\u80fd\u4f53\u53ef\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\u3002\u8ba9\u6211\u4eec\u79f0\u4e4b\u4e3aRunnableCoder\uff0c\u4e00\u4e2a\u65e2\u5199\u4ee3\u7801\u53c8\u7acb\u5373\u8fd0\u884c\u7684 Role\u3002\u6211\u4eec\u9700\u8981\u4e24\u4e2a Action\uff1aSimpleWriteCode \u548c SimpleRunCode</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%8A%A8%E4%BD%9CAgent/#342-simplewritecode","title":"3.4.2 \u7f16\u5199 SimpleWriteCode \u52a8\u4f5c","text":"<p>\u8fd9\u90e8\u5206\u4e0e\u6211\u4eec\u5728\u524d\u6587\u4e2d\u8bb2\u5230\u7684\u57fa\u672c\u4e00\u81f4</p> <pre><code>class SimpleWriteCode(Action):\n\n    PROMPT_TEMPLATE: str = \"\"\"\n    Write a python function that can {instruction} and provide two runnnable test cases.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n\n    name: str = \"SimpleWriteCode\"\n\n    async def run(self, instruction: str):\n        prompt = self.PROMPT_TEMPLATE.format(instruction=instruction)\n        rsp = await self._aask(prompt)\n        code_text = SimpleWriteCode.parse_code(rsp)\n        return code_text\n\n    @staticmethod\n    def parse_code(rsp):\n        pattern = r'```python(.*)```'\n        match = re.search(pattern, rsp, re.DOTALL)\n        code_text = match.group(1) if match else rsp\n        return code_text\n</code></pre>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%8A%A8%E4%BD%9CAgent/#343-simpleruncode","title":"3.4.3 \u7f16\u5199 SimpleRunCode \u52a8\u4f5c","text":"<p>\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u4e00\u4e2a\u52a8\u4f5c\u53ef\u4ee5\u5229\u7528LLM\uff0c\u4e5f\u53ef\u4ee5\u5728\u6ca1\u6709LLM\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002\u5728SimpleRunCode\u7684\u60c5\u51b5\u4e0b\uff0cLLM\u4e0d\u6d89\u53ca\u5176\u4e2d\u3002\u6211\u4eec\u53ea\u9700\u542f\u52a8\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u6765\u8fd0\u884c\u4ee3\u7801\u5e76 \u83b7\u53d6\u7ed3\u679c \u5728 Python \u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u6807\u51c6\u5e93\u4e2d\u7684 <code>subprocess</code> \u5305\u6765 fork \u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5e76\u8fd0\u884c\u4e00\u4e2a\u5916 \u90e8\u7684\u7a0b\u5e8f\u3002 subprocess\u5305\u4e2d\u5b9a\u4e49\u6709\u6570\u4e2a\u521b\u5efa\u5b50\u8fdb\u7a0b\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u5206\u522b\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u521b\u5efa\u5b50\u8fdb \u7a0b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6765\u4ece\u4e2d\u9009\u53d6\u4e00\u4e2a\u4f7f\u7528\u3002 \u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u662f\u4f60\u7684Python \u7a0b\u5e8f\u672c\u8eab\uff0c\u5b83\u6267\u884c\u4e86\u5305\u542b <code>SimpleRunCode</code> \u7c7b\u5b9a\u4e49\u7684\u4ee3\u7801\u3002\u7b2c\u4e8c\u4e2a\u8fdb\u7a0b\u662f\u7531 <code>subprocess.run</code> \u521b\u5efa\u7684\uff0c\u5b83\u6267\u884c\u4e86 <code>python3 -c</code> \u547d\u4ee4\uff0c\u7528\u4e8e\u8fd0\u884c <code>code_text</code> \u4e2d\u5305\u542b\u7684 Python \u4ee3\u7801\u3002\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u76f8\u4e92\u72ec\u7acb\uff0c\u901a\u8fc7 <code>subprocess.run</code> \u4f60\u7684Python \u7a0b\u5e8f\u53ef\u4ee5\u542f\u52a8\u5e76\u4e0e\u7b2c\u4e8c\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\uff0c\u83b7\u53d6\u5176\u8f93\u51fa\u7ed3\u679c\u3002</p> <pre><code>class SimpleRunCode(Action):\n\n    name: str = \"SimpleRunCode\"\n\n    async def run(self, code_text: str):\n        # \u5728Windows\u73af\u5883\u4e0b\uff0cresult\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u8fd4\u56de\u751f\u6210\u7ed3\u679c\uff0c\u5728windows\u4e2d\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165python3\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6253\u5f00\u5fae\u8f6f\u5546\u5e97\n        result = subprocess.run([\"python3\", \"-c\", code_text], capture_output=True, text=True)\n        # \u91c7\u7528\u4e0b\u9762\u7684\u53ef\u9009\u4ee3\u7801\u6765\u66ff\u6362\u4e0a\u9762\u7684\u4ee3\u7801\n        # result = subprocess.run([\"python\", \"-c\", code_text], capture_output=True, text=True)\n        # import sys\n        # result = subprocess.run([sys.executable, \"-c\", code_text], capture_output=True, text=True)\n        code_result = result.stdout\n        logger.info(f\"{code_result=}\")\n        return code_result\n</code></pre>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%8A%A8%E4%BD%9CAgent/#344-runnablecoder","title":"3.4.4 \u5b9a\u4e49 RunnableCoder \u89d2\u8272","text":"<p>\u4e0e\u5b9a\u4e49\u5355\u4e00\u52a8\u4f5c\u7684\u667a\u80fd\u4f53\u6ca1\u6709\u592a\u5927\u4e0d\u540c\uff01\u8ba9\u6211\u4eec\u6765\u6620\u5c04\u4e00\u4e0b\uff1a 1. \u7528 <code>self._init_actions</code> \u521d\u59cb\u5316\u6240\u6709 Action </p> <ol> <li> <ol> <li>\u6307\u5b9a\u6bcf\u6b21 Role \u4f1a\u9009\u62e9\u54ea\u4e2a <code>Action</code>\u3002\u6211\u4eec\u5c06 <code>react_mode</code> \u8bbe\u7f6e\u4e3a \"by_order\"\uff0c\u8fd9\u610f\u5473\u7740 <code>Role</code> \u5c06\u6309\u7167 <code>self._init_actions</code> \u4e2d\u6307\u5b9a\u7684\u987a\u5e8f\u6267\u884c\u5176\u80fd \u591f\u6267\u884c\u7684 <code>Action</code>\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f53 <code>Role</code> \u6267\u884c <code>_act</code> \u65f6\uff0c<code>self.rc.todo</code> \u5c06\u9996\u5148 \u662f <code>SimpleWriteCode</code>\uff0c\u7136\u540e\u662f <code>SimpleRunCode</code>\u3002</li> </ol> </li> <li> <p>\u8986\u76d6 <code>_act</code> \u51fd\u6570\u3002Role \u4ece\u4e0a\u4e00\u8f6e\u7684\u4eba\u7c7b\u8f93\u5165\u6216\u52a8\u4f5c\u8f93\u51fa\u4e2d\u68c0\u7d22\u6d88\u606f\uff0c\u7528\u9002\u5f53\u7684<code>Message</code> \u5185\u5bb9\u63d0\u4f9b\u5f53\u524d\u7684 <code>Action (self.rc.todo)</code>\uff0c\u6700\u540e\u8fd4\u56de\u7531\u5f53\u524d <code>Action</code> \u8f93\u51fa \u7ec4\u6210\u7684 <code>Message</code>\u3002\u8fd9\u91cc\u6211\u4eec\u7528 Role \u7c7b\u7684 _set_react_mode \u65b9\u6cd5\u6765\u8bbe\u5b9a\u6211\u4eec action \u6267\u884c\u7684\u5148\u540e\u987a\u5e8f\uff0c\u4e8b\u5b9e\u4e0aRole\u57fa\u7c7b\u4e2d\u8fd8\u5305\u542b\u4e86\u5f88\u591a\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u67e5\u770b\u5b83\u7684\u5b9a\u4e49\uff0c\u5728\u540e\u9762\u7684\u7ae0\u8282 \u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u4e5f\u5c06\u4e00\u6b65\u4e00\u6b65\u63ed\u5f00\u4ed6\u4eec\u7684\u9762\u7eb1\u3002</p> </li> </ol> <pre><code>class RunnableCoder(Role):\n\n    name: str = \"Alice\"\n    profile: str = \"RunnableCoder\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([SimpleWriteCode, SimpleRunCode])\n        self._set_react_mode(react_mode=\"by_order\")\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: \u51c6\u5907 {self.rc.todo}\")\n        # \u901a\u8fc7\u5728\u5e95\u5c42\u6309\u987a\u5e8f\u9009\u62e9\u52a8\u4f5c\n        # todo \u9996\u5148\u662f SimpleWriteCode() \u7136\u540e\u662f SimpleRunCode()\n        todo = self.rc.todo\n\n        msg = self.get_memories(k=1)[0] # \u5f97\u5230\u6700\u76f8\u4f3c\u7684 k \u6761\u6d88\u606f\n        result = await todo.run(msg.content)\n\n        msg = Message(content=result, role=self.profile, cause_by=type(todo))\n        self.rc.memory.add(msg)\n        return msg\n</code></pre> <p>### 3.4.5 \u8fd0\u884c RunnableCoder \u89d2\u8272</p> <p>\u8fd9\u90e8\u5206\u4e0e SimpleCoder \u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u9700\u8981\u4fee\u6539\u6211\u4eec\u4f7f\u7528\u7684 role \u4e3a RunnableCoder</p> <pre><code>import asyncio\n\nasync def main():\n    msg = \"write a function that calculates the sum of a list\"\n    role = RunnableCoder()\n    logger.info(msg)\n    result = await role.run(msg)\n    logger.info(result)\n\nasyncio.run(main())\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import os\nimport re\nimport subprocess\nimport asyncio\n\nimport fire\nimport sys\nfrom metagpt.llm import LLM\nfrom metagpt.actions import Action\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.logs import logger\n\nclass SimpleWriteCode(Action):\n\n    PROMPT_TEMPLATE :str = \"\"\"\n    Write a python function that can {instruction} and provide two runnnable test cases.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n\n    name: str = \"SimpleWriteCode\"\n\n    async def run(self, instruction: str):\n        prompt = self.PROMPT_TEMPLATE.format(instruction=instruction)\n        rsp = await self._aask(prompt)\n        code_text = SimpleWriteCode.parse_code(rsp)\n        return code_text\n\n    @staticmethod\n    def parse_code(rsp):\n        pattern = r'```python(.*)```'\n        match = re.search(pattern, rsp, re.DOTALL)\n        code_text = match.group(1) if match else rsp\n        return code_text\n\nclass SimpleRunCode(Action):\n\n    name: str = \"SimpleRunCode\"\n\n    async def run(self, code_text: str):\n        result = subprocess.run([sys.executable, \"-c\", code_text], capture_output=True, text=True)\n        code_result = result.stdout\n        logger.info(f\"{code_result=}\")\n        return code_result\n\nclass RunnableCoder(Role):\n\n    name: str = \"Alice\"\n    profile: str = \"RunnableCoder\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([SimpleWriteCode, SimpleRunCode])\n        self._set_react_mode(react_mode=\"by_order\")\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        # By choosing the Action by order under the hood\n        # todo will be first SimpleWriteCode() then SimpleRunCode()\n        todo = self.rc.todo\n\n        msg = self.get_memories(k=1)[0] # find the most k recent messagesA\n        result = await todo.run(msg.content)\n\n        msg = Message(content=result, role=self.profile, cause_by=type(todo))\n        self.rc.memory.add(msg)\n        return msg\n\nasync def main():\n    msg = \"write a function that calculates the sum of a list\"\n    role = RunnableCoder()\n    logger.info(msg)\n    result = await role.run(msg)\n    logger.info(result)\n\nasyncio.run(main())\n</code></pre>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84Agent%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%8A%A9%E6%89%8B/","title":"3.5 &nbsp; \u5b9e\u73b0\u4e00\u4e2a\u66f4\u590d\u6742\u7684Agent\uff1a\u6280\u672f\u6587\u6863\u52a9\u624b","text":""},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84Agent%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%8A%A9%E6%89%8B/#35-agent","title":"3.5 \u5b9e\u73b0\u4e00\u4e2a\u66f4\u590d\u6742\u7684 Agent\uff1a\u6280\u672f\u6587\u6863\u52a9\u624b","text":"<p>\u5728\u524d\u6587\u4e2d\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684agent\u5e2e\u6211\u4eec\u751f\u6210\u4ee3\u7801\u5e76\u6267\u884c\u4ee3\u7801\uff0c\u4e0b \u9762\u6211\u4eec\u5c06\u5e26\u9886\u5927\u5bb6\u5b9e\u73b0\u66f4\u590d\u6742\u7684agent\uff0c\u5e76\u5411\u5927\u5bb6\u5c55\u793a MetaGPT\u4e2d\u5173\u4e8e agent\u7684\u66f4\u591a\u8bbe\u8ba1\u7ec6\u8282\uff0c\u73b0\u5728\u8bd5\u7740\u60f3\u60f3\u600e\u4e48\u8ba9\u5927\u6a21\u578b\u4e3a\u6211\u4eec\u5199\u4e00\u7bc7\u6280\u672f\u6587\u6863\uff1f</p> <p>\u53ef\u80fd\u60f3\u5230\u7684\u662f\uff0c\u6211\u4eec\u544a\u8bc9\u5927\u6a21\u578b\uff1a\u201c\u8bf7\u5e2e\u6211\u751f\u6210\u5173\u4e8eMysql\u7684\u6280\u672f\u6587\u6863\u201d\uff0c\u4ed6\u53ef\u80fd\u5f88\u5feb \u5730\u5c31\u80fd\u5e2e\u4f60\u5b8c\u6210\u8fd9\u9879\u4efb\u52a1\uff0c\u4f46\u662f\u53d7\u9650\u4e8e\u5927\u6a21\u578b\u81ea\u8eab\u7684token\u9650\u5236\uff0c\u6211\u4eec\u65e0\u6cd5\u5b9e\u73b0\u8ba9\u4ed6 \u4e00\u6b21\u6027\u5c31\u8f93\u51fa\u6211\u4eec\u5e0c\u671b\u7684\u4e00\u4e2a\u5b8c\u6574\u7684\u6280\u672f\u6587\u6863\u3002</p> <p>\u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u5c06\u6211\u4eec\u7684\u6280\u672f\u6587\u6863\u62c6\u89e3\u6210\u4e00\u4e2a\u4e00\u4e2a\u5f88\u5c0f\u7684\u9700\u6c42\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u7684\u63d0\u95ee\uff0c\u4f46\u662f\u8fd9\u6837\u6765\u8bf4\u4e0d\u4ec5\u8d39\u65f6\uff0c\u800c\u4e14\u8fd8\u9700\u8981\u4eba\u5de5\u4e00\u76f4\u53bb\u8ddf\u4ed6\u4ea4\u4e92\uff0c\u975e\u5e38\u7684\u9ebb\u70e6\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u5c06\u5229\u7528MetaGPT\u6846\u67b6\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \u6211\u4eec\u5229\u7528\u4e0a\u6587\u4e2d\u63d0\u5230\u7684agent\u6846\u67b6\u6765\u62c6\u89e3\u6211\u4eec\u7684\u9700\u6c42</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84Agent%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%8A%A9%E6%89%8B/#351","title":"3.5.1 \u9700\u6c42\u5206\u6790","text":"<p>\u56e0\u4e3atoken\u9650\u5236\u7684\u539f\u56e0\uff0c\u6211\u4eec\u5148\u901a\u8fc7 LLM \u5927\u6a21\u578b\u751f\u6210\u6559\u7a0b\u7684\u76ee\u5f55\uff0c\u518d\u5bf9\u76ee\u5f55\u6309\u7167\u4e8c\u7ea7 \u6807\u9898\u8fdb\u884c\u5206\u5757\uff0c\u5bf9\u4e8e\u6bcf\u5757\u76ee\u5f55\u6309\u7167\u6807\u9898\u751f\u6210\u8be6\u7ec6\u5185\u5bb9\uff0c\u6700\u540e\u518d\u5c06\u6807\u9898\u548c\u5185\u5bb9\u8fdb\u884c\u62fc\u63a5\uff0c\u89e3\u51b3 LLM \u5927\u6a21\u578b\u957f\u6587\u672c\u7684\u9650\u5236\u95ee\u9898\u3002</p> <p></p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84Agent%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%8A%A9%E6%89%8B/#352-writedirectory","title":"3.5.2 \u7f16\u5199 WriteDirectory \u52a8\u4f5c","text":"<p>\u6211\u4eec\u5148\u6765\u5b9e\u73b0\u6839\u636e\u7528\u6237\u9700\u6c42\u751f\u6210\u6587\u7ae0\u5927\u7eb2\u7684\u4ee3\u7801</p> <pre><code>class WriteDirectory(Action):\n    \"\"\"Action class for writing tutorial directories.\n\n    Args:\n        name: The name of the action.\n        language: The language to output, default is \"Chinese\".\n\n        \u7528\u4e8e\u7f16\u5199\u6559\u7a0b\u76ee\u5f55\u7684\u52a8\u4f5c\u7c7b\u3002\n        \u53c2\u6570\uff1a\n        name\uff1a\u52a8\u4f5c\u7684\u540d\u79f0\u3002\n        language\uff1a\u8f93\u51fa\u7684\u8bed\u8a00\uff0c\u9ed8\u8ba4\u4e3a\"Chinese\"\u3002\n    \"\"\"\n\n    name: str = \"WriteDirectory\"\n    language: str = \"Chinese\"\n\n    async def run(self, topic: str, *args, **kwargs) -&gt; Dict:\n        \"\"\"Execute the action to generate a tutorial directory according to the topic.\n\n        Args:\n            topic: The tutorial topic.\n\n        Returns:\n            the tutorial directory information, including {\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}.\n        \u6839\u636e\u4e3b\u9898\u6267\u884c\u751f\u6210\u6559\u7a0b\u76ee\u5f55\u7684\u64cd\u4f5c\u3002\n            \u53c2\u6570\uff1a\n            topic\uff1a\u6559\u7a0b\u4e3b\u9898\u3002\n            \u8fd4\u56de\uff1a\n            \u6559\u7a0b\u76ee\u5f55\u4fe1\u606f\uff0c\u5305\u62ec{\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}.\n        \"\"\"\n        COMMON_PROMPT = \"\"\"\n        You are now a seasoned technical professional in the field of the internet. \n        We need you to write a technical tutorial with the topic \"{topic}\".\n        \u60a8\u73b0\u5728\u662f\u4e92\u8054\u7f51\u9886\u57df\u7684\u7ecf\u9a8c\u4e30\u5bcc\u7684\u6280\u672f\u4e13\u4e1a\u4eba\u5458\u3002\n        \u6211\u4eec\u9700\u8981\u60a8\u64b0\u5199\u4e00\u4e2a\u5173\u4e8e\"{topic}\"\u7684\u6280\u672f\u6559\u7a0b\u3002\n        \"\"\"\n\n        DIRECTORY_PROMPT = COMMON_PROMPT + \"\"\"\n        Please provide the specific table of contents for this tutorial, strictly following the following requirements:\n        1. The output must be strictly in the specified language, {language}.\n        2. Answer strictly in the dictionary format like {{\"title\": \"xxx\", \"directory\": [{{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}}, {{\"dir 2\": [\"sub dir 3\", \"sub dir 4\"]}}]}}.\n        3. The directory should be as specific and sufficient as possible, with a primary and secondary directory.The secondary directory is in the array.\n        4. Do not have extra spaces or line breaks.\n        5. Each directory title has practical significance.\n        \u8bf7\u6309\u7167\u4ee5\u4e0b\u8981\u6c42\u63d0\u4f9b\u672c\u6559\u7a0b\u7684\u5177\u4f53\u76ee\u5f55\uff1a\n        1. \u8f93\u51fa\u5fc5\u987b\u4e25\u683c\u7b26\u5408\u6307\u5b9a\u8bed\u8a00\uff0c{language}\u3002\n        2. \u56de\u7b54\u5fc5\u987b\u4e25\u683c\u6309\u7167\u5b57\u5178\u683c\u5f0f\uff0c\u5982{{\"title\": \"xxx\", \"directory\": [{{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}}, {{\"dir 2\": [\"sub dir 3\", \"sub dir 4\"]}}]}}\u3002\n        3. \u76ee\u5f55\u5e94\u5c3d\u53ef\u80fd\u5177\u4f53\u548c\u5145\u5206\uff0c\u5305\u62ec\u4e00\u7ea7\u548c\u4e8c\u7ea7\u76ee\u5f55\u3002\u4e8c\u7ea7\u76ee\u5f55\u5728\u6570\u7ec4\u4e2d\u3002\n        4. \u4e0d\u8981\u6709\u989d\u5916\u7684\u7a7a\u683c\u6216\u6362\u884c\u7b26\u3002\n        5. \u6bcf\u4e2a\u76ee\u5f55\u6807\u9898\u90fd\u5177\u6709\u5b9e\u9645\u610f\u4e49\u3002\n        \"\"\"\n        prompt = DIRECTORY_PROMPT.format(topic=topic, language=self.language)\n        resp = await self._aask(prompt=prompt)\n        return OutputParser.extract_struct(resp, dict)\n</code></pre> <p>\u57fa\u672c\u5c31\u662f\u6211\u4eec\u628a\u81ea\u5df1\u7684\u9700\u6c42\u653e\u5165\u6211\u4eec\u51c6\u5907\u597d\u7684\u63d0\u793a\u8bcd\u6a21\u677f\u91cc\uff0c\u8be2\u95ee\u5927\u6a21\u578b\u5f97\u5230\u7ed3\u679c\uff0c\u7136\u540e\u6211\u4eec\u5bf9\u5f97\u5230\u7684\u5185\u5bb9\u505a\u4e00\u4e2a\u89e3\u6790\u3002\uff08\u6570\u636e\u683c\u5f0f\u5316\uff09</p> <pre><code>def extract_struct(cls, text: str, data_type: Union[type(list), type(dict)]) -&gt; Union[list, dict]:\n    \"\"\"Extracts and parses a specified type of structure (dictionary or list) from the given text.\n    The text only contains a list or dictionary, which may have nested structures.\n\n    Args:\n        text: The text containing the structure (dictionary or list).\n        data_type: The data type to extract, can be \"list\" or \"dict\".\n\n    Returns:\n        - If extraction and parsing are successful, it returns the corresponding data structure (list or dictionary).\n        - If extraction fails or parsing encounters an error, it throw an exception.\n    \u8fd4\u56de\uff1a\n    - \u5982\u679c\u63d0\u53d6\u548c\u89e3\u6790\u6210\u529f\uff0c\u5b83\u5c06\u8fd4\u56de\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\uff08\u5217\u8868\u6216\u5b57\u5178\uff09\u3002\n    - \u5982\u679c\u63d0\u53d6\u5931\u8d25\u6216\u89e3\u6790\u9047\u5230\u9519\u8bef\uff0c\u5219\u629b\u51fa\u5f02\u5e38\u3002\n    Examples:\n        &gt;&gt;&gt; text = 'xxx [1, 2, [\"a\", \"b\", [3, 4]], {\"x\": 5, \"y\": [6, 7]}] xxx'\n        &gt;&gt;&gt; result_list = OutputParser.extract_struct(text, \"list\")\n        &gt;&gt;&gt; print(result_list)\n        &gt;&gt;&gt; # Output: [1, 2, [\"a\", \"b\", [3, 4]], {\"x\": 5, \"y\": [6, 7]}]\n\n        &gt;&gt;&gt; text = 'xxx {\"x\": 1, \"y\": {\"a\": 2, \"b\": {\"c\": 3}}} xxx'\n        &gt;&gt;&gt; result_dict = OutputParser.extract_struct(text, \"dict\")\n        &gt;&gt;&gt; print(result_dict)\n        &gt;&gt;&gt; # Output: {\"x\": 1, \"y\": {\"a\": 2, \"b\": {\"c\": 3}}}\n    \"\"\"\n    # Find the first \"[\" or \"{\" and the last \"]\" or \"}\"\n    start_index = text.find(\"[\" if data_type is list else \"{\")\n    end_index = text.rfind(\"]\" if data_type is list else \"}\")\n\n    if start_index != -1 and end_index != -1:\n        # Extract the structure part\n        structure_text = text[start_index : end_index + 1]\n\n        try:\n            # Attempt to convert the text to a Python data type using ast.literal_eval\n            result = ast.literal_eval(structure_text)\n\n            # Ensure the result matches the specified data type\n            if isinstance(result, list) or isinstance(result, dict):\n                return result\n\n            raise ValueError(f\"The extracted structure is not a {data_type}.\")\n\n        except (ValueError, SyntaxError) as e:\n            raise Exception(f\"Error while extracting and parsing the {data_type}: {e}\")\n    else:\n        logger.error(f\"No {data_type} found in the text.\")\n        return [] if data_type is list else {}\n</code></pre> <p>\u6ce8\u91ca\u91cc\u7ed9\u4e86\u89e3\u6790\u7684example\uff0c\u8fd9\u91cc\u518d\u63d0\u4e00\u4e0b</p> <pre><code>&gt;&gt;&gt; text = 'xxx [1, 2, [\"a\", \"b\", [3, 4]], {\"x\": 5, \"y\": [6, 7]}] xxx'\n&gt;&gt;&gt; result_list = OutputParser.extract_struct(text, \"list\")\n&gt;&gt;&gt; print(result_list)\n&gt;&gt;&gt; # Output: [1, 2, [\"a\", \"b\", [3, 4]], {\"x\": 5, \"y\": [6, 7]}]\n\n&gt;&gt;&gt; text = 'xxx {\"x\": 1, \"y\": {\"a\": 2, \"b\": {\"c\": 3}}} xxx'\n&gt;&gt;&gt; result_dict = OutputParser.extract_struct(text, \"dict\")\n&gt;&gt;&gt; print(result_dict)\n&gt;&gt;&gt; # Output: {\"x\": 1, \"y\": {\"a\": 2, \"b\": {\"c\": 3}}}\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u5927\u6a21\u578b\u8f93\u51fa\u7684\u76ee\u5f55\u7ed3\u6784\u8f6c\u4e3a\u4e86\u53ef\u89e3\u6790\u7684\u5b57\u5178\u5bf9\u8c61\uff0c\u8fd9\u91cc\u4ee5\u5199\u4e00\u7bc7Mysql\u6559\u7a0b\u6587\u6863\u4e3a\u4f8b\uff0c\u5b83\u7684\u8f93\u51fa\u5c31\u5982\u4e0b\uff1a</p> <pre><code>{'title': 'MySQL \u6559\u7a0b', 'directory': [{'MySQL \u7b80\u4ecb': []}, {'\u5b89\u88c5\u4e0e\u914d\u7f6e': ['\u5b89\u88c5MySQL', '\u914d\u7f6eMySQL']}, {'\u57fa\u672c\u64cd\u4f5c': ['\u521b\u5efa\u6570\u636e\u5e93', '\u521b\u5efa\u8868', '\u63d2\u5165\u6570\u636e', '\u67e5\u8be2\u6570\u636e', '\u66f4\u65b0\u6570\u636e', '\u5220\u9664\u6570\u636e']}, {'\u9ad8\u7ea7\u64cd\u4f5c': ['\u7d22\u5f15', '\u7ea6\u675f', '\u8fde\u63a5\u67e5\u8be2', '\u5b50\u67e5\u8be2', '\u4e8b\u52a1', '\u89c6\u56fe']}, {'\u5907\u4efd\u4e0e\u6062\u590d': ['\u5907\u4efd\u6570\u636e\u5e93', '\u6062\u590d\u6570\u636e\u5e93']}, {'\u6027\u80fd\u4f18\u5316': ['\u4f18\u5316\u67e5\u8be2\u8bed\u53e5', '\u4f18\u5316\u8868\u7ed3\u6784', '\u7f13\u5b58\u914d\u7f6e']}, {'\u5e38\u89c1\u95ee\u9898': ['\u8fde\u63a5\u95ee\u9898', '\u6743\u9650\u95ee\u9898', '\u6027\u80fd\u95ee\u9898']}]}\n</code></pre> <p>\u62ff\u5230\u76ee\u5f55\u540e\u6211\u4eec\u5c31\u9700\u8981\u6839\u636e\u6bcf\u4e2a\u7ae0\u8282\u7684\u5185\u5bb9\u751f\u6210\u7ae0\u8282\u5185\u5bb9\u4e86</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84Agent%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%8A%A9%E6%89%8B/#353-writecontent","title":"3.5.3 \u7f16\u5199 WriteContent \u52a8\u4f5c","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u6839\u636e\u4f20\u5165\u7684\u5b50\u6807\u9898\u6765\u751f\u6210\u5185\u5bb9</p> <pre><code>class WriteContent(Action):\n    \"\"\"Action class for writing tutorial content.\n\n    Args:\n        name: The name of the action.\n        directory: The content to write.\n        language: The language to output, default is \"Chinese\".\n    \"\"\"\n\n    name: str = \"WriteContent\"\n    directory: dict = dict()\n    language: str = \"Chinese\"\n\n    async def run(self, topic: str, *args, **kwargs) -&gt; str:\n        \"\"\"Execute the action to write document content according to the directory and topic.\n\n        Args:\n            topic: The tutorial topic.\n\n        Returns:\n            The written tutorial content.\n        \"\"\"\n        COMMON_PROMPT = \"\"\"\n        You are now a seasoned technical professional in the field of the internet. \n        We need you to write a technical tutorial with the topic \"{topic}\".\n        \"\"\"\n        CONTENT_PROMPT = COMMON_PROMPT + \"\"\"\n        Now I will give you the module directory titles for the topic. \n        Please output the detailed principle content of this title in detail. \n        If there are code examples, please provide them according to standard code specifications. \n        Without a code example, it is not necessary.\n\n        The module directory titles for the topic is as follows:\n        {directory}\n\n        Strictly limit output according to the following requirements:\n        1. Follow the Markdown syntax format for layout.\n        2. If there are code examples, they must follow standard syntax specifications, have document annotations, and be displayed in code blocks.\n        3. The output must be strictly in the specified language, {language}.\n        4. Do not have redundant output, including concluding remarks.\n        5. Strict requirement not to output the topic \"{topic}\".\n        \u73b0\u5728\u6211\u5c06\u4e3a\u60a8\u63d0\u4f9b\u8be5\u4e3b\u9898\u7684\u6a21\u5757\u76ee\u5f55\u6807\u9898\u3002\n        \u8bf7\u8be6\u7ec6\u8f93\u51fa\u6b64\u6807\u9898\u7684\u8be6\u7ec6\u539f\u7406\u5185\u5bb9\u3002\n        \u5982\u679c\u6709\u4ee3\u7801\u793a\u4f8b\uff0c\u8bf7\u6309\u7167\u6807\u51c6\u4ee3\u7801\u89c4\u8303\u63d0\u4f9b\u3002\n        \u6ca1\u6709\u4ee3\u7801\u793a\u4f8b\u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u3002\n\n        \u8be5\u4e3b\u9898\u7684\u6a21\u5757\u76ee\u5f55\u6807\u9898\u5982\u4e0b\uff1a\n        {directory}\n\n        \u4e25\u683c\u6309\u7167\u4ee5\u4e0b\u8981\u6c42\u9650\u5236\u8f93\u51fa\uff1a\n        1. \u9075\u5faaMarkdown\u8bed\u6cd5\u683c\u5f0f\u8fdb\u884c\u5e03\u5c40\u3002\n        2. \u5982\u679c\u6709\u4ee3\u7801\u793a\u4f8b\uff0c\u5fc5\u987b\u9075\u5faa\u6807\u51c6\u8bed\u6cd5\u89c4\u8303\uff0c\u5177\u5907\u6587\u6863\u6ce8\u91ca\uff0c\u5e76\u4ee5\u4ee3\u7801\u5757\u5f62\u5f0f\u663e\u793a\u3002\n        3. \u8f93\u51fa\u5fc5\u987b\u4e25\u683c\u4f7f\u7528\u6307\u5b9a\u8bed\u8a00{language}\u3002\n        4. \u4e0d\u5f97\u6709\u5197\u4f59\u8f93\u51fa\uff0c\u5305\u62ec\u603b\u7ed3\u6027\u9648\u8ff0\u3002\n        5. \u4e25\u7981\u8f93\u51fa\u4e3b\u9898\"{topic}\"\u3002\n        \"\"\"\n        prompt = CONTENT_PROMPT.format(\n            topic=topic, language=self.language, directory=self.directory)\n        return await self._aask(prompt=prompt)\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u6839\u636e\u4f20\u5165\u7684\u5b50\u6807\u9898\u5185\u5bb9\u8c03\u7528\u5927\u6a21\u578b\u751f\u6210\u56de\u7b54\u5373\u53ef</p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84Agent%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%8A%A9%E6%89%8B/#354-tutorialassistant","title":"3.5.4 \u7f16\u5199 TutorialAssistant \u89d2\u8272","text":"<p>\u7f16\u5199\u5b8c\u52a8\u4f5c\u540e\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u9700\u8981\u6211\u4eec\u89e3\u51b3\uff0c\u6309\u7167\u6211\u4eec\u7684\u8bbe\u8ba1\uff0c\u5927\u6a21\u578b\u5e94\u8be5\u5148\u8c03\u7528WriteDirectory \u52a8\u4f5c\u53bb\u751f\u6210\u5927\u7eb2\uff0c\u7136\u540e\u6839\u636e\u5927\u7eb2\u7684\u5185\u5bb9\u53bb\u751f\u6210\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f88\u96be \u628a\u8fd9\u6574\u4e2a\u6d41\u7a0b\u90fd\u8bbe\u8ba1\u4e3a\u56fa\u5b9a\u6d41\u7a0b\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u9700\u8981\u751f\u6210\u7684\u5185\u5bb9\u53d8\u5316\u65f6\uff0c\u5927\u7eb2\u7684\u7ed3\u6784\u4e5f\u4f1a\u968f\u4e4b\u53d8\u5316\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728\u63d0\u793a\u8bcd\u4e2d\u9650\u5236\u5927\u7eb2\u7684\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u79cd\u89e3\u51b3\u65b9\u6cd5\u65e0\u7591\u4e0d\u591f\u4f18\u96c5\u800c\u4e14\u7075\u6d3b\u6b20\u4f73\uff0c\u8fd9\u4e00\u7ae0\u8282\u5185\uff0c\u6211\u4eec\u5c06\u4e3a\u4f60\u5c55\u793aMetaGPT\u662f\u5982\u4f55\u7ec4\u7ec7Action\u7684\u884c \u52a8\u8def\u7ebf\u7684</p> <p>\u6211\u4eec\u4f9d\u7136\u5148\u5b9a\u4e49\u76f8\u5173\u5b57\u6bb5\uff0c\u5e76\u91cd\u5199 <code>__init__</code> \u65b9\u6cd5\u6765\u521d\u59cb\u5316\u6211\u4eec\u7684\u89d2\u8272\u3002</p> <pre><code>class TutorialAssistant(Role):\n    \"\"\"Tutorial assistant, input one sentence to generate a tutorial document in markup format.\n\n    Args:\n        name: The name of the role.\n        profile: The role profile description.\n        goal: The goal of the role.\n        constraints: Constraints or requirements for the role.\n        language: The language in which the tutorial documents will be generated.\n    \"\"\"\n\n    name: str = \"Stitch\"\n    profile: str = \"Tutorial Assistant\"\n    goal: str = \"Generate tutorial documents\"\n    constraints: str = \"Strictly follow Markdown's syntax, with neat and standardized layout\"\n    language: str = \"Chinese\"\n\n    topic: str = \"\"\n    main_title: str = \"\"\n    total_content: str = \"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([WriteDirectory(language=self.language)])\n        self._set_react_mode(react_mode=RoleReactMode.BY_ORDER.value)\n</code></pre> <p>\u5728<code>__init__</code>\u65b9\u6cd5\u4e2d\u6211\u4eec\u58f0\u660e\u4e86\u89d2\u8272\u540d\u79f0\uff0c\u89d2\u8272\u7c7b\u578b\uff0c\u89d2\u8272\u4eba\u7269\u76ee\u7684\uff0c\u4ee5\u53caconstraints\u5219\u662f\u6211\u4eec\u671f\u671b\u5bf9\u8f93\u51fa\u5185\u5bb9\u7684\u7ea6\u675f\uff0c\u6211\u4eec\u5e0c\u671b\u5185\u5bb9\u6700\u7ec8\u4ee5markdown\u683c\u5f0f\u8f93\u51fa\u65b9\u4fbf\u6211\u4eec\u5bfc\u5165\u5230\u7f51\u9875\u6216\u8005\u5176\u4ed6\u5185\u5bb9\u4e2d</p> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u521d\u59cb\u5316\u4e86WriteDirectory\u52a8\u4f5c\u800c\u6ca1\u6709\u521d\u59cb\u5316WriteContent\u52a8\u4f5c\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f</p> <pre><code>def _init_actions(self, actions):\n    self._reset()\n    for idx, action in enumerate(actions):\n        if not isinstance(action, Action):\n            i = action(\"\", llm=self._llm)\n        else:\n            if self._setting.is_human and not isinstance(action.llm, HumanProvider):\n                logger.warning(f\"is_human attribute does not take effect,\"\n                    f\"as Role's {str(action)} was initialized using LLM, try passing in Action classes instead of initialized instances\")\n            i = action\n        i.set_prefix(self._get_prefix(), self.profile)\n        self.actions.append(i)\n        self.states.append(f\"{idx}. {action}\")\n        # \u6700\u540e\u8f93\u51fa\u7684\u6837\u4f8b ['0. WriteContent', '1. WriteContent', '2. WriteContent', '3. WriteContent', '4. WriteContent', '5. WriteContent', '6. WriteContent', '7. WriteContent', '8. WriteContent']\n</code></pre> <p>\u9996\u5148\u6211\u4eec\u6839\u636e role \u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684<code>_init_actions</code> \u65b9\u6cd5\u6765\u770b\uff0c\u5f53\u6211\u4eec\u521d\u59cb\u5316\u4e00\u4e2a\u52a8\u4f5c\u65f6\uff0c \u8fd9\u4e2a\u52a8\u4f5c\u5c06\u88ab\u52a0\u5165\u5230 <code>self._actions</code> \u4e2d\uff0c\u800c self._actions \u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5b58\u50a8\u4e86\u6211\u4eec \u6240\u6709\u7684\u52a8\u4f5c\u3002  </p> <ol> <li>\u9996\u5148\uff0c\u4f7f\u7528 enumerate\u51fd\u6570\u6765\u540c\u65f6\u83b7\u53d6\u64cd\u4f5c\u5217\u8868\u4e2d\u7684\u7d22\u5f15 idx \u548c\u5bf9\u5e94\u7684\u64cd\u4f5caction\u3002</li> <li>\u7136\u540e\uff0c\u68c0\u67e5\u6bcf\u4e2a action\u662f\u5426\u662f Action \u7c7b\u7684\u5b9e\u4f8b\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Action \u5b9e\u4f8b\u5e76\u8d4b\u503c\u7ed9\u53d8\u91cf i\u3002 </li> <li>\u5982\u679c action \u662f Action \u7c7b\u7684\u5b9e\u4f8b\uff0c\u4f1a\u68c0\u67e5\u662f\u5426\u8bbe\u7f6e\u4e3a\u4eba\u5de5\u64cd\u4f5c\uff08is_human\uff09\u3002\u5982 \u679c\u662f\uff0c\u5219\u4f1a\u53d1\u51fa\u8b66\u544a\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Action\u5b9e\u4f8b\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9\u53d8\u91cfi\u3002 </li> <li>\u8c03\u7528 i \u7684 set_prefix \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u8bbe\u7f6e\u64cd\u4f5c\u7684\u524d\u7f00\u3002</li> <li>\u5c06 i \u6dfb\u52a0\u5230_actions \u5217\u8868\u4e2d\u3002</li> <li>\u5c06\u8868\u793a\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230_states \u5217\u8868\u4e2d\u3002 </li> </ol> <p>\u63a5\u7740\u6211\u4eec\u6765\u67e5\u770bRole\u57fa\u7c7b\u4e2drun\u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u5f53\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u89d2\u8272\u4f7f\u4ed6run\u65f6\u4ed6\u4f1a\u5982\u4f55\u5de5\u4f5c  </p> <p>\u5982\u679c\u6709\u5165\u53c2message \u5c31\u5c06message \u6dfb\u52a0\u5230 role \u7684\u8bb0\u5fc6\u4e2d\u5982\u679c\u6ca1\u6709\u5165\u53c2\u5c31\u89c2\u5bdf\u73af\u5883\u4e2d \u7684\u65b0\u6d88\u606f</p> <pre><code>async def run(self, message=None):\n    \"\"\"Observe, and think and act based on the results of the observation\n        \u89c2\u5bdf\uff0c\u5e76\u6839\u636e\u89c2\u5bdf\u7ed3\u679c\u8fdb\u884c\u601d\u8003\u548c\u884c\u52a8\u3002\"\"\"\n    if message:\n        if isinstance(message, str):\n            message = Message(message)\n        if isinstance(message, Message):\n            self.recv(message)\n        if isinstance(message, list):\n            self.recv(Message(\"\\n\".join(message)))\n         '''\u5982\u679cmessage\u5b58\u5728\uff0c\u5b83\u4f1a\u68c0\u67e5message\u7684\u7c7b\u578b\uff0c\n            \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3aMessage\u5bf9\u8c61\uff1b\n            \u5982\u679c\u662fMessage\u5bf9\u8c61\uff0c\u5219\u76f4\u63a5\u8c03\u7528recv\u65b9\u6cd5\uff1b\n            \u5982\u679c\u662f\u5217\u8868\uff0c\u5219\u5c06\u5217\u8868\u4e2d\u7684\u6d88\u606f\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\uff0c\u7136\u540e\u518d\u8c03\u7528recv\u65b9\u6cd5\u3002\n            \u76f8\u5f53\u4e8e\u9884\u5904\u7406\u5c06\u5165\u53c2\u8f6c\u5316\u4e3aMessage\u5bf9\u8c61\u5e76\u6dfb\u52a0\u5230role\u7684\u8bb0\u5fc6\u4e2d'''\n    elif not await self._observe():\n        # If there is no new information, suspend and wait\n        logger.debug(f\"{self._setting}: no news. waiting.\")\n        return\n\n    rsp = await self.react()\n    # Publish the reply to the environment, waiting for the next subscriber to process\n    self._publish_message(rsp)\n    return rsp\n</code></pre> <p>recv\u65b9\u6cd5\u7684\u5b9e\u73b0\uff1a</p> <pre><code>def recv(self, message: Message) -&gt; None:\n    \"\"\"add message to history.\"\"\"\n    # self._history += f\"\\n{message}\"\n    # self._context = self._history\n    if message in self.rc.memory.get():\n        return\n    self.rc.memory.add(message)\n</code></pre> <p>\u9996\u5148\u5b83\u5c06\u63a5\u53d7\u7528\u6237\u7684\u8f93\u5165\uff08message\uff09\uff0c\u7136\u540e\u89c2\u5bdf\u73af\u5883\u4fe1\u606f\uff08\u76ee\u524d\u6211\u4eec\u8fd8\u4e0d\u6d89\u53ca\u8fd9\u90e8\u5206\u5185\u5bb9\uff09\uff0c\u63a5\u7740\u6211\u4eec\u5c06\u8c03\u7528react\u65b9\u6cd5\u6765\u83b7\u53d6\u8f93\u51fa</p> <pre><code>async def react(self) -&gt; Message:\n    \"\"\"Entry to one of three strategies by which Role reacts to the observed Message\n        \u901a\u8fc7\u89c2\u5bdf\u5230\u7684\u6d88\u606f\uff0c\u89d2\u8272\u5bf9\u5176\u4e2d\u4e00\u79cd\u7b56\u7565\u8fdb\u884c\u53cd\u5e94\u3002\"\"\"\n    if self.rc.react_mode == RoleReactMode.REACT:\n        rsp = await self._react()\n    elif self.rc.react_mode == RoleReactMode.BY_ORDER:\n        rsp = await self._act_by_order()\n    elif self.rc.react_mode == RoleReactMode.PLAN_AND_ACT:\n        rsp = await self._plan_and_act()\n    self._set_state(state=-1) # current reaction is complete, reset state to -1 and todo back to None\n    return rsp\n</code></pre> <p>\u5f53\u6211\u4eec\u4e0d\u6307\u5b9areact_mode \u65f6\u5c06\u4f1a\u6267\u884c<code>self._react()</code>\u65b9\u6cd5\uff0c\u540c\u65f6\u6267\u884c<code>self._set_state()</code>\u65b9\u6cd5\u5c06\u521d\u59cb\u5316\u6b64\u65f6\u72b6\u6001\u4e3a-1</p> <p>\u8fd9\u91cc\u7684state\u5c31\u4ee3\u8868\u5f53\u524dagent\u9700\u8981\u6267\u884c\u52a8\u4f5c\u7684\u4e0b\u6807\uff0c\u5f53state\u4e3a-1\u65f6\uff0c\u6b64\u65f6\u6ca1\u6709\u9700\u8981\u6267\u884c\u7684action  self.rc.todo \u6b64\u65f6\u5c31\u4e3a\u7a7a</p> <pre><code>def _set_state(self, state: int):\n    \"\"\"Update the current state.\"\"\"\n    self.rc.state = state\n    logger.debug(self.actions)\n    self.rc.todo = self.actions[self.rc.state] if state &gt;= 0 else None\n</code></pre> <p>\u518d\u6765\u770b self_react()\u65b9\u6cd5  </p> <p>\uffee \u5148\u601d\u8003\uff0c\u7136\u540e\u884c\u52a8\uff0c\u76f4\u5230\u89d2\u8272\u8ba4\u4e3a\u662f\u65f6\u5019\u505c\u6b62\u5e76\u4e14\u4e0d\u9700\u8981\u518d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 \uffee \u8fd9\u662fReAct\u8bba\u6587\u4e2d\u7684\u6807\u51c6\u601d\u8003-\u884c\u52a8\u5faa\u73af\uff0c\u5728\u4efb\u52a1\u89e3\u51b3\u4e2d\u4ea4\u66ff\u8fdb\u884c\u601d\u8003\u548c\u884c\u52a8\uff0c\u5373<code>_\u601d\u8003 -&gt; _\u884c\u52a8 -&gt; _\u601d\u8003 -&gt; _\u884c\u52a8 -&gt; ...</code> \uffee \u4f7f\u7528llm\u5728\u601d\u8003\u8fc7\u7a0b\u4e2d\u52a8\u6001\u9009\u62e9\u884c\u52a8\u3002   </p> <p>\u51fd\u6570\u4e2d\u7684<code>actions_taken</code> \u53d8\u91cf\u7528\u4e8e\u8ddf\u8e2a\u5df2\u7ecf\u6267\u884c\u7684\u52a8\u4f5c\u6b21\u6570\u3002\u5728<code>while</code> \u5faa\u73af \u4e2d\uff0c\u51fd\u6570\u4f1a\u4e0d\u65ad\u8fdb\u884c\u601d\u8003\u548c\u884c\u52a8\uff0c\u76f4\u5230\u8fbe\u5230\u6700\u5927\u5faa\u73af\u6b21\u6570\u4e3a\u6b62\u3002\u5728\u6bcf\u6b21\u5faa\u73af\u4e2d\uff0c\u9996\u5148\u4f1a\u8c03\u7528<code>_think</code>\u65b9\u6cd5\uff0c\u7136\u540e\u68c0\u67e5\u662f\u5426\u6709\u5f85\u529e\u4e8b\u9879\u3002\u5982\u679c\u6ca1\u6709\u5f85\u529e\u4e8b\u9879\uff0c\u5faa\u73af\u5c06\u4f1a\u7ec8\u6b62\u3002\u5982\u679c\u6709\u5f85\u529e\u4e8b\u9879\uff0c\u5219\u4f1a\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u5e76\u6267\u884c\u76f8\u5e94\u7684\u52a8\u4f5c\uff0c\u7136\u540e\u589e\u52a0<code>actions_taken</code> \u7684\u8ba1\u6570\u3002  </p> <p>\u6700\u540e\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u52a8\u4f5c\u7684\u8f93\u51fa\u4f5c\u4e3a\u7ed3\u679c\u3002</p> <pre><code>async def _react(self) -&gt; Message:\n    \"\"\"Think first, then act, until the Role _think it is time to stop and requires no more todo.\n    This is the standard think-act loop in the ReAct paper, which alternates thinking and acting in task solving, i.e. _think -&gt; _act -&gt; _think -&gt; _act -&gt; ... \n    Use llm to select actions in _think dynamically\n    \"\"\"\n    actions_taken = 0\n    rsp = Message(\"No actions taken yet\") # will be overwritten after Role _act\n    while actions_taken &lt; self.rc.max_react_loop:\n        # think\n        await self._think()\n        if self.rc.todo is None:\n            break\n        # act\n        logger.debug(f\"{self._setting}: {self.rc.state=}, will do {self.rc.todo}\")\n        rsp = await self._act()\n        actions_taken += 1\n    return rsp # return output from the last action\n</code></pre> <p>self._react()\u65b9\u6cd5\u57fa\u672c\u51b3\u5b9a\u4e86agent\u7684\u884c\u52a8\u8def\u7ebf\uff0c\u8fd9\u91cc\u9700\u8981\u601d\u8003\u7684\u662f\u8981\u5b9e\u73b0\u6211\u4eec\u671f\u671b\u7684agent\uff0c\u4ed6\u5e94\u8be5\u600e\u6837\u884c\u52a8\uff1f</p> <p>\u6211\u4eec\u91cd\u5199_react\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <p>\u6211\u4eec\u8ba9agent\u5148\u6267\u884c*self*._think()\u65b9\u6cd5\uff0c\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u601d\u8003\u76ee\u524d\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u601d\u8003\u5b8c\u6210\u540e\u6267\u884c\u6211\u4eec\u7684\u52a8\u4f5c\uff0c\u5f53\u6ca1\u6709\u9700\u8981\u91c7\u53d6\u7684\u884c\u52a8\u540e\u6211\u4eec\u5c31\u9000\u51fa\u5faa\u73af\uff0c\u628a\u6700\u540e\u6211\u4eec\u5f97\u5230\u7684\u6700\u7ec8\u7ed3\u679c\u5199\u5165\u81f3\u672c\u5730</p> <pre><code>async def _react(self) -&gt; Message:\n    \"\"\"Execute the assistant's think and actions.\n\n    Returns:\n        A message containing the final result of the assistant's actions.\n    \u6267\u884c\u52a9\u624b\u7684\u601d\u8003\u548c\u884c\u52a8\u3002\n    \u8fd4\u56de\uff1a\n    \u5305\u542b\u52a9\u624b\u884c\u52a8\u6700\u7ec8\u7ed3\u679c\u7684\u6d88\u606f\u3002\n    \"\"\"\n    while True:\n        await self._think()\n        if self.rc.todo is None:\n            break\n        msg = await self._act()\n    root_path = TUTORIAL_PATH / datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n    await File.write(root_path, f\"{self.main_title}.md\", self.total_content.encode('utf-8'))\n    return msg\n</code></pre> <p>_think\u65b9\u6cd5\u8d1f\u8d23\u66f4\u65b0\u5f53\u524d\u9700\u8981\u89e6\u53d1\u7684\u884c\u4e3a</p> <p>\u6211\u4eec\u91cd\u5199_think\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <p>\u5f53\u76ee\u524d\u6ca1\u6709\u9700\u8981\u6267\u884c\u7684\u52a8\u4f5c\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u5206\u914d\u7684\u52a8\u4f5c\u6267\u884c\u7ed3\u675f\u540e self.rc.todo\u4e3aNone\u65f6\uff0c\u8ba9\u4ed6\u6267\u884c\u76ee\u524daction\u5217\u8868\u4e2d\u521d\u59cb\u7684action\uff0c\u5982\u679c\u5f53\u524d\u8fd8\u6ca1\u6709\u6267\u884c\u5230\u76ee\u524daction\u5217\u8868\u7684\u672b\u5c3e\uff0c\u90a3\u4e48\u5c31\u6267\u884c\u4e0b\u4e00\u4e2a\u52a8\u4f5c\uff0c\u5426\u5219\u5c06\u76ee\u524d\u7684*self*.rc.todo \u7f6e\u4e3aNone</p> <pre><code>async def _think(self) -&gt; None:\n    \"\"\"Determine the next action to be taken by the role.\"\"\"\n    if self.rc.todo is None:\n        self._set_state(0)\n        return\n\n    if self.rc.state + 1 &lt; len(self.states):\n        self._set_state(self.rc.state + 1)\n    else:\n        self.rc.todo = None\n</code></pre> <p>\u601d\u8003\u7ed3\u675f\u540e\uff0c\u8fd9\u4e2a\u89d2\u8272\u5c31\u8be5\u884c\u52a8\u8d77\u6765\u4e86</p> <p>\u6211\u4eec\u91cd\u5199_act\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <p><code>_act</code> \u65b9\u6cd5\u4e2d\u6211\u4eec\u5c06\u76ee\u524d\u7684todo\u5185\u5bb9\u6309\u7167action\u7684\u7c7b\u578b\u5206\u5f00\u5904\u7406\uff0c\u5f53\u76ee\u524d\u9700\u8981\u751f\u6210\u76ee\u5f55\u65f6\u6211\u4eec\u5c31\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165\uff0c\u4f20\u5165 WriteDirectory action \u5185 \u751f\u6210\u5bf9\u5e94\u7684\u76ee\u5f55\uff0c\u6700\u540e\uff0c\u5728 <code>_handle_directory</code> \u65b9\u6cd5\u4e2d\u6839\u636e\u76ee\u5f55\u5185\u5bb9\uff0c\u6211\u4eec\u751f\u6210\u5b50\u4efb\u52a1\uff0c\u4e5f\u5c31\u662f\u6839\u636e\u6807\u9898\u9898\u76ee\u6765\u751f\u6210\u5185\u5bb9\uff0c\u5b50\u4efb\u52a1\u751f\u6210\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u4f7f\u7528self._init_actions\u66f4\u65b0\u76ee\u524d\u7684\u4efb\u52a1\u5217\u8868</p> <p>\u5f53\u4e0b\u6b21\u8fd0\u884c_act\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u5c31\u5c06\u6267\u884cWriteContent \u52a8\u4f5c\uff0c\u6765\u751f\u6210\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u5185\u5bb9</p> <pre><code>async def _act(self) -&gt; Message:\n    \"\"\"Perform an action as determined by the role.\n\n    Returns:\n            A message containing the result of the action.\n    \"\"\"\n    todo = self.rc.todo\n    if type(todo) is WriteDirectory:\n        msg = self.rc.memory.get(k=1)[0]\n        self.topic = msg.content\n        resp = await todo.run(topic=self.topic)\n        logger.info(resp)\n        return await self._handle_directory(resp)#\u5c06writedirector\u751f\u6210\u7684\u76ee\u5f55\u4e00\u7ea7\u6807\u9898actions\u6dfb\u52a0\u5230actions\u5217\u8868\u4e2d\u3002\n    resp = await todo.run(topic=self.topic)\n    logger.info(resp)\n    if self.total_content != \"\":\n        self.total_content += \"\\n\\n\\n\"\n    self.total_content += resp\n    return Message(content=resp, role=self.profile)\n\nasync def _handle_directory(self, titles: Dict) -&gt; Message:\n    \"\"\"Handle the directories for the tutorial document.\n\n    Args:\n        titles: A dictionary containing the titles and directory structure,\n                such as {\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}\n\n    Returns:\n        A message containing information about the directory.\n        \u5904\u7406\u6559\u7a0b\u6587\u6863\u7684\u76ee\u5f55\u3002\n        \u53c2\u6570\uff1a\n        titles\uff1a\u5305\u542b\u6807\u9898\u548c\u76ee\u5f55\u7ed3\u6784\u7684\u5b57\u5178\uff0c\n        \u4f8b\u5982{\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}\u3002\n        \u8fd4\u56de\u503c\uff1a\n        \u5305\u542b\u76ee\u5f55\u4fe1\u606f\u7684\u6d88\u606f\u3002\n    \"\"\"\n    # \u5f53\u751f\u6210\u76ee\u5f55\u540e\u8bb0\u5f55\u76ee\u5f55\u6807\u9898\uff08\u56e0\u4e3a\u6700\u540e\u8981\u8f93\u51fa\u5b8c\u6574\u6587\u6863\uff09\n    self.main_title = titles.get(\"title\")\n    directory = f\"{self.main_title}\\n\"\n    # self.total_content\u7528\u6765\u5b58\u50a8\u6700\u597d\u8981\u8f93\u51fa\u7684\u6240\u6709\u5185\u5bb9\n    self.total_content += f\"# {self.main_title}\"\n    actions = list()\n    for first_dir in titles.get(\"directory\"):\n        # \u6839\u636e\u76ee\u5f55\u7ed3\u6784\u6765\u751f\u6210\u65b0\u7684\u9700\u8981\u884c\u52a8\u7684action\uff08\u76ee\u524d\u53ea\u8bbe\u8ba1\u4e86\u4e24\u7ea7\u76ee\u5f55\uff09\n        actions.append(WriteContent(language=self.language, directory=first_dir))\n        key = list(first_dir.keys())[0]\n        directory += f\"- {key}\\n\"\n        for second_dir in first_dir[key]:\n            directory += f\"  - {second_dir}\\n\"\n    self._init_actions(actions)\n    self.rc.todo = None\n    return Message(content=directory)\n</code></pre> <p>_handle_directory(self, titles: Dict)\u7684GPT\u5206\u6790</p> <p>\u8f93\u5165\uff1a{\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}</p> <ul> <li><code>titles</code>\u5b57\u5178: \u5305\u542b\u6559\u7a0b\u7684\u6807\u9898\u548c\u76ee\u5f55\u7ed3\u6784\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6807\u9898\u662f<code>\"xxx\"</code>\uff0c\u800c\u76ee\u5f55\u7ed3\u6784\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a<code>\"dir 1\"</code>\u7684\u76ee\u5f55\uff0c\u5b83\u53c8\u5305\u542b\u4e24\u4e2a\u5b50\u76ee\u5f55<code>\"sub dir 1\"</code>\u548c<code>\"sub dir 2\"</code>\u3002</li> </ul> <p>\u51fd\u6570\u5904\u7406\u6d41\u7a0b</p> <ol> <li>\u8bb0\u5f55\u6559\u7a0b\u6807\u9898\uff1a\u9996\u5148\uff0c\u51fd\u6570\u4ece<code>titles</code>\u5b57\u5178\u4e2d\u63d0\u53d6<code>\"title\"</code>\u952e\u7684\u503c\uff0c\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9<code>self.main_title</code>\u3002\u8fd9\u91cc\uff0c<code>self.main_title</code>\u5c06\u88ab\u8bbe\u7f6e\u4e3a<code>\"xxx\"</code>\u3002</li> <li>\u521d\u59cb\u5316\u76ee\u5f55\u5b57\u7b26\u4e32\uff1a\u63a5\u7740\uff0c\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a<code>directory</code>\u7684\u5b57\u7b26\u4e32\uff0c\u5176\u521d\u59cb\u5185\u5bb9\u662f\u4e3b\u6807\u9898\uff08<code>self.main_title</code>\uff09\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6362\u884c\u7b26\u3002</li> <li>\u66f4\u65b0\u603b\u5185\u5bb9\uff1a\u5c06\u4e3b\u6807\u9898\u6dfb\u52a0\u5230<code>self.total_content</code>\u5b57\u7b26\u4e32\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u6700\u7ec8\u8981\u8f93\u51fa\u7684\u6240\u6709\u6559\u7a0b\u5185\u5bb9\u3002\u6807\u9898\u524d\u9762\u52a0\u4e0aMarkdown\u683c\u5f0f\u7684\u4e00\u7ea7\u6807\u9898\u6807\u8bb0\u3002</li> <li>\u904d\u5386\u76ee\u5f55\u9879\uff1a\u63a5\u7740\uff0c\u51fd\u6570\u904d\u5386<code>titles[\"directory\"]</code>\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff08\u8fd9\u91cc\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5373<code>{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}</code>\uff09\uff1a</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u4e00\u7ea7\u76ee\u5f55\uff08\u5982<code>\"dir 1\"</code>\uff09\uff0c\u51fd\u6570\u4f1a\uff1a<ul> <li>\u521b\u5efa\u4e00\u4e2a<code>WriteContent</code>\u52a8\u4f5c\uff0c\u5c06\u5f53\u524d\u4e00\u7ea7\u76ee\u5f55\u4f20\u5165\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230<code>actions</code>\u5217\u8868\u4e2d\u3002</li> <li>\u5c06\u4e00\u7ea7\u76ee\u5f55\u6807\u9898\u6dfb\u52a0\u5230<code>directory</code>\u5b57\u7b26\u4e32\u4e2d\uff0c\u524d\u9762\u52a0\u4e0aMarkdown\u683c\u5f0f\u7684\u5217\u8868\u9879\u6807\u8bb0<code>-</code>\u3002</li> </ul> </li> <li>\u63a5\u7740\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e8c\u7ea7\u76ee\u5f55\uff08\u5982<code>\"sub dir 1\"</code>\u548c<code>\"sub dir 2\"</code>\uff09\uff0c\u51fd\u6570\u4f1a\u5c06\u5b83\u4eec\u4e5f\u6dfb\u52a0\u5230<code>directory</code>\u5b57\u7b26\u4e32\u4e2d\uff0c\u4f46\u4f5c\u4e3a\u5b50\u5217\u8868\u9879\uff0c\u524d\u9762\u52a0\u4e0a<code>\" - \"</code>\u3002</li> <li>\u521d\u59cb\u5316\u540e\u7eed\u52a8\u4f5c\uff1a\u4f7f\u7528<code>self._init_actions(actions)</code>\uff0c\u521d\u59cb\u5316<code>TutorialAssistant</code>\u5bf9\u8c61\u7684\u540e\u7eed\u52a8\u4f5c\u3002\u8fd9\u4e9b\u52a8\u4f5c\u57fa\u4e8e\u521a\u521a\u521b\u5efa\u7684<code>actions</code>\u5217\u8868\uff0c\u5373\u4e3a\u6bcf\u4e2a\u76ee\u5f55\u9879\u521b\u5efa\u6559\u7a0b\u5185\u5bb9\u3002</li> <li>\u6e05\u9664\u5f85\u529e\u4e8b\u9879\uff1a\u5c06<code>self``.rc.``todo</code>\u8bbe\u7f6e\u4e3a<code>None</code>\uff0c\u8868\u793a\u5f53\u524d\u6ca1\u6709\u66f4\u591a\u5f85\u5904\u7406\u7684\u4e8b\u9879\u3002</li> <li>\u8fd4\u56de\u76ee\u5f55\u4fe1\u606f\uff1a\u6700\u540e\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a<code>Message</code>\u5bf9\u8c61\uff0c\u5176\u5185\u5bb9\u662f\u7ecf\u8fc7\u683c\u5f0f\u5316\u7684\u76ee\u5f55\u5b57\u7b26\u4e32<code>directory</code>\u3002</li> </ol> <p>\u4f8b\u5b50\u8f93\u51fa</p> <p>\u4ee5\u8f93\u5165<code>{\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}</code>\u4e3a\u4f8b\uff0c\u51fd\u6570\u8f93\u51fa\u7684<code>Message</code>\u5bf9\u8c61\u7684\u5185\u5bb9\u5c06\u4f1a\u662f\uff1a</p> <p>xxx</p> <ul> <li>dir 1</li> <li>sub dir 1</li> <li>sub dir 2</li> </ul> <p>\u8fd9\u4e2a\u8f93\u51fa\u4ee5Markdown\u683c\u5f0f\u5c55\u793a\u4e86\u6559\u7a0b\u7684\u4e3b\u6807\u9898\u548c\u76ee\u5f55\u7ed3\u6784\uff0c\u4e3a\u540e\u7eed\u521b\u5efa\u6559\u7a0b\u5185\u5bb9\u63d0\u4f9b\u4e86\u7ed3\u6784\u6846\u67b6\u3002</p> <p>\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u7406\u89e3\uff0c\u8fd9\u91cc\u6211\u5236\u4f5c\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u601d\u7ef4\u5bfc\u56fe\u6765\u5e2e\u52a9\u4f60\u68b3\u7406\u8fd9\u4e2a\u8fc7\u7a0b</p> <p></p>"},{"location":"chapter3/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84Agent%EF%BC%9A%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%8A%A9%E6%89%8B/#355-tutorialassistant","title":"3.5.5 \u8fd0\u884c TutorialAssistant \u89d2\u8272","text":"<p>\u63a5\u4e0b\u6765\u4f60\u53ea\u9700\u8981\u521d\u59cb\u5316\u5b83\u5e76\u4f7f\u7528\u4e00\u4e2a\u8d77\u59cb\u6d88\u606f\u8fd0\u884c\u5b83\u3002</p> <pre><code>import asyncio\n\nasync def main():\n    msg = \"Git \u6559\u7a0b\"\n    role = TutorialAssistant()\n    logger.info(msg)\n    result = await role.run(msg)\n    logger.info(result)\n\nasyncio.run(main())\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>from datetime import datetime\nfrom typing import Dict\nimport asyncio\nfrom metagpt.actions.write_tutorial import WriteDirectory, WriteContent\nfrom metagpt.const import TUTORIAL_PATH\nfrom metagpt.logs import logger\nfrom metagpt.roles.role import Role, RoleReactMode\nfrom metagpt.schema import Message\nfrom metagpt.utils.file import File\n\nfrom typing import Dict\n\nfrom metagpt.actions import Action\nfrom metagpt.prompts.tutorial_assistant import DIRECTORY_PROMPT, CONTENT_PROMPT\nfrom metagpt.utils.common import OutputParser\n\nclass WriteDirectory(Action):\n    \"\"\"Action class for writing tutorial directories.\n\n    Args:\n        name: The name of the action.\n        language: The language to output, default is \"Chinese\".\n    \"\"\"\n\n    name: str = \"WriteDirectory\"\n    language: str = \"Chinese\"\n\n    async def run(self, topic: str, *args, **kwargs) -&gt; Dict:\n        \"\"\"Execute the action to generate a tutorial directory according to the topic.\n\n        Args:\n            topic: The tutorial topic.\n\n        Returns:\n            the tutorial directory information, including {\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}.\n        \"\"\"\n        COMMON_PROMPT = \"\"\"\n        You are now a seasoned technical professional in the field of the internet. \n        We need you to write a technical tutorial with the topic \"{topic}\".\n        \"\"\"\n\n        DIRECTORY_PROMPT = COMMON_PROMPT + \"\"\"\n        Please provide the specific table of contents for this tutorial, strictly following the following requirements:\n        1. The output must be strictly in the specified language, {language}.\n        2. Answer strictly in the dictionary format like {{\"title\": \"xxx\", \"directory\": [{{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}}, {{\"dir 2\": [\"sub dir 3\", \"sub dir 4\"]}}]}}.\n        3. The directory should be as specific and sufficient as possible, with a primary and secondary directory.The secondary directory is in the array.\n        4. Do not have extra spaces or line breaks.\n        5. Each directory title has practical significance.\n        \"\"\"\n        prompt = DIRECTORY_PROMPT.format(topic=topic, language=self.language)\n        resp = await self._aask(prompt=prompt)\n        return OutputParser.extract_struct(resp, dict)\n\nclass WriteContent(Action):\n    \"\"\"Action class for writing tutorial content.\n\n    Args:\n        name: The name of the action.\n        directory: The content to write.\n        language: The language to output, default is \"Chinese\".\n    \"\"\"\n\n    name: str = \"WriteContent\"\n    directory: dict = dict()\n    language: str = \"Chinese\"\n\n    async def run(self, topic: str, *args, **kwargs) -&gt; str:\n        \"\"\"Execute the action to write document content according to the directory and topic.\n\n        Args:\n            topic: The tutorial topic.\n\n        Returns:\n            The written tutorial content.\n        \"\"\"\n        COMMON_PROMPT = \"\"\"\n        You are now a seasoned technical professional in the field of the internet. \n        We need you to write a technical tutorial with the topic \"{topic}\".\n        \"\"\"\n        CONTENT_PROMPT = COMMON_PROMPT + \"\"\"\n        Now I will give you the module directory titles for the topic. \n        Please output the detailed principle content of this title in detail. \n        If there are code examples, please provide them according to standard code specifications. \n        Without a code example, it is not necessary.\n\n        The module directory titles for the topic is as follows:\n        {directory}\n\n        Strictly limit output according to the following requirements:\n        1. Follow the Markdown syntax format for layout.\n        2. If there are code examples, they must follow standard syntax specifications, have document annotations, and be displayed in code blocks.\n        3. The output must be strictly in the specified language, {language}.\n        4. Do not have redundant output, including concluding remarks.\n        5. Strict requirement not to output the topic \"{topic}\".\n        \"\"\"\n        prompt = CONTENT_PROMPT.format(\n            topic=topic, language=self.language, directory=self.directory)\n        return await self._aask(prompt=prompt)\n\nclass TutorialAssistant(Role):\n    \"\"\"Tutorial assistant, input one sentence to generate a tutorial document in markup format.\n\n    Args:\n        name: The name of the role.\n        profile: The role profile description.\n        goal: The goal of the role.\n        constraints: Constraints or requirements for the role.\n        language: The language in which the tutorial documents will be generated.\n    \"\"\"\n\n    name: str = \"Stitch\"\n    profile: str = \"Tutorial Assistant\"\n    goal: str = \"Generate tutorial documents\"\n    constraints: str = \"Strictly follow Markdown's syntax, with neat and standardized layout\"\n    language: str = \"Chinese\"\n\n    topic: str = \"\"\n    main_title: str = \"\"\n    total_content: str = \"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([WriteDirectory(language=self.language)])\n        self._set_react_mode(react_mode=RoleReactMode.BY_ORDER.value)\n\n    async def _think(self) -&gt; None:\n        \"\"\"Determine the next action to be taken by the role.\"\"\"\n        logger.info(self.rc.state)\n        logger.info(self,)\n        if self.rc.todo is None:\n            self._set_state(0)\n            return\n\n        if self.rc.state + 1 &lt; len(self.states):\n            self._set_state(self.rc.state + 1)\n        else:\n            self.rc.todo = None\n\n    async def _handle_directory(self, titles: Dict) -&gt; Message:\n        \"\"\"Handle the directories for the tutorial document.\n\n        Args:\n            titles: A dictionary containing the titles and directory structure,\n                    such as {\"title\": \"xxx\", \"directory\": [{\"dir 1\": [\"sub dir 1\", \"sub dir 2\"]}]}\n\n        Returns:\n            A message containing information about the directory.\n        \"\"\"\n        self.main_title = titles.get(\"title\")\n        directory = f\"{self.main_title}\\n\"\n        self.total_content += f\"# {self.main_title}\"\n        actions = list()\n        for first_dir in titles.get(\"directory\"):\n            actions.append(WriteContent(\n                language=self.language, directory=first_dir))\n            key = list(first_dir.keys())[0]\n            directory += f\"- {key}\\n\"\n            for second_dir in first_dir[key]:\n                directory += f\"  - {second_dir}\\n\"\n        self._init_actions(actions)\n        self.rc.todo = None\n        return Message(content=directory)\n\n    async def _act(self) -&gt; Message:\n        \"\"\"Perform an action as determined by the role.\n\n        Returns:\n            A message containing the result of the action.\n        \"\"\"\n        todo = self.rc.todo\n        if type(todo) is WriteDirectory:\n            msg = self.rc.memory.get(k=1)[0]\n            self.topic = msg.content\n            resp = await todo.run(topic=self.topic)\n            logger.info(resp)\n            return await self._handle_directory(resp)\n        resp = await todo.run(topic=self.topic)\n        logger.info(resp)\n        if self.total_content != \"\":\n            self.total_content += \"\\n\\n\\n\"\n        self.total_content += resp\n        return Message(content=resp, role=self.profile)\n\n    async def _react(self) -&gt; Message:\n        \"\"\"Execute the assistant's think and actions.\n\n        Returns:\n            A message containing the final result of the assistant's actions.\n        \"\"\"\n        while True:\n            await self._think()\n            if self.rc.todo is None:\n                break\n            msg = await self._act()\n        root_path = TUTORIAL_PATH / datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        await File.write(root_path, f\"{self.main_title}.md\", self.total_content.encode('utf-8'))\n        return msg\n\nasync def main():\n    msg = \"Git \u6559\u7a0b\"\n    role = TutorialAssistant()\n    logger.info(msg)\n    result = await role.run(msg)\n    logger.info(result)\n\nasyncio.run(main())\n</code></pre> <p>v0.6.6\u7248\u672c\u7684\u5b8c\u6574\u4ee3\u7801\u4e5f\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u4ed3\u5e93\uff1a</p> <p>https://github.com/geekan/MetaGPT/blob/v0.6.6/metagpt/actions/write_tutorial.py</p> <p>https://github.com/geekan/MetaGPT/blob/v0.6.6/metagpt/roles/tutorial_assistant.py</p>"},{"location":"chapter3/%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/","title":"3.7 &nbsp; \u667a\u80fd\u4f53\u5f00\u53d1\u4f5c\u4e1a","text":""},{"location":"chapter3/%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/#37","title":"3.7 \u667a\u80fd\u4f53\u5f00\u53d1\u4f5c\u4e1a","text":""},{"location":"chapter3/%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/#_1","title":"\u57fa\u7840\u4f5c\u4e1a","text":"<p>\u7ecf\u8fc7\u4e0a\u9762\u7684\u5b66\u4e60\uff0c\u6211\u60f3\u4f60\u5df2\u7ecf\u5bf9 MetaGPT \u7684\u6846\u67b6\u6709\u4e86\u57fa\u672c\u4e86\u89e3\uff0c\u73b0\u5728\u6211\u5e0c\u671b\u4f60\u80fd\u591f\u81ea\u5df1\u7f16\u5199\u8fd9\u6837\u4e00\u4e2a agent  </p> <ul> <li> <p>\u8fd9\u4e2a Agent \u62e5\u6709\u4e09\u4e2a\u52a8\u4f5c \u6253\u53701 \u6253\u53702 \u6253\u53703\uff08\u521d\u59cb\u5316\u65f6 init_action([print,print,print])\uff09</p> </li> <li> <p>\u91cd\u5199\u6709\u5173\u65b9\u6cd5\uff08\u8bf7\u4e0d\u8981\u4f7f\u7528act_by_order\uff0c\u6211\u5e0c\u671b\u4f60\u80fd\u72ec\u7acb\u5b9e\u73b0\uff09\u4f7f\u5f97 Agent \u987a\u5e8f\u6267\u884c\u4e0a\u9762\u4e09\u4e2a\u52a8\u4f5c</p> </li> <li> <p>\u5f53\u4e0a\u8ff0\u4e09\u4e2a\u52a8\u4f5c\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u4e3a Agent \u751f\u6210\u65b0\u7684\u52a8\u4f5c \u6253\u53704 \u6253\u53705 \u6253\u53706 \u5e76\u987a\u5e8f\u6267\u884c\uff0c\uff08\u4e4b\u524d\u6211\u4eec\u521d\u59cb\u5316\u4e86\u4e09\u4e2a print \u52a8\u4f5c\uff0c\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u91cd\u65b0 init_action([...,...,...])\uff0c\u7136\u540e\u987a\u5e8f\u6267\u884c\u8fd9\u4e2a\u65b0\u751f\u6210\u7684\u52a8\u4f5c\u5217\u8868)</p> </li> </ul> <p>\u5982\u679c\u5b8c\u6210\u4e0a\u9762\u7684\u4efb\u52a1\uff0c\u90a3\u8fd9\u6b21\u4f5c\u4e1a\u5df2\u7ecf\u53ef\u4ee5\u7b97\u5b8c\u6210\u4e86\uff0c\u8fd9\u4e2a\u4f5c\u4e1a\u53ef\u4ee5\u7528\u591a\u79cd\u601d\u8def\u53bb\u89e3\u51b3\uff0c\u6bd4\u5982\u6211\u53ef\u4ee5\u76f4\u63a5\u5199\u6b7b\u4e00\u6574\u5957\u7684\u903b\u8f91\uff0c\u751a\u81f3\u90fd\u4e0d\u9700\u8981\u5f15\u5165llm\u6765\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u6211\u5e0c\u671b\u5927\u5bb6\u901a\u8fc7\u8fd9\u4e2a\u4f5c\u4e1a\u6765\u611f\u53d7 MetaGPT \u4e2d Agent \u7684\u884c\u52a8\u903b\u8f91, run-&gt;react-&gt;think-&gt;act \u7684\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u8bd5\u7740\u5728\u4e2d\u95f4\u7684\u67d0\u4e2a\u73af\u8282\u4e2d\u52a0\u5165llm\u7684\u4ea4\u4e92\uff0c\u6765\u5c1d\u8bd5\u51cf\u5c11\u786c\u7f16\u7801\u7684\u5de5\u4f5c\uff0c\u5c31\u50cf1.4\u4e2d\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u8ba9llm\u5e2e\u6211\u4eec\u8bbe\u8ba1\u4e86 action \u5217\u8868\u7684\u5185\u5bb9\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u51fa\u66f4\u591a\u7684\u5c1d\u8bd5\uff0c\u5173\u4e8e\u8fd9\u4e2a Agent \u6211\u4eec\u8fd8\u6709\u66f4\u591a\u53ef\u4ee5\u601d\u8003\u7684\u5730\u65b9</p>"},{"location":"chapter3/%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/#_2","title":"\u601d\u8003\u4f5c\u4e1a","text":"<ul> <li>\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u8bbe\u8ba1\u7684\u6240\u6709\u601d\u8003\u6a21\u5f0f\u90fd\u53ef\u4ee5\u603b\u7ed3\u4e3a\u662f\u94fe\u5f0f\u7684\u601d\u8003\uff08chain of thought\uff09\uff0c\u80fd\u5426\u5229\u7528 MetaGPT \u6846\u67b6\u5b9e\u73b0\u6811\u7ed3\u6784\u7684\u601d\u8003\uff08tree of thought\uff09\u56fe\u7ed3\u6784\u7684\u601d\u8003\uff08graph of thought\uff09\uff1f\u8bd5\u7740\u5b9e\u73b0\u8ba9 ai \u751f\u6210\u6811\u7ed3\u6784\u7684\u52a8\u4f5c\u5217\u8868\uff0c\u5e76\u6309\u7167\u6811\u7684\u904d\u5386\u65b9\u5f0f\u6267\u884c\u4ed6\u4eec\uff0c\u5982\u679c\u4f60\u5b9e\u73b0\uff0c\u8fd9\u5c06\u662f\u52a0\u5206\u9879</li> </ul>"},{"location":"chapter4/","title":"4.\u7b2c\u56db\u7ae0\uff1a\u667a\u80fd\u4f53\u7efc\u8ff0\u53ca\u591a\u667a\u80fd\u4f53\u6846\u67b6\u4ecb\u7ecd","text":""},{"location":"chapter4/#_1","title":"\u524d\u671f\u51c6\u5907","text":"<p>\u672c\u7ae0\u6211\u4eec\u4f1a\u4ecb\u7ecdMetaGPT\u591a\u667a\u80fd\u4f53\u7684\u5f00\u53d1\u6d41\u7a0b,\u901a\u8fc7\u6848\u4f8b\u5b9e\u73b0\u591a\u667a\u80fd\u4f53\u7684\u5f00\u53d1</p>"},{"location":"chapter4/Multi%20Agent%20%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9D%97/","title":"Multi Agent \u6982\u5ff5\u6a21\u5757","text":""},{"location":"chapter4/Multi%20Agent%20%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9D%97/#41-multi-agent","title":"4.1 Multi Agent \u6982\u5ff5\u6982\u8ff0","text":""},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/","title":"\u591a\u667a\u80fd\u4f53\u5f00\u53d1\u4f5c\u4e1a","text":""},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/#44","title":"4.4 \u591a\u667a\u80fd\u4f53\u5f00\u53d1\u4f5c\u4e1a","text":""},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/#_1","title":"\u57fa\u7840\u4f5c\u4e1a","text":"<p>\u57fa\u4e8e env \u6216 team \u8bbe\u8ba1\u4e00\u4e2a\u4f60\u7684\u591a\u667a\u80fd\u4f53\u56e2\u961f\uff0c\u5c1d\u8bd5\u8ba9\u4ed6\u4eec\u5b8c\u6210 \u4f60\u753b\u6211\u731c\u6587\u5b57\u7248 \uff0c\u8981\u6c42\u5176\u4e2d\u542b\u6709\u4e24\u4e2aagent\uff0c\u5176\u4e2d\u4e00\u4e2aagent\u8d1f\u8d23\u63a5\u6536\u6765\u81ea\u7528\u6237\u63d0\u4f9b\u7684\u7269\u4f53\u63cf\u8ff0\u5e76\u8f6c\u544a\u53e6\u4e00\u4e2aagent\uff0c\u53e6\u4e00\u4e2aagent\u5c06\u731c\u6d4b\u7528\u6237\u7ed9\u51fa\u7684\u7269\u4f53\u540d\u79f0\uff0c\u4e24\u4e2aagent\u5c06\u4e0d\u65ad\u4ea4\u4e92\u76f4\u5230\u53e6\u4e00\u4e2a\u7ed9\u51fa\u6b63\u786e\u7684\u7b54\u6848</p> <p>\uff08\u4e5f\u53ef\u4ee5\u5728\u7cfb\u7edf\u4e4b\u4e0a\u7ee7\u7eed\u6269\u5c55\uff0c\u6bd4\u5982\u5f15\u5165\u4e00\u4e2aagent\u6765\u751f\u6210\u8bcd\u8bed\uff0c\u800c\u4eba\u7c7b\u53c2\u4e0e\u4f60\u753b\u6211\u731c\u7684\u8fc7\u7a0b\u4e2d\uff09</p>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91%E4%BD%9C%E4%B8%9A/#_2","title":"\u8fdb\u9636\u4f5c\u4e1a","text":"<p>\u8fdb\u9636\u4f5c\u4e1a\u53ea\u9762\u5411\u613f\u610f\u6df1\u5165\u63a2\u7d22MG\u6f5c\u529b\u5e76\u68c0\u9a8c\u81ea\u5df1\u5b66\u4e60\u6210\u679c\u7684\u540c\u5b66\uff0c\u53ea\u8981\u5b8c\u6210\u57fa\u7840\u4f5c\u4e1a\u89c6\u4e3a\u5b66\u4e60\u5b8c\u6210\u3002</p> <p>\u5982\u4f55\u68c0\u9a8cmg\u7684Agent\u5f00\u53d1\u5b66\u4e60\u7a0b\u5ea6\u5462\uff1f\u6211\u8ba4\u4e3a\u5bf9\u4e8e\u672c\u6b21\u5b66\u4e60\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u95ee\u9898\uff08\u8fc7\u5f80\u4ea4\u7531\u4eba\u89e3\u51b3\u7684\uff09SOP\u53ef\u4ee5\u5c06SOP\u8fc5\u901f\u62bd\u8c61\u6210MG\u7684Role\u548cAction\u5f62\u5f0f\u5e76\u4e14\u7528\u591a\u667a\u80fd\u4f53\u534f\u540c\u5b8c\u6210\uff0c\u5373\u8fbe\u5230\u4e86\u672c\u6b21\u5b66\u4e60\u7684\u76ee\u7684\u3002 \u91cd\u5199babyagi\u662f\u4e00\u4e2a\u975e\u5e38\u5408\u9002\u7684\u4efb\u52a1\u3002 babyagi\u662fyoheinakajima\u7684\u4e00\u4e2ademo\uff0c\u4ed6\u7684\u4e3b\u4e1a\u662f\u4e00\u4f4d\u6295\u8d44\u4eba\uff0c\u57282023\u5e74\u4e0a\u534a\u5e74AutoGPT\u7206\u706b\u4e4b\u9645\uff0c\u5b8c\u6210\u4e86\u8fd9\u4e2ademo\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd9\u4f4d\u6295\u8d44\u4eba\u7684\u65e5\u5e38\u4efb\u52a1\u89c4\u5212\u4f18\u5148\u7ea7\u89e3\u51b3\u7684\u4e00\u5957SOP \u4ee5\u4e0b\u662fbabyagi\u7684\u5b9e\u73b0\u6d41\u7a0b</p> <p></p> <pre><code>import openai\nimport pinecone\nimport time\nfrom collections import deque\nfrom typing import Dict, List\n\n#Set API Keys\nOPENAI_API_KEY = \"\"\nPINECONE_API_KEY = \"\"\nPINECONE_ENVIRONMENT = \"us-east1-gcp\" #Pinecone Environment (eg. \"us-east1-gcp\")\n\n#Set Variables\nYOUR_TABLE_NAME = \"test-table\"\nOBJECTIVE = \"Solve world hunger.\"\nYOUR_FIRST_TASK = \"Develop a task list.\"\n\n#Print OBJECTIVE\nprint(\"\\033[96m\\033[1m\"+\"\\n*****OBJECTIVE*****\\n\"+\"\\033[0m\\033[0m\")\nprint(OBJECTIVE)\n\n# Configure OpenAI and Pinecone\nopenai.api_key = OPENAI_API_KEY\npinecone.init(api_key=PINECONE_API_KEY, environment=PINECONE_ENVIRONMENT)\n\n# Create Pinecone index\ntable_name = YOUR_TABLE_NAME\ndimension = 1536\nmetric = \"cosine\"\npod_type = \"p1\"\nif table_name not in pinecone.list_indexes():\n    pinecone.create_index(table_name, dimension=dimension, metric=metric, pod_type=pod_type)\n\n# Connect to the index\nindex = pinecone.Index(table_name)\n\n# Task list\ntask_list = deque([])\n\ndef add_task(task: Dict):\n    task_list.append(task)\n\ndef get_ada_embedding(text):\n    text = text.replace(\"\\n\", \" \")\n    return openai.Embedding.create(input=[text], model=\"text-embedding-ada-002\")[\"data\"][0][\"embedding\"]\n\ndef task_creation_agent(objective: str, result: Dict, task_description: str, task_list: List[str]):\n    prompt = f\"You are an task creation AI that uses the result of an execution agent to create new tasks with the following objective: {objective}, The last completed task has the result: {result}. This result was based on this task description: {task_description}. These are incomplete tasks: {', '.join(task_list)}. Based on the result, create new tasks to be completed by the AI system that do not overlap with incomplete tasks. Return the tasks as an array.\"\n    response = openai.Completion.create(engine=\"text-davinci-003\",prompt=prompt,temperature=0.5,max_tokens=100,top_p=1,frequency_penalty=0,presence_penalty=0)\n    new_tasks = response.choices[0].text.strip().split('\\n')\n    return [{\"task_name\": task_name} for task_name in new_tasks]\n\ndef prioritization_agent(this_task_id:int):\n    global task_list\n    task_names = [t[\"task_name\"] for t in task_list]\n    next_task_id = int(this_task_id)+1\n    prompt = f\"\"\"You are an task prioritization AI tasked with cleaning the formatting of and reprioritizing the following tasks: {task_names}. Consider the ultimate objective of your team:{OBJECTIVE}. Do not remove any tasks. Return the result as a numbered list, like:\n    #. First task\n    #. Second task\n    Start the task list with number {next_task_id}.\"\"\"\n    response = openai.Completion.create(engine=\"text-davinci-003\",prompt=prompt,temperature=0.5,max_tokens=1000,top_p=1,frequency_penalty=0,presence_penalty=0)\n    new_tasks = response.choices[0].text.strip().split('\\n')\n    task_list = deque()\n    for task_string in new_tasks:\n        task_parts = task_string.strip().split(\".\", 1)\n        if len(task_parts) == 2:\n            task_id = task_parts[0].strip()\n            task_name = task_parts[1].strip()\n            task_list.append({\"task_id\": task_id, \"task_name\": task_name})\n\ndef execution_agent(objective:str,task: str) -&gt; str:\n    #context = context_agent(index=\"quickstart\", query=\"my_search_query\", n=5)\n    context=context_agent(index=YOUR_TABLE_NAME, query=objective, n=5)\n    #print(\"\\n*******RELEVANT CONTEXT******\\n\")\n    #print(context)\n    response = openai.Completion.create(\n        engine=\"text-davinci-003\",\n        prompt=f\"You are an AI who performs one task based on the following objective: {objective}. Your task: {task}\\nResponse:\",\n        temperature=0.7,\n        max_tokens=2000,\n        top_p=1,\n        frequency_penalty=0,\n        presence_penalty=0\n    )\n    return response.choices[0].text.strip()\n\ndef context_agent(query: str, index: str, n: int):\n    query_embedding = get_ada_embedding(query)\n    index = pinecone.Index(index_name=index)\n    results = index.query(query_embedding, top_k=n,\n    include_metadata=True)\n    #print(\"***** RESULTS *****\")\n    #print(results)\n    sorted_results = sorted(results.matches, key=lambda x: x.score, reverse=True)    \n    return [(str(item.metadata['task'])) for item in sorted_results]\n\n# Add the first task\nfirst_task = {\n    \"task_id\": 1,\n    \"task_name\": YOUR_FIRST_TASK\n}\n\nadd_task(first_task)\n# Main loop\ntask_id_counter = 1\nwhile True:\n    if task_list:\n        # Print the task list\n        print(\"\\033[95m\\033[1m\"+\"\\n*****TASK LIST*****\\n\"+\"\\033[0m\\033[0m\")\n        for t in task_list:\n            print(str(t['task_id'])+\": \"+t['task_name'])\n\n        # Step 1: Pull the first task\n        task = task_list.popleft()\n        print(\"\\033[92m\\033[1m\"+\"\\n*****NEXT TASK*****\\n\"+\"\\033[0m\\033[0m\")\n        print(str(task['task_id'])+\": \"+task['task_name'])\n\n        # Send to execution function to complete the task based on the context\n        result = execution_agent(OBJECTIVE,task[\"task_name\"])\n        this_task_id = int(task[\"task_id\"])\n        print(\"\\033[93m\\033[1m\"+\"\\n*****TASK RESULT*****\\n\"+\"\\033[0m\\033[0m\")\n        print(result)\n\n        # Step 2: Enrich result and store in Pinecone\n        enriched_result = {'data': result}  # This is where you should enrich the result if needed\n        result_id = f\"result_{task['task_id']}\"\n        vector = enriched_result['data']  # extract the actual result from the dictionary\n        index.upsert([(result_id, get_ada_embedding(vector),{\"task\":task['task_name'],\"result\":result})])\n\n    # Step 3: Create new tasks and reprioritize task list\n    new_tasks = task_creation_agent(OBJECTIVE,enriched_result, task[\"task_name\"], [t[\"task_name\"] for t in task_list])\n\n    for new_task in new_tasks:\n        task_id_counter += 1\n        new_task.update({\"task_id\": task_id_counter})\n        add_task(new_task)\n    prioritization_agent(this_task_id)\n\ntime.sleep(1)  # Sleep before checking the task list again\n</code></pre> <p>\u4ee5\u4e0a\u662f\u6765\u81ea\u4e8ebabyagi\u4ed3\u5e93\u7684\u6e90\u7801\uff0c\u603b\u884c\u6570140\u884c\u6db5\u76d6prompt\uff0c\u540c\u65f6\u4efb\u52a1\u4e3a\u4e09\u4e2aagent\u8fdb\u884c\u534f\u540c\u7ec4\u7ec7\u3002</p> <p>\u8fd9\u4e2a\u662fbabyagi\u7684webui\u6f14\u793ahttps://babyagi-ui.vercel.app/zh\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u5148\u4f53\u9a8c\u4e00\u4e0b\u4e86\u89e3\u4e00\u4e0bbabyagi\u7684\u8f93\u5165\u8f93\u51fa\u7684workflow\u7ed3\u5408\u4e0a\u56fe\u7528MG\u8fdb\u884c\u91cd\u5199\u3002 \u5176\u4e2dMG\u5df2\u7ecf\u62bd\u8c61\u597d\u4e86\u8bb8\u591a\u4e0a\u5c42\u7c7b\uff0c\u4ee5\u53careact\u7684\u89c4\u5212\u6a21\u5f0f\u548cactions\u5217\u8868\u3002 \u601d\u8003\u90e8\u5206\uff1a</p> <ol> <li>\u4ec0\u4e48\u662fenrich</li> <li>\u4f55\u65f6\u5e94\u8be5creat new task\uff0c\u4f55\u65f6\u5e94\u8be5\u6392\u5e8f\u4efb\u52a1\u4f18\u5148\u7ea7</li> <li>\u65b0\u7684new task\u5e94\u8be5\u89c2\u5bdf\u4ec0\u4e48\u4f5c\u4e3a\u521b\u5efa\u7684\u4f9d\u636e\uff08\u5f53\u524d\u4efb\u52a1\u5217\u8868/\u76ee\u6807/\u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u7ed3\u679c\uff09</li> <li>\u4eba\u7c7b\u662f\u5426\u53ef\u4ee5\u4ecb\u5165\u8fd9\u4e2a\u6d41\u7a0b\u6bd4\u5982\u65b0\u4efb\u52a1\u7684\u5408\u5165\u5ba1\u6838\uff0c\u4efb\u52a1\u6267\u884c\u65f6\u7684\u62c6\u89e3\uff1f</li> </ol> <p>\u4f60\u4e0d\u4e00\u5b9a\u8981\u5b8c\u5168\u4f9d\u636e\u6e90\u7801\u7684\u903b\u8f91\u8fdb\u884c\u91cd\u5199\uff0c\u5c1d\u8bd5\u627e\u5230\u66f4\u4f18\u79c0\u7684SOP.</p> <p>Chroma/Weaviate \u6765\u5b58\u50a8\u548c\u68c0\u7d22\u4e0a\u4e0b\u6587\u7684\u4efb\u52a1\u7ed3\u679c\u3002\u8be5\u811a\u672c\u6839\u636e TABLE_NAME \u53d8\u91cf\u4e2d\u6307\u5b9a\u7684\u8868\u540d\u521b\u5efa Chroma/Weaviate \u96c6\u5408\u3002\u7136\u540e\u4f7f\u7528 Chroma/Weaviate \u5c06\u4efb\u52a1\u7ed3\u679c\u4ee5\u53ca\u4efb\u52a1\u540d\u79f0\u548c\u4efb\u4f55\u5176\u4ed6\u5143\u6570\u636e\u5b58\u50a8\u5728\u96c6\u5408\u4e2d\u3002\u800c\u5411\u91cf\u6570\u636e\u5e93\u5e76\u4e0d\u662f\u672c\u6b21\u5b66\u4e60\u7684\u91cd\u70b9\u5373\u4fbfMG\u7684example\u91cc\u6709\u5bf9\u5411\u91cf\u68c0\u7d22\u8fdb\u884c\u652f\u6301\uff0c\u7406\u8bba\u4e0aloop\u7684\u6b21\u6570\u8f83\u5c11\u65f6\u662f\u53ef\u4ee5\u5c06\u4e0a\u4e0b\u6587\u7684\u4efb\u52a1\u7ed3\u679c\u5b8c\u5168\u7684\u4f5c\u4e3aprompt\u7684\u8f93\u5165\uff0c\u6240\u4ee5\u5728\u672c\u6b21\u5b66\u4e60\u4e2d\u53ef\u4ee5\u5c06\u4e0a\u4e0b\u6587\u7684\u4efb\u52a1\u7ed3\u679c\u5199\u5165\u4e00\u4e2a\u5916\u90e8\u7684txt\u6216\u8005\u76f4\u63a5\u5728memory\u4e2d\u8c03\u7528\u7684\uff0c\u5b66\u4e60\u8005\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5411\u91cf\u6570\u636e\u5e93\u5b8c\u6210\u672c\u6b21\u4efb\u52a1</p>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%BE%A9%E8%AE%BA/","title":"\u591a\u667a\u80fd\u4f53\u6848\u4f8b\uff1a\u8fa9\u8bba","text":""},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%BE%A9%E8%AE%BA/#43","title":"4.3 \u591a\u667a\u80fd\u4f53\u6848\u4f8b : \u8fa9\u8bba","text":"<p>\u5728\u521d\u6b21\u5c1d\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u5c31\u4ee5\u667a\u80fd\u4f53\u8fa9\u8bba\u5e26\u5927\u5bb6\u521d\u6b65\u6d4f\u89c8\u4e86\u4e00\u4e0b\uff1a</p> <pre><code>import asyncio\n\nfrom metagpt.actions import Action\nfrom metagpt.environment import Environment\nfrom metagpt.roles import Role\nfrom metagpt.team import Team\n\naction1 = Action(name=\"AlexSay\", instruction=\"Express your opinion with emotion and don't repeat it\")\naction2 = Action(name=\"BobSay\", instruction=\"Express your opinion with emotion and don't repeat it\")\nalex = Role(name=\"Alex\", profile=\"Democratic candidate\", goal=\"Win the election\", actions=[action1], watch=[action2])\nbob = Role(name=\"Bob\", profile=\"Republican candidate\", goal=\"Win the election\", actions=[action2], watch=[action1])\nenv = Environment(desc=\"US election live broadcast\")\nteam = Team(investment=10.0, env=env, roles=[alex, bob])\n\nasyncio.run(team.run(idea=\"Topic: climate change. Under 80 words per message.\", send_to=\"Alex\", n_round=5))\n</code></pre> <p>\u9274\u4e8e\u4ed6\u4eec\u5df2\u77e5\u7684\u5206\u6b67\uff0c\u8fd9\u6837\u7684\u7ed3\u5408\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u6d3b\u8dc3\u7684\u4ea4\u6d41\u3002\u8fd9\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u4f8b\u5b50\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u8bbe\u8ba1\u591a\u4e2a\u4ee3\u7406\u5e76\u4fc3\u8fdb\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u6211\u4eec\u5c06\u628a\u6211\u4eec\u7684\u5b9e\u9a8c\u79f0\u4e3a\u201c\u62dc\u767b-\u7279\u6717\u666e\u8fa9\u8bba\u201d\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u7528\u8fd9\u4e2a\u6848\u4f8b\u5e26\u5927\u5bb6\u7406\u89e3\u591a\u667a\u80fd\u4f53\u95f4\u901a\u4fe1\u7684\u673a\u5236</p> <p>\u8f93\u51fa\u793a\u4f8b\uff1a</p> <p></p> <p>\u603b\u4f53\u4e0a\uff0c\u6211\u4eec\u9700\u89813\u4e2a\u6b65\u9aa4\u6765\u8bbe\u5b9a\u5b83\u4eec\u7684\u8fa9\u8bba\uff1a</p> <ol> <li>\u5b9a\u4e49\u4e00\u4e2a\u5177\u6709\u53d1\u8a00\u884c\u4e3a\u7684\u8fa9\u624b\u89d2\u8272\uff0c\u6211\u4eec\u5efa\u8bae\u53c2\u8003\u667a\u80fd\u4f53\u5165\u95e8</li> <li>\u5904\u7406\u8fa9\u624b\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u4e5f\u5c31\u662f\u8ba9\u62dc\u767b\u542c\u7279\u6717\u666e\u8bf4\u8bdd\uff0c\u53cd\u4e4b\u4ea6\u7136</li> <li>\u521d\u59cb\u5316\u4e24\u4e2a\u8fa9\u624b\u5b9e\u4f8b\uff0c\u62dc\u767b\u548c\u7279\u6717\u666e\uff0c\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u73af\u5883\u7684\u56e2\u961f\uff0c\u5e76\u4f7f\u5b83\u4eec\u80fd\u591f\u76f8\u4e92\u4ea4\u4e92</li> </ol>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%BE%A9%E8%AE%BA/#431","title":"4.3.1 \u5b9a\u4e49\u52a8\u4f5c","text":"<p>\u8fd9\u91cc\u7684\u52a8\u4f5c\u6211\u4eec\u5728prompt\u4e2d\u9700\u8981\u754c\u5b9a\u8fa9\u8bba\u7684\u80cc\u666f\u4ee5\u53ca\u4e0a\u4e0b\u6587\uff0c\u4ee5\u53ca\u6b64\u6b21\u53d1\u8a00\u7684\u7acb\u573a\u9650\u5236\u7684\u7ed3\u6784\u5316prompt\uff1a</p> <p>\u80cc\u666f</p> <p>\u5047\u8bbe\u4f60\u662f{name}\uff0c\u4f60\u6b63\u5728\u4e0e{opponent_name}\u8fa9\u8bba\u3002</p> <p>\u8fa9\u8bba\u5386\u53f2</p> <p>\u4e4b\u524d\u7684\u56de\u5408\uff1a</p> <p>{context}</p> <p>\u4f60\u7684\u8f6e\u6b21</p> <p>\u73b0\u5728\u8f6e\u5230\u4f60\u4e86\uff0c\u4f60\u5e94\u8be5\u7d27\u5bc6\u56de\u5e94\u5bf9\u624b\u6700\u65b0\u7684\u8bba\u70b9\uff0c\u9648\u8ff0\u81ea\u5df1\u7684\u7acb\u573a\uff0c\u634d\u536b\u81ea\u5df1\u7684\u89c2\u70b9\uff0c\u5e76\u653b\u51fb\u5bf9\u624b\u7684\u8bba\u70b9\uff0c</p> <p>\u7528{name}\u7684\u4fee\u8f9e\u548c\u89c2\u70b9\uff0c\u572880\u4e2a\u5b57\u5185\u8fdb\u884c\u4e00\u6b21\u5f3a\u6709\u529b\u4e14\u60c5\u611f\u5145\u6c9b\u7684\u53cd\u9a73\uff1a\"\"\"</p> <p>\u5728Python\u4e2d\uff0c<code>str.format()</code>\u65b9\u6cd5\u5141\u8bb8\u4f60\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u683c\u5f0f\u5316\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06\u8fd9\u4e9b\u53c2\u6570\u66ff\u6362\u5230\u5b57\u7b26\u4e32\u4e2d\uff0c\u53c2\u6570\u7684\u4f4d\u7f6e\u548c\u683c\u5f0f\u7531\u5927\u62ec\u53f7 <code>{}</code> \u4e2d\u7684\u6807\u8bc6\u7b26\u786e\u5b9a\u3002<code>{}</code> \u5728\u5b57\u7b26\u4e32\u4e2d\u7528\u4f5c\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u63a5\u6536\u6765\u81ea <code>format</code> \u65b9\u6cd5\u7684\u53c2\u6570\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6e\u53c2\u6570\u6216\u5173\u952e\u5b57\u53c2\u6570\u6765\u6307\u5b9a\u66ff\u6362\u5185\u5bb9\u3002</p> <p>\u5728\u4f60\u63d0\u4f9b\u7684\u793a\u4f8b\u4e2d\uff0c<code>PROMPT_TEMPLATE</code> \u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e09\u4e2a\u7531\u5927\u62ec\u53f7 <code>{}</code> \u5305\u56f4\u7684\u5360\u4f4d\u7b26\uff1a<code>{name}</code>, <code>{opponent_name}</code>, \u548c <code>{context}</code>\u3002\u8fd9\u4e9b\u5360\u4f4d\u7b26\u7528\u4e8e\u5728\u5b57\u7b26\u4e32\u4e2d\u63d2\u5165\u52a8\u6001\u5185\u5bb9\u3002</p> <p>\u5f53\u4f60\u8c03\u7528 <code>format</code> \u65b9\u6cd5\u5e76\u4f20\u9012 <code>context</code>, <code>name</code>, <code>opponent_name</code> \u4e09\u4e2a\u53c2\u6570\u65f6\uff0c\u8fd9\u4e9b\u53c2\u6570\u5c06\u88ab\u63d2\u5165\u5230 <code>PROMPT_TEMPLATE</code> \u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u4f4d\u7f6e\u4e2d\uff1a</p> <ul> <li><code>{name}</code> \u5c06\u88ab\u66ff\u6362\u6210 <code>name</code> \u53c2\u6570\u7684\u503c\u3002</li> <li><code>{opponent_name}</code> \u5c06\u88ab\u66ff\u6362\u6210 <code>opponent_name</code> \u53c2\u6570\u7684\u503c\u3002</li> <li><code>{context}</code> \u5c06\u88ab\u66ff\u6362\u6210 <code>context</code> \u53c2\u6570\u7684\u503c\u3002</li> </ul> <pre><code>class SpeakAloud(Action):\n    \"\"\"Action: Speak out aloud in a debate (quarrel)\"\"\"\n\n    PROMPT_TEMPLATE: str = \"\"\"\n    ## BACKGROUND\n    Suppose you are {name}, you are in a debate with {opponent_name}.\n    ## DEBATE HISTORY\n    Previous rounds:\n    {context}\n    ## YOUR TURN\n    Now it's your turn, you should closely respond to your opponent's latest argument, state your position, defend your arguments, and attack your opponent's arguments,\n    craft a strong and emotional response in 80 words, in {name}'s rhetoric and viewpoints, your will argue:\n    \"\"\"\n    name: str = \"SpeakAloud\"\n\n    async def run(self, context: str, name: str, opponent_name: str):\n        prompt = self.PROMPT_TEMPLATE.format(context=context, name=name, opponent_name=opponent_name)\n        # logger.info(prompt)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n</code></pre>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%BE%A9%E8%AE%BA/#432-role","title":"4.3.2 \u5b9a\u4e49\u89d2\u8272Role","text":"<pre><code>class Debator(Role):\n    name: str = \"\"\n    profile: str = \"\"\n    opponent_name: str = \"\"\n\n    def __init__(self, **data: Any):\n        super().__init__(**data)\n        self._init_actions([SpeakAloud])\n        self._watch([UserRequirement, SpeakAloud])\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c<code>_init_actions</code> \u4f7f\u6211\u4eec\u7684 <code>Role</code> \u62e5\u6709\u6211\u4eec\u521a\u521a\u5b9a\u4e49\u7684 <code>SpeakAloud</code> \u52a8\u4f5c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528 <code>_watch</code> \u76d1\u89c6\u4e86 <code>SpeakAloud</code> \u548c <code>UserRequirement</code>\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a\u8fa9\u624b\u5173\u6ce8\u6765\u81ea\u5bf9\u624b\u7684 <code>SpeakAloud</code> \u6d88\u606f\uff0c\u4ee5\u53ca\u6765\u81ea\u7528\u6237\u7684 <code>UserRequirement</code>\uff08\u4eba\u7c7b\u6307\u4ee4\uff09\u3002</p> <p>Debate topic, such as \"Topic: The U.S. should commit more in climate change fighting\"or \"Trump: Climate change is a hoax\"</p> <p>\u6211\u4eec\u5f80\u5f80\u901a\u8fc7init_actions \u548c watch\u4e24\u4e2a\u65b9\u6cd5\u5b9a\u4e49role\u5728team\u91cc\u9762\u7684\u534f\u4f5c\u673a\u5236\uff0c\u89c2\u5bdf\u6765\u81ea\u54ea\u4e9brole\u7684action\u4f5c\u4e3a\u4e0a\u6e38\uff0c\u7136\u540e\u53d1\u5e03\u4ec0\u4e48\u6d88\u606f\u5230\u73af\u5883\u4e2d\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u6bcf\u4e2a\u8fa9\u624b\u542c\u53d6\u5bf9\u624b\u7684\u8bba\u70b9\u3002\u8fd9\u901a\u8fc7\u91cd\u5199 <code>_observe</code> \u51fd\u6570\u5b8c\u6210\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\uff0c\u56e0\u4e3a\u5728\u73af\u5883\u4e2d\u5c06\u4f1a\u6709\u6765\u81ea\u7279\u6717\u666e\u548c\u62dc\u767b\u7684 \"SpeakAloud \u6d88\u606f\"\uff08\u7531 <code>SpeakAloud</code> \u89e6\u53d1\u7684 <code>Message</code>\uff09\u3002 \u6211\u4eec\u4e0d\u5e0c\u671b\u7279\u6717\u666e\u5904\u7406\u81ea\u5df1\u4e0a\u4e00\u8f6e\u7684 \"SpeakAloud \u6d88\u606f\"\uff0c\u800c\u662f\u5904\u7406\u6765\u81ea\u62dc\u767b\u7684\u6d88\u606f\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\uff08\u5728\u5373\u5c06\u5230\u6765\u7684\u66f4\u65b0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u822c\u7684\u6d88\u606f\u8def\u7531\u673a\u5236\u6765\u5904\u7406\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u5728\u66f4\u65b0\u540e\uff0c\u4f60\u5c06\u4e0d\u518d\u9700\u8981\u6267\u884c\u6b64\u6b65\u9aa4\uff09</p> <pre><code>    async def _observe(self) -&gt; int:\n        await super()._observe()\n        # accept messages sent (from opponent) to self, disregard own messages from the last round\n        self.rc.news = [msg for msg in self.rc.news if msg.send_to == {self.name}]\n        return len(self.rc.news)\n</code></pre> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u7ed3\u679c\u662f\uff0c<code>self.rc.news</code> \u73b0\u5728\u53ea\u5305\u542b\u4e86\u53d1\u9001\u7ed9\u5f53\u524d\u5b9e\u4f8b\u7684\u6d88\u606f\uff0c\u79fb\u9664\u4e86\u6240\u6709\u5176\u4ed6\u6d88\u606f\uff0c\u5305\u62ec\u53ef\u80fd\u7531\u5f53\u524d\u5b9e\u4f8b\u5728\u4e0a\u4e00\u8f6e\u53d1\u9001\u7684\u6d88\u606f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\u8fd9\u6837\u7684\u7b5b\u9009\u673a\u5236\u5bf9\u4e8e\u786e\u4fdd\u5b9e\u4f8b\u53ea\u54cd\u5e94\u5e76\u5904\u7406\u9488\u5bf9\u81ea\u5df1\u7684\u6d88\u606f\u975e\u5e38\u91cd\u8981</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u4f7f\u6bcf\u4e2a\u8fa9\u624b\u80fd\u591f\u5411\u5bf9\u624b\u53d1\u9001\u53cd\u9a73\u7684\u8bba\u70b9\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ece\u6d88\u606f\u5386\u53f2\u4e2d\u6784\u5efa\u4e00\u4e2a\u4e0a\u4e0b\u6587\uff0c\u4f7f <code>Debator</code> \u8fd0\u884c\u4ed6\u62e5\u6709\u7684 <code>SpeakAloud</code> \u52a8\u4f5c\uff0c\u5e76\u4f7f\u7528\u53cd\u9a73\u8bba\u70b9\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>Message</code>\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5b9a\u4e49\u6bcf\u4e2a <code>Debator</code> \u5c06\u628a <code>Message</code> \u53d1\u9001\u7ed9\u4ed6\u7684\u5bf9\u624b\u3002</p> <pre><code>   async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: to do {self.rc.todo}({self.rc.todo.name})\")\n        todo = self.rc.todo  # An instance of SpeakAloud\n\n        memories = self.get_memories()\n        context = \"\\n\".join(f\"{msg.sent_from}: {msg.content}\" for msg in memories)\n        # print(context)\n\n        rsp = await todo.run(context=context, name=self.name, opponent_name=self.opponent_name)\n\n        msg = Message(\n            content=rsp,\n            role=self.profile,\n            cause_by=type(todo),\n            sent_from=self.name,\n            send_to=self.opponent_name,\n        )\n        self.rc.memory.add(msg)\n\n        return msg\n</code></pre> <p>cause_by=type(todo), sent_from=self.name,</p> <p>send_to=self.opponent_name, \u8fd9\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u662f\u5f62\u5bb9Message\u7684\u5185\u5bb9\u5c5e\u6027\uff0c\u6765\u81ea\u4e8e\u54ea\u4e2aaction\u4ee5\u53ca\u89d2\u8272\uff0c\u5e76\u8981\u53d1\u9001\u7ed9\u54ea\u4e2a\u89d2\u8272\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u673a\u5236\u53ef\u4ee5\u5b9e\u73b0\u76f8\u8f83\u4e8ewatch\u66f4\u7075\u6d3b\u7684\u8ba2\u9605\u673a\u5236\u3002</p>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%BE%A9%E8%AE%BA/#433","title":"4.3.3 \u5b9e\u4f8b\u5316","text":"<pre><code>async def debate(idea: str, investment: float = 3.0, n_round: int = 5):\n    \"\"\"Run a team of presidents and watch they quarrel. :)\"\"\"\n    Biden = Debator(name=\"Biden\", profile=\"Democrat\", opponent_name=\"Trump\")\n    Trump = Debator(name=\"Trump\", profile=\"Republican\", opponent_name=\"Biden\")\n    team = Team()\n    team.hire([Biden, Trump])\n    team.invest(investment)\n    team.run_project(idea, send_to=\"Biden\")  # send debate topic to Biden and let him speak first\n    await team.run(n_round=n_round)\n</code></pre> <p>\u6211\u4eec\u7528Debator\u7c7b\u5b9e\u4f8b\u5316\u51faBiden\u548cTrump\u4e24\u4e2a\u89d2\u8272\uff0c\u5e76\u521b\u5efa\u4e00\u4e2ateam\u96c7\u4f63\u8fd9\u4e24\u4e2a\u89d2\u8272\uff0c\u5e76\u786e\u5b9a\u8fa9\u8bba\u7684\u4e3b\u9898\uff0c\u7528send_to\u6307\u5b9a\u8c01\u5148\u53d1\u8a00\u3002</p> <p>\u5b8c\u6574\u4ee3\u7801\uff1a</p> <pre><code>import asyncio\nimport platform\nfrom typing import Any\n\nimport fire\n\nfrom metagpt.actions import Action, UserRequirement\nfrom metagpt.logs import logger\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.team import Team\n\n\nclass SpeakAloud(Action):\n    \"\"\"Action: Speak out aloud in a debate (quarrel)\"\"\"\n\n    PROMPT_TEMPLATE: str = \"\"\"\n    ## BACKGROUND\n    Suppose you are {name}, you are in a debate with {opponent_name}.\n    ## DEBATE HISTORY\n    Previous rounds:\n    {context}\n    ## YOUR TURN\n    Now it's your turn, you should closely respond to your opponent's latest argument, state your position, defend your arguments, and attack your opponent's arguments,\n    craft a strong and emotional response in 80 words, in {name}'s rhetoric and viewpoints, your will argue:\n    \"\"\"\n    name: str = \"SpeakAloud\"\n\n    async def run(self, context: str, name: str, opponent_name: str):\n        prompt = self.PROMPT_TEMPLATE.format(context=context, name=name, opponent_name=opponent_name)\n        # logger.info(prompt)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n\n\nclass Debator(Role):\n    name: str = \"\"\n    profile: str = \"\"\n    opponent_name: str = \"\"\n\n    def __init__(self, **data: Any):\n        super().__init__(**data)\n        self._init_actions([SpeakAloud])\n        self._watch([UserRequirement, SpeakAloud])\n\n    async def _observe(self) -&gt; int:\n        await super()._observe()\n        # accept messages sent (from opponent) to self, disregard own messages from the last round\n        self.rc.news = [msg for msg in self.rc.news if msg.send_to == {self.name}]\n        return len(self.rc.news)\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: to do {self.rc.todo}({self.rc.todo.name})\")\n        todo = self.rc.todo  # An instance of SpeakAloud\n\n        memories = self.get_memories()\n        context = \"\\n\".join(f\"{msg.sent_from}: {msg.content}\" for msg in memories)\n        # print(context)\n\n        rsp = await todo.run(context=context, name=self.name, opponent_name=self.opponent_name)\n\n        msg = Message(\n            content=rsp,\n            role=self.profile,\n            cause_by=type(todo),\n            sent_from=self.name,\n            send_to=self.opponent_name,\n        )\n        self.rc.memory.add(msg)\n\n        return msg\n\n\nasync def debate(idea: str, investment: float = 3.0, n_round: int = 5):\n    \"\"\"Run a team of presidents and watch they quarrel. :)\"\"\"\n    Biden = Debator(name=\"Biden\", profile=\"Democrat\", opponent_name=\"Trump\")\n    Trump = Debator(name=\"Trump\", profile=\"Republican\", opponent_name=\"Biden\")\n    team = Team()\n    team.hire([Biden, Trump])\n    team.invest(investment)\n    team.run_project(idea, send_to=\"Biden\")  # send debate topic to Biden and let him speak first\n    await team.run(n_round=n_round)\n\n\ndef main(idea: str, investment: float = 3.0, n_round: int = 10):\n    \"\"\"\n    :param idea: Debate topic, such as \"Topic: The U.S. should commit more in climate change fighting\"\n                 or \"Trump: Climate change is a hoax\"\n    :param investment: contribute a certain dollar amount to watch the debate\n    :param n_round: maximum rounds of the debate\n    :return:\n    \"\"\"\n    if platform.system() == \"Windows\":\n        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n    asyncio.run(debate(idea, investment, n_round))\n\n\nif __name__ == \"__main__\":\n    fire.Fire(main)\n</code></pre>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/","title":"\u591a\u667a\u80fd\u4f53\u7ec4\u4ef6\u4ecb\u7ecd","text":""},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/#42","title":"4.2 \u591a\u667a\u80fd\u4f53\u7ec4\u4ef6\u4ecb\u7ecd","text":""},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/#421-environment","title":"4.2.1 Environment","text":"<p>Environment \u8fd9\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u66f4\u591a\u719f\u8bc6\u4e8e\u5f3a\u5316\u5b66\u4e60\u9886\u57df\u7684 agent \u4e0e Environment,\u5728\u5f3a\u5316\u5b66\u4e60\u4e2d Agent \u9700\u8981\u5b66\u4e60\u5728\u73af\u5883\u4e2d\u91c7\u53d6\u884c\u52a8\u6765\u6700\u5927\u5316\u4e00\u4e9b\u7d2f\u79ef\u5956\u52b1\uff0cAgent \u80fd\u591f\u91c7\u53d6\u7684\u884c\u52a8\uff0c\u4e5f\u5c31\u662f Agent \u7684 action space \u5f80\u5f80\u53d7\u5230\u73af\u5883\u7684\u9650\u5236\uff0c\u73af\u5883\u4e2d\u901a\u5e38\u5177\u6709\u4e00\u5b9a\u7684\u89c4\u5219\uff0c\u800cagent \u4eec\u5fc5\u987b\u6309\u7167\u89c4\u5219\u8fdb\u884c\u6d3b\u52a8\uff0cMetaGPT\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u7684\u73af\u5883\u7ec4\u4ef6Environment\uff0c\u6765\u7ba1\u7406agent\u7684\u6d3b\u52a8\u4e0e\u4fe1\u606f\u4ea4\u6d41</p> <p>MetaGPT \u6e90\u7801\u4e2d\u662f\u8fd9\u6837\u4ecb\u7ecd Environment \u7684\uff1a</p> <p>\u73af\u5883\uff0c\u627f\u8f7d\u4e00\u6279\u89d2\u8272\uff0c\u89d2\u8272\u53ef\u4ee5\u5411\u73af\u5883\u53d1\u5e03\u6d88\u606f\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u89d2\u8272\u89c2\u5bdf\u5230</p> <p>Environment, hosting a batch of roles, roles can publish messages to the environment, and can be observed by other roles</p> <p>\u6765\u770b Environment \u7684\u57fa\u672c\u7ec4\u6210</p> <pre><code>class Environment(BaseModel):\n    \"\"\"\u73af\u5883\uff0c\u627f\u8f7d\u4e00\u6279\u89d2\u8272\uff0c\u89d2\u8272\u53ef\u4ee5\u5411\u73af\u5883\u53d1\u5e03\u6d88\u606f\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u89d2\u8272\u89c2\u5bdf\u5230\n    Environment, hosting a batch of roles, roles can publish messages to the environment, and can be observed by other roles\n    \"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    desc: str = Field(default=\"\")  # \u73af\u5883\u63cf\u8ff0\n    roles: dict[str, SerializeAsAny[Role]] = Field(default_factory=dict, validate_default=True)\n    members: dict[Role, Set] = Field(default_factory=dict, exclude=True)\n    history: str = \"\"  # For debug\n</code></pre> <p>\u5176\u4e2d desc \u7528\u4e8e\u63cf\u8ff0\u5f53\u524d\u7684\u73af\u5883\u4fe1\u606f\uff0crole \u7528\u6765\u6307\u5b9a\u5f53\u524d\u73af\u5883\u4e2d\u7684\u89d2\u8272\uff0cmember\u5219\u8868\u793a\u5f53\u524d\u73af\u5883\u4e2d\u7684\u89d2\u8272\u4ee5\u53ca\u4ed6\u4eec\u5bf9\u5e94\u7684\u72b6\u6001\uff0chistory\u5219\u7528\u4e8e\u8bb0\u5f55\u73af\u5883\u4e2d\u53d1\u751f\u7684\u6d88\u606f\u8bb0\u5f55</p> <p>\u8bd5\u7740\u60f3\u8c61\u4e00\u4e2a\u5927\u7684\u5706\u684c\u4f1a\u8bae\uff0cenv\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8ba9\u667a\u80fd\u4f53\u4eec\u7edf\u4e00\u4e0a\u684c\u8ba8\u8bba\u7684\u73af\u5883\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770bMetaGPT\u662f\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u673a\u5236\u7684</p> <p>\u6211\u4eec\u5148\u6765\u770b\uff0c\u5f53\u4e00\u4e2aenv\u8fd0\u884c\u65f6\uff0c\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\uff0c\u6765\u770b env \u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684 run \u65b9\u6cd5</p> <pre><code>async def run(self, k=1):\n        \"\"\"\u5904\u7406\u4e00\u6b21\u6240\u6709\u4fe1\u606f\u7684\u8fd0\u884c\n        Process all Role runs at once\n        \"\"\"\n        for _ in range(k):\n            futures = []\n            for role in self.roles.values():\n                future = role.run()\n                # \u5c06role\u7684\u8fd0\u884c\u7f13\u5b58\u81f3 future list \u4e2d\uff0c\u5728\u540e\u7eed\u7684 gather \u65b9\u6cd5\u4e2d\u4f9d\u6b21\u8c03\u7528\n                futures.append(future)\n\n            await asyncio.gather(*futures)\n            logger.debug(f\"is idle: {self.is_idle}\")\n</code></pre> <p>\u5728env\u8fd0\u884c\u65f6\uff0c\u4f1a\u4f9d\u6b21\u8bfb\u53d6\u73af\u5883\u4e2d\u7684role\u4fe1\u606f\uff0c\u9ed8\u8ba4\u6309\u7167\u58f0\u660e role \u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c role \u7684 run \u65b9\u6cd5</p> <pre><code>@role_raise_decorator\n    async def run(self, with_message=None) -&gt; Message | None:\n        \"\"\"Observe, and think and act based on the results of the observation\"\"\"\n        if with_message:\n            msg = None\n            if isinstance(with_message, str):\n                msg = Message(content=with_message)\n            elif isinstance(with_message, Message):\n                msg = with_message\n            elif isinstance(with_message, list):\n                msg = Message(content=\"\\n\".join(with_message))\n            if not msg.cause_by:\n                msg.cause_by = UserRequirement\n            # \u5c06\u524d\u7f6e\u77e5\u8bc6\u5b58\u5165msg_buffer\u4e2d\n            self.put_message(msg)\n\n        if not await self._observe():\n            # If there is no new information, suspend and wait\n            logger.debug(f\"{self._setting}: no news. waiting.\")\n            return\n\n        rsp = await self.react()\n\n        # Reset the next action to be taken.\n        self.rc.todo = None\n        # Send the response message to the Environment object to have it relay the message to the subscribers.\n        self.publish_message(rsp)\n        return rsp\n</code></pre> <p>\u800c\u5728 role \u7684run\u65b9\u6cd5\u4e2d role \u9996\u5148\u5c06\u4f1a\u6839\u636e\u8fd0\u884c\u65f6\u662f\u5426\u4f20\u5165\u4fe1\u606f\uff08\u90e8\u5206\u884c\u52a8\u524d\u53ef\u80fd\u9700\u8981\u524d\u7f6e\u77e5\u8bc6\u6d88\u606f\uff09\uff0c\u5c06\u4fe1\u606f\u5b58\u5165 rolecontext\u7684 msg_buffer \u4e2d</p> <pre><code>def put_message(self, message):\n        \"\"\"Place the message into the Role object's private message buffer.\"\"\"\n        if not message:\n            return\n        self.rc.msg_buffer.push(message)\n</code></pre> <p>\u63a5\u4e0b\u6765\u5c31\u8fdb\u5165metagpt \u591a\u667a\u80fd\u4f53\u5f88\u91cd\u8981\u7684\u4e00\u4e2a\u673a\u5236\uff1a</p> <p>\u5728\u591a\u667a\u80fd\u4f53\u73af\u5883\u8fd0\u884c\u4e2d\uff0c<code>Role</code>\u7684\u6bcf\u6b21\u884c\u52a8\u5c06\u4ece<code>Environment</code>\u4e2d\u5148<code>_observe</code> <code>Message</code>\uff0c\u5728 obseve \u7684\u884c\u52a8\u4e2d Role \u5c06\u4ece\u4ece\u6d88\u606f\u7f13\u51b2\u533a\u548c\u5176\u4ed6\u6e90\u51c6\u5907\u65b0\u6d88\u606f\u4ee5\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u672a\u63a5\u53d7\u5230\u6307\u4ee4\u65f6\uff0cRole\u5c06\u7b49\u5f85</p> <p>\u5bf9\u4e8e\u4fe1\u606f\u7f13\u51b2\u533a\u4e2d\u7684\u4fe1\u606f\uff0c\u9996\u5148\u6211\u4eec\u4f1a\u6839\u636e self.recovered \u53c2\u6570\u51b3\u5b9a news \u662f\u5426\u6765\u81ea\u4e8e self.latest_observed_msg \u6216\u8005 msg_buffer \u5e76\u8bfb\u53d6</p> <p>\u5b8c\u6210\u4fe1\u606f\u7f13\u51b2\u533a\u7684\u8bfb\u53d6\u540e\uff0c\u5982\u679c\u8bbe\u5b9a\u4e86 ignore_memory \u5219 old_messages\u4fbf\u4e0d\u4f1a\u518d\u83b7\u53d6 \u5f53\u524d Role \u7684 memory </p> <p>\u5c06 news \u4e2d\u7684\u4fe1\u606f\u5b58\u5165 role \u7684 memory \u540e\uff0c\u6211\u4eec\u5c06\u8fdb\u4e00\u6b65\u4ece news \u4e2d\u7b5b\u9009\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8bbe\u5b9a\u7684\u89d2\u8272\u5173\u6ce8\u7684\u6d88\u606f\uff08self*.rc.watch\uff09\u800c *self.rc.news \u5c06\u5b58\u50a8\u8fd9\u4e9b\u5f53\u524d\u89d2\u8272\u5173\u6ce8\u7684\u6d88\u606f\uff0c\u6700\u8fd1\u7684\u4e00\u6761\u5c06\u88ab\u8d4b\u7ed9 latest_observed_msg</p> <p>\u6700\u540e\u6211\u4eec\u6253\u5370\u89d2\u8272\u5173\u6ce8\u5230\u7684\u6d88\u606f\u5e76\u8fd4\u56de</p> <pre><code>async def _observe(self, ignore_memory=False) -&gt; int:\n        \"\"\"Prepare new messages for processing from the message buffer and other sources.\"\"\"\n        # Read unprocessed messages from the msg buffer.\n        news = []\n        if self.recovered:\n            # news \u8bfb\u53d6\n            news = [self.latest_observed_msg] if self.latest_observed_msg else []\n        if not news:\n            news = self.rc.msg_buffer.pop_all()\n        # Store the read messages in your own memory to prevent duplicate processing.\n        old_messages = [] if ignore_memory else self.rc.memory.get()\n        self.rc.memory.add_batch(news)\n        # Filter out messages of interest.\n        self.rc.news = [\n            n for n in news if (n.cause_by in self.rc.watch or self.name in n.send_to) and n not in old_messages\n        ]\n        self.latest_observed_msg = self.rc.news[-1] if self.rc.news else None  # record the latest observed msg\n\n        # Design Rules:\n        # If you need to further categorize Message objects, you can do so using the Message.set_meta function.\n        # msg_buffer is a receiving buffer, avoid adding message data and operations to msg_buffer.\n        news_text = [f\"{i.role}: {i.content[:20]}...\" for i in self.rc.news]\n        if news_text:\n            logger.debug(f\"{self._setting} observed: {news_text}\")\n        return len(self.rc.news)\n</code></pre> <p>\u89c2\u5bdf\u5230\u4fe1\u606f\u540e\u89d2\u8272\u5c31\u5c06\u91c7\u53d6\u884c\u52a8</p> <pre><code>rsp = await self.react()\n# Reset the next action to be taken.\nself.rc.todo = None\n# Send the response message to the Environment object to have it relay the message to the subscribers.\nself.publish_message(rsp)\nreturn rsp\n</code></pre> <p>\u5f53\u89d2\u8272\u5b8c\u6210\u81ea\u5df1\u7684\u884c\u52a8\u540e\uff0c\u6700\u7ec8\u5c06\u81ea\u5df1\u7684\u884c\u52a8\u53d1\u5e03\u5728\u73af\u5883\u4e2d</p> <pre><code>def publish_message(self, msg):\n        \"\"\"If the role belongs to env, then the role's messages will be broadcast to env\"\"\"\n        if not msg:\n            return\n        if not self.rc.env:\n            # If env does not exist, do not publish the message\n            return\n        self.rc.env.publish_message(msg)\n</code></pre> <p>publish_message \u65f6\u5c06\u4f1a\u5bf9\u904d\u5386\u6240\u6709\u89d2\u8272\uff0c\u68c0\u67e5\u4ed6\u4eec\u662f\u5426\u8ba2\u9605\u8fd9\u6761\u6d88\u606f\uff0c\u82e5\u8ba2\u9605\uff0c\u5219\u8c03\u7528 put_message \u65b9\u6cd5\uff0c\u5c06\u6d88\u606f\u5b58\u5165\u89d2\u8272\u7684 msg_buffer \u4e2d</p> <pre><code>def publish_message(self, message: Message, peekable: bool = True) -&gt; bool:\n        \"\"\"\n        Distribute the message to the recipients.\n        In accordance with the Message routing structure design in Chapter 2.2.1 of RFC 116, as already planned\n        in RFC 113 for the entire system, the routing information in the Message is only responsible for\n        specifying the message recipient, without concern for where the message recipient is located. How to\n        route the message to the message recipient is a problem addressed by the transport framework designed\n        in RFC 113.\n        \"\"\"\n        logger.debug(f\"publish_message: {message.dump()}\")\n        found = False\n        # According to the routing feature plan in Chapter 2.2.3.2 of RFC 113\n        for role, subscription in self.members.items():\n            if is_subscribed(message, subscription):\n                role.put_message(message)\n                found = True\n        if not found:\n            logger.warning(f\"Message no recipients: {message.dump()}\")\n        self.history += f\"\\n{message}\"  # For debug\n\n        return True\n</code></pre> <pre><code>def is_subscribed(message: \"Message\", tags: set):\n    \"\"\"Return whether it's consumer\"\"\"\n    if MESSAGE_ROUTE_TO_ALL in message.send_to:\n        return True\n\n    for i in tags:\n        if i in message.send_to:\n            return True\n    return False\n</code></pre> <p>\u81f3\u6b64\u6211\u4eec\u5df2\u7ecf\u68b3\u7406\u5b8c\u4e86\u5728\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u4e2d\uff0cRole\u662f\u5982\u4f55\u884c\u52a8\u7684\uff0c\u4e0b\u9762\u5236\u4f5c\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u601d\u7ef4\u5bfc\u56fe\u6765\u5e2e\u52a9\u4f60\u7406\u89e3\u5b83\u7684\u4ea4\u4e92\u8fc7\u7a0b</p> <p></p> <p>\u9664\u4e86\u4e0a\u8ff0\u63d0\u5230\u7684env\u4e2d\u7684\u65b9\u6cd5\u4e4b\u5916\uff0cenv\u8fd8\u63d0\u4f9b\u4e86\u66f4\u591a\u4fbf\u5229\u7684\u65b9\u6cd5\u5982\u4e0b\uff0c\u4e0d\u518d\u5c55\u5f00\u63cf\u8ff0</p> <pre><code>def add_role(self, role: Role):\n        \"\"\"\u589e\u52a0\u4e00\u4e2a\u5728\u5f53\u524d\u73af\u5883\u7684\u89d2\u8272\n        Add a role in the current environment\n        \"\"\"\n        self.roles[role.profile] = role\n        role.set_env(self)\n\n    def add_roles(self, roles: Iterable[Role]):\n        \"\"\"\u589e\u52a0\u4e00\u6279\u5728\u5f53\u524d\u73af\u5883\u7684\u89d2\u8272\n        Add a batch of characters in the current environment\n        \"\"\"\n        for role in roles:\n            self.roles[role.profile] = role\n\n        for role in roles:  # setup system message with roles\n            role.set_env(self)\n    def get_roles(self) -&gt; dict[str, Role]:\n        \"\"\"\u83b7\u5f97\u73af\u5883\u5185\u7684\u6240\u6709\u89d2\u8272\n        Process all Role runs at once\n        \"\"\"\n        return self.roles\n\n    def get_role(self, name: str) -&gt; Role:\n        \"\"\"\u83b7\u5f97\u73af\u5883\u5185\u7684\u6307\u5b9a\u89d2\u8272\n        get all the environment roles\n        \"\"\"\n        return self.roles.get(name, None)\n\n    def role_names(self) -&gt; list[str]:\n        return [i.name for i in self.roles.values()]\n</code></pre>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/#422","title":"4.2.2 \u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf","text":"<p>\u5728\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 env \u7684\u57fa\u672c\u7ec4\u6210\u4e0e\u5b83\u7684\u8fd0\u884c\u903b\u8f91\uff0c\u5728\u8fd9\u4e00\u7ae0\u5185\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u5229\u7528 env \u6765\u5f00\u53d1\uff0c\u8fdb\u4e00\u6b65\u4e86\u89e3 env \u7ec4\u4ef6\u5185\u90e8\u7684\u6d3b\u52a8</p> <p>\u73b0\u5728\u8bbe\u60f3\u4e00\u4e2a\u591a\u667a\u80fd\u4f53\u53ef\u80fd\u7684\u5e94\u7528\u573a\u666f\uff0c\u6211\u4eec\u4ee5 Camel \u4e2d\u63d0\u51fa\u7684\u591a\u667a\u80fd\u4f53\u5408\u4f5c\u4e3a\u4f8b\uff0c\u73b0\u5728\u6211\u4eec\u8bbe\u5b9a\uff0c\u6211\u4eec\u9700\u8981\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u4e3a\u6211\u4eec\u6839\u636e\u6211\u4eec\u7ed9\u5b9a\u7684\u4e3b\u9898\u63d0\u4f9b\u4e00\u7bc7\u4f18\u7f8e\u7684\u82f1\u6587\u8bd7\uff0c\u9664\u4e86\u5b8c\u6210\u5199\u4f5c\u7684 agent \u5916\uff0c\u6211\u4eec\u518d\u8bbe\u5b9a\u4e00\u540d\u7cbe\u901a\u8bd7\u53e5\u7684\u8001\u5e08\u6765\u67e5\u770b\u5e76\u4fee\u6539\u5b66\u751f\u7684\u4f5c\u54c1\u3002</p> <p>\u73b0\u5728\u603b\u7ed3\u4e00\u4e0b\u6d41\u7a0b\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u7cfb\u7edf\u9996\u5148\u63a5\u6536\u7528\u6237\u7684\u9700\u6c42\uff08\u5199\u5173\u4e8eXX\u4e3b\u9898\u7684\u8bd7\uff09\uff0c\u5728\u7cfb\u7edf\u4e2d\uff0c\u5f53\u5b66\u751f\u5173\u6ce8\u5230\u5e03\u7f6e\u7684\u9898\u76ee\u540e\u5c31\u4f1a\u5f00\u59cb\u521b\u4f5c\uff0c\u5f53\u8001\u5e08\u53d1\u73b0\u5b66\u751f\u5199\u4f5c\u5b8c\u6210\u540e\u5c31\u4f1a\u7ed9\u5b66\u751f\u63d0\u51fa\u610f\u89c1\uff0c\u6839\u636e\u8001\u5e08\u7ed9\u51fa\u7684\u610f\u89c1\uff0c\u5b66\u751f\u5c06\u4fee\u6539\u81ea\u5df1\u7684\u4f5c\u54c1\uff0c\u76f4\u5230\u8bbe\u5b9a\u5faa\u73af\u7ed3\u675f</p> <p></p> <p>\u9996\u5148\u5bfc\u5165\u6211\u4eec\u5fc5\u8981\u7684\u5305</p> <pre><code>import asyncio\n\nfrom metagpt.actions import Action, UserRequirement\nfrom metagpt.logs import logger\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.environment import Environment\n\nfrom metagpt.const import MESSAGE_ROUTE_TO_ALL\n</code></pre> <p>\u63a5\u7740\uff0c\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u540d\u4e3a classroom \u7684 env\uff0c\u6211\u4eec\u6240\u6709\u7684 role \u90fd\u5c06\u5728\u5176\u4e2d\u884c\u52a8</p> <pre><code>classroom = Environment()\n</code></pre> <p>\u7f16\u5199 WritePoem \u4e0e ReviewPoem \u65b9\u6cd5\uff0c\u5728 WritePoem \u65b9\u6cd5\u4e2d\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u6839\u636e\u7528\u6237\u63d0\u4f9b\u7684\u4e3b\u9898\u6765\u7f16\u5199\u8bd7\u53e5\uff0c\u5e76\u4e14\u6839\u636e teacher \u7684\u5efa\u8bae\u4fee\u6539\u8bd7\u53e5\uff0c\u5728 ReviewPoem \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8bfb\u53d6 student \u7684\u8bd7\u6b4c\u4f5c\u54c1\uff0c\u5e76\u4e14\u7ed9\u51fa\u4fee\u6539\u610f\u89c1\uff08\u8fd9\u91cc\u6211\u589e\u52a0\u4e86\u8001\u5e08\u7684\u8bd7\u6b4c\u504f\u597d\u6765\u653e\u5927\u4fee\u6539\u6548\u679c\uff09</p> <pre><code>class WritePoem(Action):\n\n    name: str = \"WritePoem\"\n\n    PROMPT_TEMPLATE: str = \"\"\"\n    Here is the historical conversation record : {msg} .\n    Write a poem about the subject provided by human, Return only the content of the generated poem with NO other texts.\n    If the teacher provides suggestions about the poem, revise the student's poem based on the suggestions and return.\n    your poem:\n    \"\"\"\n\n    async def run(self, msg: str):\n\n        prompt = self.PROMPT_TEMPLATE.format(msg = msg)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n\nclass ReviewPoem(Action):\n\n    name: str = \"ReviewPoem\"\n\n    PROMPT_TEMPLATE: str = \"\"\"\n\n    Here is the historical conversation record : {msg} .\n    Check student-created poems about the subject provided by human and give your suggestions for revisions. You prefer poems with elegant sentences and retro style.\n    Return only your comments with NO other texts.\n    your comments:\n    \"\"\"\n\n    async def run(self, msg: str):\n\n        prompt = self.PROMPT_TEMPLATE.format(msg = msg)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n</code></pre> <p>\u63a5\u7740\u6211\u4eec\u5b9a\u4e49 Student \u89d2\u8272\u4e0e Teacher \u89d2\u8272\uff0c\u4e0e\u5355\u667a\u80fd\u4f53\u4e0d\u540c\u7684\u90e8\u5206\u662f\uff0c\u6211\u4eec\u9700\u8981\u58f0\u660e\u6bcf\u4e2a\u89d2\u8272\u5173\u6ce8\u7684\u52a8\u4f5c\uff08self._watch\uff09\uff0c\u53ea\u6709\u5f53\u5173\u6ce8\u7684\u52a8\u4f5c\u53d1\u751f\u540e\uff0c\u89d2\u8272\u624d\u4f1a\u5f00\u59cb\u884c\u52a8\uff0c\u5176\u4f59\u90e8\u5206\u4e0d\u518d\u8bf4\u660e</p> <pre><code>class Student(Role):\n\n    name: str = \"xiaoming\"\n    profile: str = \"Student\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([WritePoem])\n        self._watch([UserRequirement, ReviewPoem])\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        todo = self.rc.todo\n\n        msg = self.get_memories()  # \u83b7\u53d6\u6240\u6709\u8bb0\u5fc6\n        # logger.info(msg)\n        poem_text = await WritePoem().run(msg)\n        logger.info(f'student : {poem_text}')\n        msg = Message(content=poem_text, role=self.profile,\n                      cause_by=type(todo))\n\n        return msg\n\nclass Teacher(Role):\n\n    name: str = \"laowang\"\n    profile: str = \"Teacher\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([ReviewPoem])\n        self._watch([WritePoem])\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        todo = self.rc.todo\n\n        msg = self.get_memories()  # \u83b7\u53d6\u6240\u6709\u8bb0\u5fc6\n        poem_text = await ReviewPoem().run(msg)\n        logger.info(f'teacher : {poem_text}')\n        msg = Message(content=poem_text, role=self.profile,\n                      cause_by=type(todo))\n\n        return msg\n</code></pre> <p>\u5b8c\u6210\u4e0a\u8ff0\u51c6\u5907\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u5199\u8fd0\u884c\u51fd\u6570\u4e86\uff0c\u6211\u4eec\u5c06\u63d0\u4f9b\u4e00\u4e2a\u4e3b\u9898\uff0c\u5c06topic\u53d1\u5e03\u5728env\u4e2d\u8fd0\u884cenv\uff0c\u7cfb\u7edf\u5c31\u5c06\u5f00\u59cb\u5de5\u4f5c\u4e86\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u5bf9\u8bdd\u8f6e\u6570\uff08n_round\uff09\u6765\u8fbe\u5230\u4f60\u5e0c\u671b\u7684\u6548\u679c</p> <pre><code>async def main(topic: str, n_round=3):\n\n    classroom.add_roles([Student(), Teacher()])\n\n    classroom.publish_message(\n        Message(role=\"Human\", content=topic, cause_by=UserRequirement,\n                send_to='' or MESSAGE_ROUTE_TO_ALL),\n        peekable=False,\n    )\n\n    while n_round &gt; 0:\n        # self._save()\n        n_round -= 1\n        logger.debug(f\"max {n_round=} left.\")\n\n        await classroom.run()\n    return classroom.history\n\nasyncio.run(main(topic='wirte a poem about moon'))\n</code></pre> <p>\u672c\u7ae0\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import asyncio\n\nfrom metagpt.actions import Action, UserRequirement\nfrom metagpt.logs import logger\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.environment import Environment\n\nfrom metagpt.const import MESSAGE_ROUTE_TO_ALL\n\nclassroom = Environment()\n\nclass WritePoem(Action):\n\n    name: str = \"WritePoem\"\n\n    PROMPT_TEMPLATE: str = \"\"\"\n    Here is the historical conversation record : {msg} .\n    Write a poem about the subject provided by human, Return only the content of the generated poem with NO other texts.\n    If the teacher provides suggestions about the poem, revise the student's poem based on the suggestions and return.\n    your poem:\n    \"\"\"\n\n    async def run(self, msg: str):\n\n        prompt = self.PROMPT_TEMPLATE.format(msg = msg)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n\nclass ReviewPoem(Action):\n\n    name: str = \"ReviewPoem\"\n\n    PROMPT_TEMPLATE: str = \"\"\"\n\n    Here is the historical conversation record : {msg} .\n    Check student-created poems about the subject provided by human and give your suggestions for revisions. You prefer poems with elegant sentences and retro style.\n    Return only your comments with NO other texts.\n    your comments:\n    \"\"\"\n\n    async def run(self, msg: str):\n\n        prompt = self.PROMPT_TEMPLATE.format(msg = msg)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n\nclass Student(Role):\n\n    name: str = \"xiaoming\"\n    profile: str = \"Student\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([WritePoem])\n        self._watch([UserRequirement, ReviewPoem])\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        todo = self.rc.todo\n\n        msg = self.get_memories()  # \u83b7\u53d6\u6240\u6709\u8bb0\u5fc6\n        # logger.info(msg)\n        poem_text = await WritePoem().run(msg)\n        logger.info(f'student : {poem_text}')\n        msg = Message(content=poem_text, role=self.profile,\n                      cause_by=type(todo))\n\n        return msg\n\nclass Teacher(Role):\n\n    name: str = \"laowang\"\n    profile: str = \"Teacher\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([ReviewPoem])\n        self._watch([WritePoem])\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: ready to {self.rc.todo}\")\n        todo = self.rc.todo\n\n        msg = self.get_memories()  # \u83b7\u53d6\u6240\u6709\u8bb0\u5fc6\n        poem_text = await ReviewPoem().run(msg)\n        logger.info(f'teacher : {poem_text}')\n        msg = Message(content=poem_text, role=self.profile,\n                      cause_by=type(todo))\n\n        return msg\n\nasync def main(topic: str, n_round=3):\n\n    classroom.add_roles([Student(), Teacher()])\n\n    classroom.publish_message(\n        Message(role=\"Human\", content=topic, cause_by=UserRequirement,\n                send_to='' or MESSAGE_ROUTE_TO_ALL),\n        peekable=False,\n    )\n\n    while n_round &gt; 0:\n        # self._save()\n        n_round -= 1\n        logger.debug(f\"max {n_round=} left.\")\n\n        await classroom.run()\n    return classroom.history\n\nasyncio.run(main(topic='wirte a poem about moon'))\n</code></pre>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/#423-team","title":"4.2.3 Team","text":"<p>\u5728\u5b98\u65b9\u591a\u667a\u80fd\u4f53\u90e8\u5206\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u80fd\u770b\u5230\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7ec4\u4ef6 Team\uff0c\u4e8b\u5b9e\u4e0aTeam\u5c31\u662f\u57fa\u4e8e Environment \u4e4b\u4e0a\u7684\u4e8c\u6b21\u5c01\u88c5\u6210\u679c</p> <pre><code>class Team(BaseModel):\n    \"\"\"\n    Team: Possesses one or more roles (agents), SOP (Standard Operating Procedures), and a env for instant messaging,\n    dedicated to env any multi-agent activity, such as collaboratively writing executable code.\n    \"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    env: Environment = Field(default_factory=Environment)\n    investment: float = Field(default=10.0)\n    idea: str = Field(default=\"\")\n</code></pre> <p>Team \u63d0\u4f9b\u4e86\u76f8\u6bd4\u4e8e Environment \u66f4\u591a\u7684\u7ec4\u4ef6\uff0cinvestment \u7528\u4e8e\u7ba1\u7406\u56e2\u961f\u6210\u672c\uff08\u5373\u9650\u5236token\u82b1\u8d39\uff09\uff0cidea\u6548\u679c\u5219\u7b49\u540c\u4e8e\u544a\u8bc9\u4f60\u7684\u56e2\u961f\u63a5\u4e0b\u6765\u8be5\u56f4\u7ed5\u4ec0\u4e48\u5de5\u4f5c</p> <p>Team \u76f8\u5173\u7684\u91cd\u8981\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>def hire(self, roles: list[Role]):\n        \"\"\"Hire roles to cooperate\"\"\"\n        self.env.add_roles(roles)\n</code></pre> <p>Hire \u7528\u4e8e\u5728\u56e2\u961f\u4e2d\u6dfb\u52a0\u5458\u5de5</p> <pre><code>def invest(self, investment: float):\n        \"\"\"Invest company. raise NoMoneyException when exceed max_budget.\"\"\"\n        self.investment = investment\n        CONFIG.max_budget = investment\n        logger.info(f\"Investment: ${investment}.\")\n</code></pre> <p>invest\u65b9\u6cd5\u8d1f\u8d23\u63a7\u5236\u9884\u7b97</p> <pre><code>def run_project(self, idea, send_to: str = \"\"):\n        \"\"\"Run a project from publishing user requirement.\"\"\"\n        self.idea = idea\n\n        # Human requirement.\n        self.env.publish_message(\n            Message(role=\"Human\", content=idea, cause_by=UserRequirement, send_to=send_to or MESSAGE_ROUTE_TO_ALL),\n            peekable=False,\n        )\n</code></pre> <p>\u5728 Team \u8fd0\u884c\u65f6\uff0c\u9996\u5148\u5c06\u8c03\u7528 run_project \u65b9\u6cd5\u7ed9\u667a\u80fd\u4f53\u4eec\u4e00\u4e2a\u9700\u6c42\uff0c\u63a5\u7740\u5728 n_round \u7684\u5faa\u73af\u4e2d\uff0c\u91cd\u590d\u68c0\u67e5\u9884\u7b97\u4e0e\u8fd0\u884c env\uff0c\u6700\u540e\u8fd4\u56de\u73af\u5883\u4e2d\u89d2\u8272\u7684\u5386\u53f2\u5bf9\u8bdd</p> <pre><code>@serialize_decorator\n    async def run(self, n_round=3, idea=\"\", send_to=\"\", auto_archive=True):\n        \"\"\"Run company until target round or no money\"\"\"\n        if idea:\n            self.run_project(idea=idea, send_to=send_to)\n\n        while n_round &gt; 0:\n            # self._save()\n            n_round -= 1\n            logger.debug(f\"max {n_round=} left.\")\n            self._check_balance()\n\n            await self.env.run()\n        self.env.archive(auto_archive)\n        return self.env.history\n</code></pre> <p>\u5c3d\u7ba1 Team \u7c7b\u53ea\u662f\u5728 Env \u4e0a\u7684\u7b80\u5355\u5c01\u88c5\uff0c\u4f46\u5b83\u5411\u6211\u4eec\u5c55\u793a\u4e86\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u5411\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u53d1\u5e03\u542f\u52a8\u6d88\u606f\u4ee5\u53ca\u5f15\u5165\u53ef\u80fd\u7684\u4eba\u7c7b\u53cd\u9988\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5c06\u4f7f\u7528Team\uff0c\u5f00\u53d1\u5c5e\u4e8e\u81ea\u5df1\u7684\u7b2c\u4e00\u4e2a\u667a\u80fd\u4f53\u56e2\u961f</p>"},{"location":"chapter4/%E5%A4%9A%E6%99%BA%E8%83%BD%E4%BD%93%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/#424-team","title":"4.2.4 \u57fa\u4e8eTeam\u5f00\u53d1\u4f60\u7684\u7b2c\u4e00\u4e2a\u667a\u80fd\u4f53\u56e2\u961f","text":"<p>\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4e09\u4e2a\u6b65\u9aa4\u6765\u5efa\u7acb\u56e2\u961f\u5e76\u4f7f\u5176\u8fd0\u4f5c\uff1a</p> <ol> <li>\u5b9a\u4e49\u6bcf\u4e2a\u89d2\u8272\u80fd\u591f\u6267\u884c\u7684\u9884\u671f\u52a8\u4f5c</li> <li>\u57fa\u4e8e\u6807\u51c6\u4f5c\u4e1a\u7a0b\u5e8f\uff08SOP\uff09\u786e\u4fdd\u6bcf\u4e2a\u89d2\u8272\u9075\u5b88\u5b83\u3002\u901a\u8fc7\u4f7f\u6bcf\u4e2a\u89d2\u8272\u89c2\u5bdf\u4e0a\u6e38\u7684\u76f8\u5e94\u8f93\u51fa\u7ed3\u679c\uff0c\u5e76\u4e3a\u4e0b\u6e38\u53d1\u5e03\u81ea\u5df1\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002</li> <li>\u521d\u59cb\u5316\u6240\u6709\u89d2\u8272\uff0c\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u73af\u5883\u7684\u667a\u80fd\u4f53\u56e2\u961f\uff0c\u5e76\u4f7f\u5b83\u4eec\u4e4b\u95f4\u80fd\u591f\u8fdb\u884c\u4ea4\u4e92\u3002</li> </ol> <p>\u4e0e\u7b2c\u4e09\u7ae0\u76f8\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e09\u4e2a\u5177\u6709\u5404\u81ea\u52a8\u4f5c\u7684<code>Role</code>\uff1a</p> <ul> <li><code>SimpleCoder</code> \u5177\u6709 <code>SimpleWriteCode</code> \u52a8\u4f5c\uff0c\u63a5\u6536\u7528\u6237\u7684\u6307\u4ee4\u5e76\u7f16\u5199\u4e3b\u8981\u4ee3\u7801</li> <li><code>SimpleTester</code> \u5177\u6709 <code>SimpleWriteTest</code> \u52a8\u4f5c\uff0c\u4ece <code>SimpleWriteCode</code> \u7684\u8f93\u51fa\u4e2d\u83b7\u53d6\u4e3b\u4ee3\u7801\u5e76\u4e3a\u5176\u63d0\u4f9b\u6d4b\u8bd5\u5957\u4ef6</li> <li><code>SimpleReviewer</code> \u5177\u6709 <code>SimpleWriteReview</code> \u52a8\u4f5c\uff0c\u5ba1\u67e5\u6765\u81ea <code>SimpleWriteTest</code> \u8f93\u51fa\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5e76\u68c0\u67e5\u5176\u8986\u76d6\u8303\u56f4\u548c\u8d28\u91cf</li> </ul> <p>\u901a\u8fc7\u4e0a\u8ff0\u6982\u8ff0\uff0c\u6211\u4eec\u4f7f\u5f97 SOP\uff08\u6807\u51c6\u4f5c\u4e1a\u7a0b\u5e8f\uff09\u53d8\u5f97\u66f4\u52a0\u6e05\u6670\u660e\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u8ba8\u8bba\u5982\u4f55\u6839\u636e SOP \u6765\u5b9a\u4e49<code>Role</code>\u3002</p> <p>\u9996\u5148\u5bfc\u5165\u5fc5\u8981\u7684\u4f9d\u8d56</p> <pre><code>import re\n\nimport fire\n\nfrom metagpt.actions import Action, UserRequirement\nfrom metagpt.logs import logger\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.team import Team\n</code></pre> <p>\u6211\u4eec\u6765\u5b9a\u4e49\u51fa\u73b0\u7684\u52a8\u4f5c</p> <p>\u6211\u4eec\u5217\u4e3e\u4e86\u4e09\u4e2a <code>Action</code>\u3002</p> <p>SimpleWriteCode \u5c06\u4f1a\u6839\u636e\u7528\u6237\u7684\u9700\u6c42\u6765\u751f\u6210\u4ee3\u7801</p> <pre><code>class SimpleWriteCode(Action):\n    PROMPT_TEMPLATE: str = \"\"\"\n    Write a python function that can {instruction}.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n    name: str = \"SimpleWriteCode\"\n\n    async def run(self, instruction: str):\n        prompt = self.PROMPT_TEMPLATE.format(instruction=instruction)\n\n        rsp = await self._aask(prompt)\n\n        code_text = parse_code(rsp)\n\n        return code_text\n</code></pre> <p>SimpleWriteTest \u5c06\u4f1a\u5bf9\u751f\u6210\u7684\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5</p> <pre><code>class SimpleWriteTest(Action):\n    PROMPT_TEMPLATE: str = \"\"\"\n    Context: {context}\n    Write {k} unit tests using pytest for the given function, assuming you have imported it.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n\n    name: str = \"SimpleWriteTest\"\n\n    async def run(self, context: str, k: int = 3):\n        prompt = self.PROMPT_TEMPLATE.format(context=context, k=k)\n\n        rsp = await self._aask(prompt)\n\n        code_text = parse_code(rsp)\n\n        return code_text\n</code></pre> <p>SimpleWriteReview \u5c06\u4f1a\u5bf9\u6d4b\u8bd5\u7684\u7ed3\u679c\u505a\u51fa\u8bc4\u4ef7</p> <pre><code>class SimpleWriteReview(Action):\n    PROMPT_TEMPLATE: str = \"\"\"\n    Context: {context}\n    Review the test cases and provide one critical comments:\n    \"\"\"\n\n    name: str = \"SimpleWriteReview\"\n\n    async def run(self, context: str):\n        prompt = self.PROMPT_TEMPLATE.format(context=context)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n</code></pre> <p>\u5728\u8bb8\u591a\u591a\u667a\u80fd\u4f53\u573a\u666f\u4e2d\uff0c\u5b9a\u4e49<code>Role</code>\u53ef\u80fd\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u3002\u5bf9\u4e8e<code>SimpleCoder</code>\uff0c\u6211\u4eec\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a</p> <ol> <li>\u4f7f\u7528 <code>_init_actions</code> \u4e3a<code>Role</code>\u914d\u5907\u9002\u5f53\u7684 <code>Action</code>\uff0c\u8fd9\u4e0e\u8bbe\u7f6e\u5355\u667a\u80fd\u4f53\u76f8\u540c</li> <li>\u591a\u667a\u80fd\u4f53\u64cd\u4f5c\u903b\u8f91\uff1a\u6211\u4eec\u4f7f<code>Role</code> <code>_watch</code> \u6765\u81ea\u7528\u6237\u6216\u5176\u4ed6\u667a\u80fd\u4f53\u7684\u91cd\u8981\u4e0a\u6e38\u6d88\u606f\u3002\u56de\u60f3\u6211\u4eec\u7684SOP\uff0c<code>SimpleCoder</code>\u63a5\u6536\u7528\u6237\u6307\u4ee4\uff0c\u8fd9\u662f\u7531MetaGPT\u4e2d\u7684<code>UserRequirement</code>\u5f15\u8d77\u7684<code>Message</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86<code>self._watch([UserRequirement])</code>\u3002</li> </ol> <pre><code>class SimpleCoder(Role):\n    name: str = \"Alice\"\n    profile: str = \"SimpleCoder\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._watch([UserRequirement])\n        self._init_actions([SimpleWriteCode])\n</code></pre> <p>\u4e0e\u4e0a\u8ff0\u76f8\u4f3c\uff0c\u5bf9\u4e8e <code>SimpleTester</code>\uff0c\u6211\u4eec\uff1a</p> <ol> <li>\u4f7f\u7528 <code>_init_actions</code> \u4e3a<code>SimpleTester</code>\u914d\u5907 <code>SimpleWriteTest</code> \u52a8\u4f5c</li> <li>\u4f7f<code>Role</code> <code>_watch</code> \u6765\u81ea\u5176\u4ed6\u667a\u80fd\u4f53\u7684\u91cd\u8981\u4e0a\u6e38\u6d88\u606f\u3002\u56de\u60f3\u6211\u4eec\u7684SOP\uff0c<code>SimpleTester</code>\u4ece <code>SimpleCoder</code> \u4e2d\u83b7\u53d6\u4e3b\u4ee3\u7801\uff0c\u8fd9\u662f\u7531 <code>SimpleWriteCode</code> \u5f15\u8d77\u7684 <code>Message</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86 <code>self._watch([SimpleWriteCode])</code>\u3002</li> </ol> <p>\u4e00\u4e2a\u6269\u5c55\u7684\u95ee\u9898\uff1a\u60f3\u4e00\u60f3\u5982\u679c\u6211\u4eec\u4f7f\u7528 <code>self._watch([SimpleWriteCode, SimpleWriteReview])</code> \u4f1a\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u6837\u505a</p> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u4e3a\u667a\u80fd\u4f53\u5b9a\u4e49\u81ea\u5df1\u7684\u64cd\u4f5c\u903b\u8f91\u3002\u8fd9\u9002\u7528\u4e8e<code>Action</code>\u9700\u8981\u591a\u4e2a\u8f93\u5165\u7684\u60c5\u51b5\uff0c\u4f60\u5e0c\u671b\u4fee\u6539\u8f93\u5165\uff0c\u4f7f\u7528\u7279\u5b9a\u8bb0\u5fc6\uff0c\u6216\u8fdb\u884c\u4efb\u4f55\u5176\u4ed6\u66f4\u6539\u4ee5\u53cd\u6620\u7279\u5b9a\u903b\u8f91\u7684\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\uff1a</p> <pre><code>class SimpleTester(Role):\n    name: str = \"Bob\"\n    profile: str = \"SimpleTester\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([SimpleWriteTest])\n        # self._watch([SimpleWriteCode])\n        self._watch([SimpleWriteCode, SimpleWriteReview])  # feel free to try this too\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: to do {self.rc.todo}({self.rc.todo.name})\")\n        todo = self.rc.todo\n\n        # context = self.get_memories(k=1)[0].content # use the most recent memory as context\n        context = self.get_memories()  # use all memories as context\n\n        code_text = await todo.run(context, k=5)  # specify arguments\n        msg = Message(content=code_text, role=self.profile, cause_by=type(todo))\n\n        return msg\n</code></pre> <p>\u6309\u7167\u76f8\u540c\u7684\u8fc7\u7a0b\u5b9a\u4e49 <code>SimpleReviewer</code>\uff1a</p> <pre><code>class SimpleReviewer(Role):\n    name: str = \"Charlie\"\n    profile: str = \"SimpleReviewer\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([SimpleWriteReview])\n        self._watch([SimpleWriteTest])\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e09\u4e2a <code>Role</code>\uff0c\u662f\u65f6\u5019\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u8d77\u4e86\u3002\u6211\u4eec\u521d\u59cb\u5316\u6240\u6709\u89d2\u8272\uff0c\u8bbe\u7f6e\u4e00\u4e2a <code>Team</code>\uff0c\u5e76<code>hire</code> \u5b83\u4eec\u3002</p> <p>\u8fd0\u884c <code>Team</code>\uff0c\u6211\u4eec\u5e94\u8be5\u4f1a\u770b\u5230\u5b83\u4eec\u4e4b\u95f4\u7684\u534f\u4f5c\uff01</p> <pre><code>async def main(\n    idea: str = \"write a function that calculates the product of a list\",\n    investment: float = 3.0,\n    n_round: int = 5,\n    add_human: bool = False,\n):\n    logger.info(idea)\n\n    team = Team()\n    team.hire(\n        [\n            SimpleCoder(),\n            SimpleTester(),\n            SimpleReviewer(is_human=add_human),\n        ]\n    )\n\n    team.invest(investment=investment)\n    team.run_project(idea)\n    await team.run(n_round=n_round)\n\nif __name__ == \"__main__\":\n    fire.Fire(main)\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>\"\"\"\nFilename: MetaGPT/examples/build_customized_multi_agents.py\nCreated Date: Wednesday, November 15th 2023, 7:12:39 pm\nAuthor: garylin2099\n\"\"\"\nimport re\n\nimport fire\n\nfrom metagpt.actions import Action, UserRequirement\nfrom metagpt.logs import logger\nfrom metagpt.roles import Role\nfrom metagpt.schema import Message\nfrom metagpt.team import Team\n\n\ndef parse_code(rsp):\n    pattern = r\"```python(.*)```\"\n    match = re.search(pattern, rsp, re.DOTALL)\n    code_text = match.group(1) if match else rsp\n    return code_text\n\n\nclass SimpleWriteCode(Action):\n    PROMPT_TEMPLATE: str = \"\"\"\n    Write a python function that can {instruction}.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n    name: str = \"SimpleWriteCode\"\n\n    async def run(self, instruction: str):\n        prompt = self.PROMPT_TEMPLATE.format(instruction=instruction)\n\n        rsp = await self._aask(prompt)\n\n        code_text = parse_code(rsp)\n\n        return code_text\n\n\nclass SimpleCoder(Role):\n    name: str = \"Alice\"\n    profile: str = \"SimpleCoder\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._watch([UserRequirement])\n        self.set_actions([SimpleWriteCode])\n\n\nclass SimpleWriteTest(Action):\n    PROMPT_TEMPLATE: str = \"\"\"\n    Context: {context}\n    Write {k} unit tests using pytest for the given function, assuming you have imported it.\n    Return ```python your_code_here ``` with NO other texts,\n    your code:\n    \"\"\"\n\n    name: str = \"SimpleWriteTest\"\n\n    async def run(self, context: str, k: int = 3):\n        prompt = self.PROMPT_TEMPLATE.format(context=context, k=k)\n\n        rsp = await self._aask(prompt)\n\n        code_text = parse_code(rsp)\n\n        return code_text\n\n\nclass SimpleTester(Role):\n    name: str = \"Bob\"\n    profile: str = \"SimpleTester\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.set_actions([SimpleWriteTest])\n        # self._watch([SimpleWriteCode])\n        self._watch([SimpleWriteCode, SimpleWriteReview])  # feel free to try this too\n\n    async def _act(self) -&gt; Message:\n        logger.info(f\"{self._setting}: to do {self.rc.todo}({self.rc.todo.name})\")\n        todo = self.rc.todo\n\n        # context = self.get_memories(k=1)[0].content # use the most recent memory as context\n        context = self.get_memories()  # use all memories as context\n\n        code_text = await todo.run(context, k=5)  # specify arguments\n        msg = Message(content=code_text, role=self.profile, cause_by=type(todo))\n\n        return msg\n\n\nclass SimpleWriteReview(Action):\n    PROMPT_TEMPLATE: str = \"\"\"\n    Context: {context}\n    Review the test cases and provide one critical comments:\n    \"\"\"\n\n    name: str = \"SimpleWriteReview\"\n\n    async def run(self, context: str):\n        prompt = self.PROMPT_TEMPLATE.format(context=context)\n\n        rsp = await self._aask(prompt)\n\n        return rsp\n\n\nclass SimpleReviewer(Role):\n    name: str = \"Charlie\"\n    profile: str = \"SimpleReviewer\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.set_actions([SimpleWriteReview])\n        self._watch([SimpleWriteTest])\n\n\nasync def main(\n    idea: str = \"write a function that calculates the product of a list\",\n    investment: float = 3.0,\n    n_round: int = 5,\n    add_human: bool = False,\n):\n    logger.info(idea)\n\n    team = Team()\n    team.hire(\n        [\n            SimpleCoder(),\n            SimpleTester(),\n            SimpleReviewer(is_human=add_human),\n        ]\n    )\n\n    team.invest(investment=investment)\n    team.run_project(idea)\n    await team.run(n_round=n_round)\n\n\nif __name__ == \"__main__\":\n    fire.Fire(main)\n</code></pre>"}]}